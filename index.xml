<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>sun123zxy&#39;s blog</title>
<link>https://blog.sun123zxy.top/index.html</link>
<atom:link href="https://blog.sun123zxy.top/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.333</generator>
<lastBuildDate>Sat, 22 Apr 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>Wallis 公式、Stirling 公式与正态分布</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230423-stirling/index.html</link>
  <description><![CDATA[ 



<div class="hidden">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnewcommand%7B%5Cdiff%7D%7B%5Coperatorname%7Bd%7D%5C!%7D%0A"></p>
</div>
<p>参考：</p>
<ul>
<li>张筑生《数学分析新讲》第二册<span class="citation" data-cites="analysis"><sup>[1]</sup></span></li>
<li>张颢《概率论》<span class="citation" data-cites="prob"><sup>[2]</sup></span></li>
<li>Wikipedia, Math StackExchange, etc.</li>
</ul>
<section id="warm-up" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="warm-up"><span class="header-section-number">1</span> Warm up</h2>
<div id="exm-double-factorial" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B1%20%5Ctimes%203%20%5Ctimes%205%20%5Ctimes%20%5Cdots%20%5Ctimes%20(2n-1)%7D%7B2%20%5Ctimes%204%20%5Ctimes%206%20%5Ctimes%20%5Cdots%20%5Ctimes%202n%7D%0A"></p>
</div>
<div class="solution proof">
<p><span class="proof-title"><em>Solution</em>. </span>用放缩 <img src="https://latex.codecogs.com/png.latex?%0A2k%20%3E%20%5Csqrt%7B(2k-1)(2k+1)%7D%0A"> 拆分母即得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%3C%20%5Cfrac%201%20%7B%5Csqrt%7B2n+1%7D%7D%20%5Csim%200%0A"></p>
</div>
<div id="exm-binomial" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 (中心二项式系数) </strong></span>求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%7B2%5E%7B2n%7D%7D%0A"></p>
</div>
<div class="solution proof">
<p><span class="proof-title"><em>Solution</em>. </span><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%7B2%5E%7B2n%7D%7D%20=%20%5Cfrac%7B(2n)!%7D%7B2%5E%7B2n%7D%20(n!)%5E2%7D%20=%20%5Cfrac%7B(2n)!%7D%7B(2%5En%20n!)%5E2%7D%20=%20%5Cfrac%7B(2n)!%7D%7B(2n!!)%5E2%7D%20=%20%5Cfrac%7B(2n-1)!!%7D%7B2n!!%7D%20%3C%20%5Cfrac%201%20%7B%5Csqrt%7B2n+1%7D%7D%20%5Csim%200%0A"></p>
</div>
<p>上两例有没有更精确的渐进估计？这便是我们马上要研究的问题．</p>
</section>
<section id="wallis-公式" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="wallis-公式"><span class="header-section-number">2</span> Wallis 公式</h2>
<div id="lem-wallis-integral" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 1 (Wallis 积分公式) </strong></span>定积分系列 <img src="https://latex.codecogs.com/png.latex?%0AJ_n%20=%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5En%20x%20%5Cdiff%20x%0A"> 满足 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AJ_%7B2n%7D%20&amp;=%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%5Ccdot%20%5Cfrac%20%5Cpi%202%20%5C%5C%0AJ_%7B2n+1%7D%20&amp;=%20%5Cfrac%7B(2n)!!%7D%7B(2n+1)!!%7D%20%5Ccdot%201%0A%5Cend%7Baligned%7D%0A"></p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>我们的思路是：先把一个 <img src="https://latex.codecogs.com/png.latex?%5Csin%20x"> 放进微分中，然后分部积分得到递推式．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AJ_n%20&amp;=%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5En%20x%20%5Cdiff%20x%20%5C%5C%0A&amp;=%20-%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5E%7Bn-1%7D%20x%20%5Cdiff%20%5Ccos%20x%20%5C%5C%0A&amp;=%20%5Cleft%5B%20-%20%5Csin%5E%7Bn-1%7D%20x%20%5Ccos%20x%20%5Cright%5D_%7B0%7D%5E%7B%5Cfrac%20%5Cpi%202%7D%20+%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Ccos%20x%20%5Cdiff%20%5Csin%5E%7Bn-1%7D%20x%20%5C%5C%0A&amp;=%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Ccos%5E2%20x%20%5Csin%5E%7Bn-2%7D%20x%20%5Cdiff%20x%20%5C%5C%0A&amp;=%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20(1%20-%20%5Csin%5E2%20x)%20%5Csin%5E%7Bn-2%7D%20x%20%5Cdiff%20x%20%5C%5C%0A&amp;=%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5E%7Bn-2%7D%20x%20%5Cdiff%20x%20-%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5En%20x%20%5Cdiff%20x%20%5C%5C%0A&amp;=%20(n-1)%20J_%7Bn-2%7D%20-%20(n-1)%20J_n%0A%5Cend%7Baligned%7D%0A"></p>
<p>故 <img src="https://latex.codecogs.com/png.latex?%0AJ_n%20=%20%5Cfrac%7Bn-1%7D%7Bn%7D%20J_%7Bn-2%7D%0A"> 边界条件 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AJ_0%20&amp;=%20%5Cfrac%20%5Cpi%202%20%5C%5C%0AJ_1%20&amp;=%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%20x%20%5Cdiff%20x%20=%201%0A%5Cend%7Baligned%7D%0A"> 代入递推式求解就得到了要证的结论．</p>
</div>
<div id="thm-wallis" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (Wallis 公式) </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%5Cpi%202%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%201%20%7B2n+1%7D%20%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%0A"></p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>注意到在积分区间上，<img src="https://latex.codecogs.com/png.latex?%5Csin%5En%20x%20%5Cgeq%20%5Csin%5E%7Bn+1%7D%20x">，由积分的单调性，<img src="https://latex.codecogs.com/png.latex?J_n"> 随 <img src="https://latex.codecogs.com/png.latex?n"> 单调递减，故 <img src="https://latex.codecogs.com/png.latex?J_%7B2n+1%7D%20%5Cleq%20J_%7B2n%7D%20%5Cleq%20J_%7B2n-1%7D"> 成立．代入 Lemma&nbsp;1 中得到的结果 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B(2n)!!%7D%7B(2n+1)!!%7D%20%5Cleq%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%5Ccdot%20%5Cfrac%20%5Cpi%202%20%5Cleq%20%5Cfrac%7B(2n-2)!!%7D%7B(2n-1)!!%7D%0A"> 移项得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cfrac%7B1%7D%7B2n+1%7D%20%5Cleq%20%5Cfrac%20%5Cpi%202%20%5Cleq%20%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cfrac%201%20%7B2n%7D%0A"></p>
<p>现在只需说明 RHS 与 LHS 的差是一个无穷小． <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cleft(%20%5Cfrac%201%20%7B2n%7D%20-%20%5Cfrac%201%20%7B2n+1%7D%20%20%5Cright)%0A&amp;=%20%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cleft(%20%5Cfrac%201%20%7B2n(2n+1)%7D%20%5Cright)%20%5C%5C%0A&amp;=%20%5Cleft(%20%5Cfrac%7B(2n-2)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cfrac%20%7B2n%7D%7B(2n+1)%7D%0A%5Cend%7Baligned%7D%0A"> 由 Example&nbsp;1 ，<img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(2n-2)!!%7D%7B(2n-1)!!%7D%20=%200">，故上式确为一个无穷小，定理得证．</p>
</div>
<p>Wallis 公式还有其它表现形式： <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B2%5E%7B2n%7D%7D%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%20=%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Csim%20%5Csqrt%7B%5Cpi%20n%7D%20%5Cpod%7Bn%20%5Cto%20%5Cinfty%7D%0A"> 这里 Wallis 公式反映为对 Example&nbsp;1 和 Example&nbsp;2 的渐进估计．</p>
<div id="exr-catalan" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 1 </strong></span>对 Catalan 数 <img src="https://latex.codecogs.com/png.latex?%0AC_n%20=%20%5Cbinom%7B2n%7D%7Bn%7D%20-%20%5Cbinom%7B2n%7D%7Bn+1%7D%0A"> 做出渐进估计．</p>
</div>
<div class="solution proof">
<p><span class="proof-title"><em>Solution</em>. </span>注意到 <img src="https://latex.codecogs.com/png.latex?%0AC_n%20=%20%5Cbinom%7B2n%7D%7Bn%7D%20-%20%5Cbinom%7B2n%7D%7Bn+1%7D%20=%20%5Cbinom%7B2n%7D%7Bn%7D%20-%20%5Cfrac%20n%20%7Bn+1%7D%20%5Cbinom%7B2n%7D%7Bn%7D%20=%20%5Cfrac%201%20%7Bn+1%7D%20%5Cbinom%7B2n%7D%7Bn%7D%0A"> 用 Wallis 公式计算即得 <img src="https://latex.codecogs.com/png.latex?%0AC_n%20%5Csim%20%5Cfrac%20%7B2%5E%7B2n%7D%7D%7B%5Csqrt%7B%5Cpi%7D%20n%5E%7B%5Cfrac%203%202%7D%7D%0A"></p>
</div>
<p>Wallis 公式的另一种表现形式是 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%5Cpi%202%20=%20%5Cprod_%7Bk=1%7D%5E%5Cinfty%20%5Cfrac%7B4%20n%5E2%7D%7B4%20n%5E2-1%7D%20=%20%5Cprod_%7Bk=1%7D%5E%5Cinfty%20%5Cleft(%20%5Cfrac%7B2n%7D%7B2n-1%7D%20%5Ccdot%20%5Cfrac%7B2n%7D%7B2n+1%7D%20%5Cright)%0A"> 这表达式也被称为 Wallis product，用于近似计算 <img src="https://latex.codecogs.com/png.latex?%5Cpi">．</p>
<div class="remark proof">
<p><span class="proof-title"><em>Remark</em>. </span>这和我们在 Example&nbsp;1 中使用的放缩技巧……</p>
</div>
</section>
<section id="stirling-公式" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="stirling-公式"><span class="header-section-number">3</span> Stirling 公式</h2>
<div id="lem-e" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 2 </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%201+%5Cfrac%201%20n%20%5Cright)%5En%20%3C%20e%20%3C%20%5Cleft(%201%20+%20%5Cfrac%201%20n%20%5Cright)%5E%7Bn+1%7D%0A"></p>
</div>
<p>这是《数学分析 I》中大家所熟知的．</p>
<div id="thm-stirling-weak" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2 </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%5Cfrac%20n%20e%20%5Cright)%5En%20%3C%20%5Cfrac%20%7Bn!%7D%20e%0A%3C%20n%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%0A"></p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>将 Lemma&nbsp;2 写成 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B(n+1)%5En%7D%7Bn%5En%7D%20%3C%20e%20%3C%20%5Cfrac%7B(n+1)%5E%7Bn+1%7D%7D%7Bn%5E%7Bn+1%7D%7D%0A"> 对 <img src="https://latex.codecogs.com/png.latex?k%20=%201,2,%20%5Cdots,%20n-1"> 做连乘 <img src="https://latex.codecogs.com/png.latex?%0A%5Cprod_%7Bk=1%7D%5E%7Bn-1%7D%20%5Cfrac%7B(k+1)%5Ek%7D%7Bk%5Ek%7D%20%3C%20e%5E%7Bn-1%7D%20%3C%20%5Cprod_%7Bk=1%7D%5E%7Bn-1%7D%20%5Cfrac%7B(k+1)%5E%7Bk+1%7D%7D%7Bk%5E%7Bk+1%7D%7D%0A"> 注意到乘积的相邻两项中，前一项的分子与后一项的分母可以约分，中间每项只余下 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%20k">，故上式可化为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bn%5E%7Bn-1%7D%7D%7B(n-1)!%7D%20%3C%20e%5E%7Bn-1%7D%20%3C%20%5Cfrac%7Bn%5En%7D%7B(n-1)!%7D%0A"> 两端再同乘 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bn!%7D%7Be%5E%7Bn%7D%7D"> 就得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%5Cfrac%20n%20e%20%5Cright)%5En%20%3C%20%5Cfrac%20%7Bn!%7D%20e%0A%3C%20n%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%0A"></p>
</div>
<div id="thm-stirling" class="theorem">
<p><span class="theorem-title"><strong>Theorem 3 (Stirling 公式) </strong></span><img src="https://latex.codecogs.com/png.latex?%0An!%20%5Csim%20%5Csqrt%7B2%20%5Cpi%20n%7D%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%20%5Cpod%7Bn%20%5Cto%20%5Cinfty%7D%0A"></p>
</div>
<p>完整证明较复杂，这里介绍证明最后一步：已知 <img src="https://latex.codecogs.com/png.latex?n!%20%5Csim%20a%20%5Csqrt%20n%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En">，用 Wallis 公式对 <img src="https://latex.codecogs.com/png.latex?2%5E%7B2n%7D%20/%20%5Cbinom%7B2n%7D%7Bn%7D"> 的渐进估计确定系数 <img src="https://latex.codecogs.com/png.latex?a">．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csqrt%7B%5Cpi%20n%7D%20%5Csim%20%5Cfrac%20%7B2%5E%7B2n%7D%7D%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%20=%20%5Cfrac%7B2%5E%7B2n%7D%20(n!)%5E2%7D%7B(2n)!%7D%20%5Csim%20%5Cfrac%7B2%5E%7B2n%7D%20(a%20%5Csqrt%20n%20n%5En%20e%5E%7B-n%7D)%5E2%7D%7Ba%20%5Csqrt%7B2n%7D%202%5E%7B2n%7D%20n%5E%7B2n%7D%20e%5E%7B-2n%7D%7D%20=%20%5Csqrt%7B%5Cfrac%20n%202%7D%20a%0A"></p>
<p>因此 <img src="https://latex.codecogs.com/png.latex?a=%5Csqrt%7B2%20%5Cpi%7D">．</p>
<div id="exm-stirling-binomial" class="theorem example">
<p><span class="theorem-title"><strong>Example 3 </strong></span>当 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty">，<img src="https://latex.codecogs.com/png.latex?k%20%5Cto%20%5Cinfty"> 时，用 Stirling 公式渐进估计 <img src="https://latex.codecogs.com/png.latex?%5Cbinom%20n%20k">．</p>
</div>
<div class="solution proof">
<p><span class="proof-title"><em>Solution</em>. </span><img src="https://latex.codecogs.com/png.latex?%0A%5Cbinom%20n%20k%20%5Csim%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cfrac%7Bn%5En%7D%7Bk%5Ek%20(n-k)%5E%7Bn-k%7D%7D%0A"></p>
</div>
</section>
<section id="poisson-分布" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="poisson-分布"><span class="header-section-number">4</span> Poisson 分布</h2>
<p>描述单位时间平均发生次数恒定的随机事件的概率分布．</p>
<div id="def-poission" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Poisson 分布) </strong></span>若离散随机变量 <img src="https://latex.codecogs.com/png.latex?X"> 满足 <img src="https://latex.codecogs.com/png.latex?%0AP(X%20=%20k)%20=%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7De%5E%7B-%5Clambda%7D%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%3E%200"> 是确定的常数，则随机变量 <img src="https://latex.codecogs.com/png.latex?X"> 服从 Poisson 分布．</p>
</div>
<section id="从二项分布的推导" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="从二项分布的推导"><span class="header-section-number">4.1</span> 从二项分布的推导</h3>
<p>在 <img src="https://latex.codecogs.com/png.latex?np%20=%20%5Clambda"> 的条件下，取 <img src="https://latex.codecogs.com/png.latex?P(X_n%20=%20k)%20=%20%5Cbinom%20n%20k%20p%5Ek%20(1-p)%5E%7Bn-k%7D"> 在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 上的逐点极限．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AP(X_n%20=%20k)%0A&amp;=%20%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20(1-p)%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Cbinom%7Bn%7D%7Bk%7D%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bn%5Ek%7D%20%5Cleft(%201-%5Cfrac%20%5Clambda%20n%20%5Cright)%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Clambda%5Ek%20%5Cleft(%201-%5Cfrac%20%5Clambda%20n%20%5Cright)%5En%20%5Cleft(%201-%5Cfrac%20%5Clambda%20n%20%5Cright)%5E%7B-k%7D%20%5Cbinom%7Bn%7D%7Bk%7D%20%5Cfrac%7B1%7D%7Bn%5Ek%7D%20%5C%5C%0A&amp;%5Csim%20%5Clambda%5Ek%20e%5E%7B-%5Clambda%7D%5Cbinom%7Bn%7D%7Bk%7D%20%5Cfrac%201%20%7Bn%5Ek%7D%20%5C%5C%0A&amp;=%20%5Clambda%5Ek%20e%5E%7B-%5Clambda%7D%20%5Cfrac%20%7Bn%20(n-1)%20%5Cdots%20(n-k+1)%7D%7Bk!%20n%5Ek%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7D%20e%5E%7B-%5Clambda%7D%20%5Ccdot%201%20%5Ccdot%20(1-%5Cfrac%201%20n)%20%5Cdots%20(1%20-%20%5Cfrac%7Bk-1%7D%7Bn%7D)%20%5C%5C%0A&amp;%5Csim%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7D%20e%5E%7B-%5Clambda%7D%0A%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="归一性验证" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="归一性验证"><span class="header-section-number">4.2</span> 归一性验证</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20P(X%20=%20k)%20=%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7De%5E%7B-%5Clambda%7D%20=%20%20e%5E%7B-%5Clambda%7D%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7D%20=%20e%5E%7B-%5Clambda%7D%20e%5E%7B%5Clambda%7D%20=%201%0A"></p>
</section>
</section>
<section id="正态分布" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="正态分布"><span class="header-section-number">5</span> 正态分布</h2>
<p>与 Poisson 分布不同，（标准）正态分布是在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 的过程中假定 <img src="https://latex.codecogs.com/png.latex?p"> 不变的情况下，对归一化（即假定期望和方差不变）后的 <img src="https://latex.codecogs.com/png.latex?X_n"> 取逐点极限得到的．</p>
<div id="def-poission" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 2 (正态分布) </strong></span>若连续随机变量 <img src="https://latex.codecogs.com/png.latex?X"> 的期望 <img src="https://latex.codecogs.com/png.latex?E(X)%20=%20%5Cmu">，方差 <img src="https://latex.codecogs.com/png.latex?D(X)%20=%20%5Csigma">，且其概率分布函数为 <img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%7D%20%5Csigma%7D%20%5Cexp%20%5Cleft(-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%20%5Csigma%5E2%7D%5Cright)%0A"> 则变量 <img src="https://latex.codecogs.com/png.latex?X"> 服从正态分布，记为 <img src="https://latex.codecogs.com/png.latex?X%20%5Csim%20N(%5Cmu,%20%5Csigma%5E2)">．</p>
<p>特别的，当 <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%200">，<img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201"> 时，变量 <img src="https://latex.codecogs.com/png.latex?X"> 服从标准正态分布 <img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cexp%20%5Cleft(-%5Cfrac%7B1%7D%7B2%7D%20x%5E2%5Cright)%0A"></p>
</div>
<section id="从二项分布的推导de-moivre-laplace-定理" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="从二项分布的推导de-moivre-laplace-定理"><span class="header-section-number">5.1</span> 从二项分布的推导（de Moivre-Laplace 定理）</h3>
<p>设随机变量 <img src="https://latex.codecogs.com/png.latex?X_n%20%5Csim%20B(n,p)">．方便起见，令 <img src="https://latex.codecogs.com/png.latex?q%20=%201-p">．众所周知，二项分布的期望与方差满足 <img src="https://latex.codecogs.com/png.latex?E(X_n)%20=%20np">，<img src="https://latex.codecogs.com/png.latex?D(X_n)%20=%20npq">．</p>
<p>对随机变量 <img src="https://latex.codecogs.com/png.latex?X_n"> 做归一化： <img src="https://latex.codecogs.com/png.latex?%0A%5Cbar%20X_n%20=%20%5Cfrac%7BX_n%20-%20E(X_n)%7D%7B%5Csqrt%7BD(X_n)%7D%7D%20=%20%5Cfrac%7BX_n%20-%20np%7D%7B%5Csqrt%7Bnpq%7D%7D%0A"> 考虑到 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbar%20X_n%20=%20x)%20=%20P(X_n%20=%20np%20+%20x%20%5Csqrt%7Bnpq%7D)%0A"> 令 <img src="https://latex.codecogs.com/png.latex?k%20=%20np%20+%20x%20%5Csqrt%7Bnpq%7D">，则 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbar%20X_n%20=%20x)%20=%20P(X_n%20=%20k)%20=%20%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20q%5E%7Bn-k%7D%0A"> 此时 <img src="https://latex.codecogs.com/png.latex?n,k"> 均趋于无穷大，故可应用 Example&nbsp;3 对二项式系数做出估计 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20q%5E%7Bn-k%7D%0A&amp;%5Csim%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cfrac%7Bn%5En%7D%7Bk%5Ek%20(n-k)%5E%7Bn-k%7D%7D%20p%5Ek%20q%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cleft(%20%5Cfrac%7Bnp%7D%7Bk%7D%20%5Cright)%5E%7Bk%7D%20%5Cleft(%20%5Cfrac%7Bnq%7D%7Bn-k%7D%20%5Cright)%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cexp%7B%5Cleft(%20k%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D%20+%20(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D%20%5Cright)%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>下面分别处理 <img src="https://latex.codecogs.com/png.latex?k%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D"> 和 <img src="https://latex.codecogs.com/png.latex?(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D">．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ak%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D%0A&amp;=%20-(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cfrac%7Bnp%20+%20x%20%5Csqrt%7Bnpq%7D%7D%7Bnp%7D%7D%20%5C%5C%0A&amp;=%20-(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cleft(%201%20+%20x%20%5Csqrt%7B%5Cfrac%20q%20%7Bnp%7D%7D%20%5Cright)%7D%20%5C%5C%0A&amp;=%20-(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20%5Cleft(%20x%20%5Csqrt%7B%5Cfrac%20q%20%7Bnp%7D%7D%20-%20%5Cfrac%7Bx%5E2%20q%7D%7B2np%7D%20+%20o%5Cleft(%20%5Cfrac%201%20n%20%5Cright)%20%5Cright)%20%5C%5C%0A&amp;=%20-x%20%5Csqrt%7Bnpq%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20x%5E2%20q%20-%20x%5E2%20q%20+%20o(1)%0A%5Cend%7Baligned%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D%0A&amp;=%20-(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cfrac%7Bnq%20-%20x%20%5Csqrt%7Bnpq%7D%7D%7Bnq%7D%7D%20%5C%5C%0A&amp;=%20-(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cleft(%201%20-%20x%20%5Csqrt%7B%5Cfrac%20p%20%7Bnq%7D%7D%20%5Cright)%7D%20%5C%5C%0A&amp;=%20(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%20%5Cleft(%20x%20%5Csqrt%7B%5Cfrac%20p%20%7Bnq%7D%7D%20+%20%5Cfrac%7Bx%5E2%20p%7D%7B2nq%7D%20+%20o%5Cleft(%20%5Cfrac%201%20n%20%5Cright)%20%5Cright)%20%5C%5C%0A&amp;=%20x%20%5Csqrt%7Bnpq%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20x%5E2%20p%20-%20x%5E2%20p%20+%20o(1)%0A%5Cend%7Baligned%7D%0A"></p>
<p>因此 <img src="https://latex.codecogs.com/png.latex?%0Ak%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D%20+%20(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D%20=%20-%20%5Cfrac%7B1%7D%7B2%7D%20x%5E2%20(p+q)%20+%20o(1)%20=%20-%20%5Cfrac%201%202%20x%5E2%20+%20o(1)%0A"></p>
<p>下面处理 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D">．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%0A&amp;=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%7D%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7B1%7D%7B2%20%5Cpi%20(p%20+%20x%20%5Csqrt%7B%5Cfrac%7Bpq%7D%7Bn%7D%7D)%20(q%20-%20x%20%5Csqrt%7B%5Cfrac%7Bpq%7D%7Bn%7D%7D)%7D%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7B1%7D%7B2%20%5Cpi%20n%20p%20q%20+%20o(1)%7D%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>将上述结果代回，我们就得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20q%5E%7Bn-k%7D%0A&amp;%5Csim%20%5Csqrt%7B%5Cfrac%7B1%7D%7B2%20%5Cpi%20n%20p%20q%20+%20o(1)%7D%7D%20%5Cexp%7B%5Cleft(%20-%20%5Cfrac%201%202%20x%5E2%20+%20o(1)%20%5Cright)%7D%20%5C%5C%0A&amp;%5Csim%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%20n%20p%20q%7D%7D%20%5Cexp%7B%5Cleft(%20-%20%5Cfrac%201%202%20x%5E2%20%5Cright)%7D%0A%5Cend%7Baligned%7D%0A"> 即 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbar%20X_n%20=%20x)%20=%20P(X_n%20=%20k)%20%5Csim%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%20=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%5Cfrac%7B(k-np)%5E2%7D%7B2npq%7D%20%5Cright)%0A"> 这正是我们想要的．</p>
<div class="remark proof">
<p><span class="proof-title"><em>Remark</em>. </span>细心的同学可能会对式子前边的系数仍是 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 时的无穷小产生疑问．事实上，在将 <img src="https://latex.codecogs.com/png.latex?X_n"> 归一化为 <img src="https://latex.codecogs.com/png.latex?%5Cbar%20X_n"> 的过程中，我们将整个变量“压缩”至原来的 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Csqrt%7Bnpq%7D%7D">，因此前面的系数可以理解为一种类似 <img src="https://latex.codecogs.com/png.latex?%5Cdiff%20x"> 的存在．关于归一化的直观理解，3Blue1Brown 的中心极限定理视频<span class="citation" data-cites="3b1b-clt"><sup>[3]</sup></span>提供了很好的讲解．</p>
<p>更形式化的，由于归一化得到的离散型随机变量 <img src="https://latex.codecogs.com/png.latex?%5Cbar%20X_n"> 在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 的过程中已经变成连续型随机变量 <img src="https://latex.codecogs.com/png.latex?X">，我们研究的对象也应从单点转向区间．因此，对 <img src="https://latex.codecogs.com/png.latex?X_n"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cbar%20X_n"> 概率分布的叙述做一点变动 <img src="https://latex.codecogs.com/png.latex?%0AP%5Cleft(x%20%5Cleq%20%5Cbar%20X_n%20%3C%20x%20+%20%5Cfrac%201%20%7B%5Csqrt%7Bnpq%7D%7D%5Cright)%0A=%20P%5Cleft(k%20%5Cleq%20X_n%20%3C%20k%20+%201%20%5Cright)%0A=%20P(X_n=k)%20%5Csim%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%0A"> 令区间大小趋于 <img src="https://latex.codecogs.com/png.latex?0"> 就得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af(x)%20&amp;=%20%5Clim_%7Bh%20%5Cto%200%7D%7B%5Cfrac%7BP(x%20%5Cleq%20X%20%3C%20x+h)%7D%7Bh%7D%7D%20%5C%5C%0A&amp;=%20%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csqrt%7Bnpq%7D%20%5Ccdot%20P%5Cleft(x%20%5Cleq%20%5Cbar%20X_n%20%3C%20x%20+%20%5Cfrac%201%20%7B%5Csqrt%7Bnpq%7D%7D%5Cright)%20%5C%5C%0A&amp;=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csqrt%7Bnpq%7D%20%5Ccdot%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%20&amp;%20%5Cdots%20%5Ctext%7B%E8%BF%99%E9%87%8C%20$%5Csim$%20%E8%A1%A8%E7%8E%B0%E4%B8%BA%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F%E6%9B%BF%E6%8D%A2%7D%20%5C%5C%0A&amp;=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%0A%5Cend%7Baligned%7D%0A"> 这才是我们真正想要的，由二项分布归一化后取极限得到的，标准正态分布的概率密度函数．</p>
</div>
</section>
</section>
<section id="challenge" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="challenge"><span class="header-section-number">6</span> Challenge</h2>
<p>选讲或留作课后讨论．</p>
<section id="正态分布的归一性验证maxwell-速率分布与高维球体的表面积" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="正态分布的归一性验证maxwell-速率分布与高维球体的表面积"><span class="header-section-number">6.1</span> 正态分布的归一性验证、Maxwell 速率分布与高维球体的表面积</h3>
<p>Guass 积分： <img src="https://latex.codecogs.com/png.latex?%0A%5Cint_%7B-%5Cinfty%7D%5E%7B+%5Cinfty%7D%20e%5E%7B-x%5E2%7D%20%5Cdiff%20x%20=%20%5Csqrt%20%5Cpi%0A"></p>
<p>Maxwell 速率分布： <img src="https://latex.codecogs.com/png.latex?%0Af(v)%20=%204%20%5Cpi%20v%5E2%20%5Cleft(%20%5Cfrac%7Bm%7D%7B2%20%5Cpi%20kT%7D%20%5Cright)%5E%7B%5Cfrac%203%202%7D%20%5Cexp%20%5Cleft(%20-%20%5Cfrac%7Bm%7D%7B2kT%7Dv%5E2%20%5Cright)%0A"></p>
<p>以及它们与高维球体表面积的联系涉及多元积分学的内容．参考 3Blue1Brown 有关 <img src="https://latex.codecogs.com/png.latex?%5Cpi"> 与正态分布的视频<span class="citation" data-cites="3b1b-pi"><sup>[4]</sup></span>．</p>
</section>
<section id="n-的其它估计" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="n-的其它估计"><span class="header-section-number">6.2</span> <img src="https://latex.codecogs.com/png.latex?n!"> 的其它估计</h3>
<p>一种更容易想到的做法是 <img src="https://latex.codecogs.com/png.latex?%0An%20%5Cln%20n%20-%20n%20-%201%20=%20%5Cint_1%5En%20%5Cln%20x%20%5Cdiff%20x%20%5Cleq%0A%5Cln%20n!%20=%20%5Csum_%7Bk=1%7D%5En%20%5Cln%20k%0A%5Cleq%20%5Cint_1%5E%7Bn+1%7D%20%5Cln%20x%20%5Cdiff%20x%20=%20(n+1)%20%5Cln%20(n+1)%20-%20n%20-%202%0A"> 从而 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%20%5Cleq%20e%20%5Ccdot%20n!%20%5Cleq%20%5Cleft(%5Cfrac%7Bn+1%7D%7Be%7D%5Cright)%5E%7Bn+1%7D%0A"> 当然这比 Theorem&nbsp;2 的估计稍差．</p>
<p>更多估计可参考这篇文章<span class="citation" data-cites="hijjjjq"><sup>[5]</sup></span>．</p>
</section>
<section id="wallis-公式视角下三阶乘与中心三项式系数的渐进估计" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="wallis-公式视角下三阶乘与中心三项式系数的渐进估计"><span class="header-section-number">6.3</span> Wallis 公式视角下三阶乘与中心三项式系数的渐进估计</h3>
<div id="exr-triple-factorial-1" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 2 </strong></span>求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(3n-2)!!!%7D%7B(3n)!!!%7D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B1%20%5Ctimes%204%20%5Ctimes%207%20%5Ctimes%20%5Cdots%20%5Ctimes%20(3n-2)%7D%7B3%20%5Ctimes%206%20%5Ctimes%209%20%5Ctimes%20%5Cdots%20%5Ctimes%203n%7D%0A"> 并对其做出渐进估计．</p>
</div>
<div id="exr-triple-factorial-2" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 3 </strong></span>求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(3n-1)!!!%7D%7B(3n)!!!%7D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B2%20%5Ctimes%205%20%5Ctimes%208%20%5Ctimes%20%5Cdots%20%5Ctimes%20(3n-1)%7D%7B3%20%5Ctimes%206%20%5Ctimes%209%20%5Ctimes%20%5Cdots%20%5Ctimes%203n%7D%0A"> 并对其做出渐进估计．</p>
</div>
<div id="exr-trinomial" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 4 </strong></span>求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(3n)!%20/%20(n!)%5E3%7D%7B3%5E%7B3n%7D%7D%0A"> 并对其做出渐进估计．</p>
</div>
<p>用 Stirling 公式计算得到的结果是 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Csqrt%203%7D%7B2%20%5Cpi%20n%7D%0A"> 但在 Wallis 公式的视角下如何获得？</p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix" data-number="7"><h2 class="anchored quarto-appendix-heading"><span class="header-section-number">7</span> Acknowledgments</h2><div class="quarto-appendix-contents">

<p>感谢吕导组织<del>我最喜欢的</del>研讨课环节．此外，Example&nbsp;1 的放缩技巧由吸取教训同学提供，Poisson 分布的二项分布推导是与张同学讨论的结果，在此表示感谢．</p>



</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-line-spacing="2">
<div id="ref-analysis" class="csl-entry">
1. 张筑生. (2021). <em>数学分析新讲（重排本）（第二册）</em> (2nd ed.). 北京大学出版社.
</div>
<div id="ref-prob" class="csl-entry">
2. 张颢. (2018). <em>概率论</em>. 高等教育出版社.
</div>
<div id="ref-3b1b-clt" class="csl-entry">
3. 3Blue1Brown. (2023). <em>But what is the central limit theorem?</em> <a href="https://www.youtube.com/watch?v=zeJD6dqJ5lo" class="uri">https://www.youtube.com/watch?v=zeJD6dqJ5lo</a>.
</div>
<div id="ref-3b1b-pi" class="csl-entry">
4. 3Blue1Brown. (2023). <em>Why π is in the normal distribution (beyond integral tricks)</em>. <a href="https://www.youtube.com/watch?v=cy8r7WSuT1I" class="uri">https://www.youtube.com/watch?v=cy8r7WSuT1I</a>.
</div>
<div id="ref-hijjjjq" class="csl-entry">
5. hijjjjq. (2022). <em>对n的阶乘（n!）进行估计</em>. <a href="https://zhuanlan.zhihu.com/p/552658420" class="uri">https://zhuanlan.zhihu.com/p/552658420</a>.
</div>
</div></section></div> ]]></description>
  <category>数学</category>
  <guid>https://blog.sun123zxy.top/posts/20230423-stirling/index.html</guid>
  <pubDate>Sat, 22 Apr 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>OI 数论中的上界估计与时间复杂度证明</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230418-complexity/index.html</link>
  <description><![CDATA[ 



<div class="hidden">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnewcommand%7B%5Cfloor%7D%5B1%5D%7B%5Cleft%5Clfloor%20#1%20%5Cright%5Crfloor%7D%0A"></p>
</div>
<section id="预备" class="level2" data-number="">
<h2 data-number="" class="anchored" data-anchor-id="预备"><span class="header-section-number"></span> 预备</h2>
<section id="渐进符号" class="level3" data-number="0.1">
<h3 data-number="0.1" class="anchored" data-anchor-id="渐进符号"><span class="header-section-number">0.1</span> 渐进符号</h3>
<p>其实不少高等数学 / 数学分析教材在讲解无穷小的比较时已经相当严谨地介绍过大 O、小 O 记号，然而各种历史习惯记法的符号滥用（abuse of notation）<span class="citation" data-cites="wikipedia_abuse"><sup>[1]</sup></span> 直到现在都让笔者头疼. These notations seem to be innocent, but can be catastrophic without careful manipulation. For example,</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%0An%20=%20O(n%5E2)%20%5Cland%20n%5E2%20=%20O(n%5E2)%20%5Cimplies%20n%20=%20n%5E2%0A"></p>
<p>Knuth 在《具体数学》里举出的例子<span class="citation" data-cites="concretemath_onotation"><sup>[2]</sup></span>. “<img src="https://latex.codecogs.com/png.latex?=">” 隐含的对称性使其在 <img src="https://latex.codecogs.com/png.latex?g(x)%20=%20O(f(x))"> 中格格不入. 事实上，将 <img src="https://latex.codecogs.com/png.latex?O(f(x))"> 看作“阶不高于 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的所有函数的集合”是比“某个阶不高于 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的函数”更严谨的理解. 因此，本文将使用 <img src="https://latex.codecogs.com/png.latex?f(x)%20%5Cin%20O(g(x))"> （有时也记为 <img src="https://latex.codecogs.com/png.latex?O(f(x))%20%5Csubset%20O(g(x))">）的集合论符号代替传统的 <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20O(g(x))"> 记法.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%0An%5E2%20%5Csin%20n%20%5Cin%20O(n%5E2)%20%5Cimplies%20%5Csum_%7Bi=1%7D%5En%20i%5E2%20%5Csin%20i%20%5Cin%20%5Csum_%7Bi=1%7D%5En%20O(i%5E2)%20%5Csubset%20O%5Cleft(%20%5Csum_%7Bi=1%7D%5En%20i%5E2%20%5Cright)%20%5Csubset%20O(n%5E3)%0A"> 或更一般的， <img src="https://latex.codecogs.com/png.latex?%0Ag(x)%20%5Cin%20O(f(x))%20%5Cimplies%20%5Csum_%7BP(n,i)%7D%20g(i)%20%5Cin%20%5Csum_%7BP(n,i)%7D%20O(f(i))%20%5Csubset%20O%20%5Cleft(%5Csum_%7BP(n,i)%7D%20f(i)%20%5Cright)%0A"></p>
<p>没看出有啥问题，对吧？笔者在写作此文时犯了同样的错误. 请注意，大 O 记号的作用对象是函数，<img src="https://latex.codecogs.com/png.latex?f(i)"> 是什么？它只是个函数值，是确定的数——这是因为 <img src="https://latex.codecogs.com/png.latex?i"> 也是求和枚举中确定的数，而不是 <img src="https://latex.codecogs.com/png.latex?n"> 这种真正代表变元的记号. 所以 <img src="https://latex.codecogs.com/png.latex?O(f(i))"> 是什么？它什么也不是.</p>
<p>这种错误的出现是在所难免的，我们太习惯用 <img src="https://latex.codecogs.com/png.latex?x">、<img src="https://latex.codecogs.com/png.latex?x%5E3%20+%205%20x%5E2%20+%20x"> 这种变元都不明确的记号来表示函数了<span class="citation" data-cites="wikipedia_abuse"><sup>[1]</sup></span>. 写成 <img src="https://latex.codecogs.com/png.latex?f(x)"> 也不严谨，因为只有 <img src="https://latex.codecogs.com/png.latex?f"> 才应代表函数本身，<img src="https://latex.codecogs.com/png.latex?f(x)"> 只能是函数值. 这样我们就可以放心地写下 <img src="https://latex.codecogs.com/png.latex?O(f)">，不用担心把变元与确定值弄混了.</p>
<p>然而大家还是喜欢写 <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> 和 <img src="https://latex.codecogs.com/png.latex?O(e%5E%7Bn%5E2%7D)">，而不是奇怪的 <img src="https://latex.codecogs.com/png.latex?O(%5Cmathrm%7Bid%7D%5E2)"> 和 <img src="https://latex.codecogs.com/png.latex?O(%5Cmathrm%7Bexp%7D%20%5Ccirc%20%7B%5Cmathrm%7Bid%7D%5E2%7D)">. 所以，我们大概只能沿用这种不太严谨的记号，并时刻提醒自己加倍小心了. （形如 <img src="https://latex.codecogs.com/png.latex?x%20%5Cmapsto%20e%5E%7Bx%5E2%7D"> 的 <img src="https://latex.codecogs.com/png.latex?%5Clambda"> 风格“匿名函数”记号可能更好？）</p>
<p>但上述命题从结论上是正确的. 正确的推导过程应为 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7BP(n,i)%7D%20g(i)%20%5Cleq%20%5Csum_%7BP(n,i)%7D%20C%20f(i)%20%5Cleq%20C%20%5Csum_%7BP(n,i)%7D%20f(i)%20%5Cin%20O%20%5Cleft(%5Csum_%7BP(n,i)%7D%20f(i)%20%5Cright)%5C%0A"></p>
<p>第一步是直接由大 O 记号的定义得到的结果.</p></li>
</ul>
<p>Wikipedia<span class="citation" data-cites="asymptotic_wikipedia"><sup>[3]</sup></span> 中有一张详尽的表格介绍了各种渐进符号的定义，OI Wiki<span class="citation" data-cites="asymptotic_oiwiki"><sup>[4]</sup></span> 上也有极好的讲解，尚不熟练的读者可以参考. 有兴趣仔细研究的读者可以参考《具体数学》第九章<span class="citation" data-cites="concretemath_onotation"><sup>[2]</sup></span>、Wikipedia 及其 reference（个人推荐 Knuth 关于 <img src="https://latex.codecogs.com/png.latex?O">、<img src="https://latex.codecogs.com/png.latex?%5COmega">、<img src="https://latex.codecogs.com/png.latex?%5CTheta"> 的短文<span class="citation" data-cites="knuth_omicron"><sup>[5]</sup></span>）. 本文除用 “<img src="https://latex.codecogs.com/png.latex?%5Cin">” 和“<img src="https://latex.codecogs.com/png.latex?%5Csubset">”替代 “<img src="https://latex.codecogs.com/png.latex?=">” 外，完全使用 Knuth 提议的记号体系.</p>
</section>
<section id="调和数-hn-调和级数" class="level3" data-number="0.2">
<h3 data-number="0.2" class="anchored" data-anchor-id="调和数-hn-调和级数"><span class="header-section-number">0.2</span> 调和数 <img src="https://latex.codecogs.com/png.latex?H(n)"> / 调和级数</h3>
<p>调和级数的部分和 <img src="https://latex.codecogs.com/png.latex?H(n)"> 定义为 <img src="https://latex.codecogs.com/png.latex?%0AH(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Cfrac%201%20i%0A"> 通过一些与 <img src="https://latex.codecogs.com/png.latex?e"> 有关的数列放缩可以证明 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20(%20H(n)%20-%20%5Clog%20n%20)%20=%20c">，其中 <img src="https://latex.codecogs.com/png.latex?c%20%5Capprox%200.577"> 是 Euler 常数. 因此 <img src="https://latex.codecogs.com/png.latex?n%20H(n)%20%5Csim%20n%20%5Clog%20n%20%5Cin%20%5CTheta(%5Clog%20n)">.</p>
</section>
<section id="自然数等幂和-p_pn-p---级数" class="level3" data-number="0.3">
<h3 data-number="0.3" class="anchored" data-anchor-id="自然数等幂和-p_pn-p---级数"><span class="header-section-number">0.3</span> 自然数等幂和 <img src="https://latex.codecogs.com/png.latex?P_p(n)"> / <img src="https://latex.codecogs.com/png.latex?p"> - 级数</h3>
<p><img src="https://latex.codecogs.com/png.latex?p"> - 级数可视为调和级数的推广. 其部分和定义为 <img src="https://latex.codecogs.com/png.latex?%0AP_p(n)%20=%20%5Csum_%7Bi=1%7D%5En%20i%5E%7B-p%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?p"> - 级数具有如下性质：</p>
<ul>
<li><p>当 <img src="https://latex.codecogs.com/png.latex?p%20%3E%201"> 时，<img src="https://latex.codecogs.com/png.latex?p"> - 级数收敛；</p></li>
<li><p>当 <img src="https://latex.codecogs.com/png.latex?p%20=%201"> 时，<img src="https://latex.codecogs.com/png.latex?p"> - 级数是调和级数；</p></li>
<li><p>当 <img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20p%20%3C%201"> 时，我们指出 <img src="https://latex.codecogs.com/png.latex?%0AP_p(n)%20%5Csim%20%5Cfrac%7B1%7D%7B1-p%7D%20n%5E%7B1-p%7D%20%5Cin%20%5CTheta(n%5E%7B1-p%7D)%0A"></p></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20p%20%3C%201"> 时 <img src="https://latex.codecogs.com/png.latex?p"> - 级数的渐进估计可以从连续幂函数积分的角度理解. 证明这渐进性，离散情况下，可对 <img src="https://latex.codecogs.com/png.latex?n%5Ep"> 差分后前缀和 + 二项式定理得到高次项系数，或可用离散微积分理论得到精确表示（参见《具体数学》<span class="citation" data-cites="concretemath_calculus"><sup>[6]</sup></span>）；连续情况下，Lagrange 中值定理应为较简单的估计方法. 这里从略. 总之，我们得到： <img src="https://latex.codecogs.com/png.latex?%0AP_p(n)%20%5Cin%20%5Cbegin%7Bcases%7D%0A%5CTheta(n%5E%7B1-p%7D)%20&amp;%20p%20%3C%201%20%5C%5C%0A%5CTheta(n%20%5Clog%20n)%20&amp;%20p%20=%201%20%5C%5C%0A%5CTheta(1)%20&amp;%20p%20%3E%201%0A%5Cend%7Bcases%7D%0A"></p>
</section>
</section>
<section id="约数函数-sigma_zn" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="约数函数-sigma_zn"><span class="header-section-number">1</span> 约数函数 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"></h2>
<p>约数函数（Divisor Function，也可称为除数函数、因数函数）是与 <img src="https://latex.codecogs.com/png.latex?n"> 的因子有关的一类函数，定义如下：</p>
<div id="def-sigma" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (约数函数) </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_z(n)%20=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20d%5Ez%0A"></p>
</div>
<p>当 <img src="https://latex.codecogs.com/png.latex?z=0"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)"> 被称为约数个数函数（number-of-divisors function），常被记为 <img src="https://latex.codecogs.com/png.latex?d(n)"> 或 <img src="https://latex.codecogs.com/png.latex?%5Ctau(n)">. 当 <img src="https://latex.codecogs.com/png.latex?z=1"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_1(n)"> 被称为约数和函数（sum-of-divisors function），常直接记为 <img src="https://latex.codecogs.com/png.latex?%5Csigma(n)">.</p>
<div id="exm-sigma0ub" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0%20(n)"> 的渐进上界.</p>
</div>
<p>也就是估计 <img src="https://latex.codecogs.com/png.latex?n"> 的因子的数量. 一个广为人知的上界是 <img src="https://latex.codecogs.com/png.latex?2%20%5Csqrt%20n">，因为 <img src="https://latex.codecogs.com/png.latex?n"> 的所有小于 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%20n"> 的因子 <img src="https://latex.codecogs.com/png.latex?d"> 均与另一因子 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20n%20d"> 一一对应.</p>
<p>事实上进一步可以证明 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20o(n%5E%5Cepsilon)%20%5Cquad%20%5Cforall%20%5Cepsilon%20%3E%200"><span class="citation" data-cites="wikipedia_divisor"><sup>[7]</sup></span>，虽然这在 OI 中并不实用.</p>
<div id="exm-sumsigma0ub" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 </strong></span>估计 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma_0%7D(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_0%20(i)"> 的渐进上界.</p>
</div>
<p>即估计 <img src="https://latex.codecogs.com/png.latex?1"> 到 <img src="https://latex.codecogs.com/png.latex?n"> 中所有数因子个数的和. 这是一个形式上鲜为人知但其应用广为人知的例子. 变换求和顺序，容易得到</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Csigma_0%7D(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_0%20(i)%0A=%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bd%20%5Cmid%20i%7D%201%0A=%20%5Csum_%7Bd=1%7D%5En%20%5Cfloor%7B%5Cfrac%20n%20d%7D%0A%5Cleq%20%5Csum_%7Bd=1%7D%5En%20%5Cfrac%20n%20d%0A=%20n%20H(n)%20%5Cin%20O(n%20%5Clog%20n)%0A"></p>
<p>显然，这比 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Csqrt%20n)"> 的平凡估计好上不少. 本例的思路不仅是埃氏筛（Sieve of Eratosthenes）的理论基础，也在杜教筛、快速 Mobius 变换、<img src="https://latex.codecogs.com/png.latex?%5Cgcd"> 卷积<span class="citation" data-cites="gcdconv"><sup>[8]</sup></span>等处出现.</p>
<p>进一步利用此技巧和 <img src="https://latex.codecogs.com/png.latex?p"> - 级数的估计，我们甚至能在仔细研究 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"> 前就得到其前缀和的渐进估计：</p>
<div id="exm-sumsigmazub" class="theorem example">
<p><span class="theorem-title"><strong>Example 3 </strong></span>估计 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma_z%7D(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_z%20(i)"> 的渐进上界.</p>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Chat%7B%5Csigma_z%7D(n)%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_z%20(i)%0A=%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bd%20%5Cmid%20i%7D%20d%5Ez%0A=%20%5Csum_%7Bd=1%7D%5En%20d%5Ez%20%5Cfloor%7B%5Cfrac%20n%20d%7D%20%5C%5C%0A&amp;%5Cleq%20n%20%5Csum_%7Bd=1%7D%5En%20d%5E%7Bz-1%7D%0A=%20n%20P_%7B1-z%7D(n)%0A%5Cin%20%5Cbegin%7Bcases%7D%0AO(n%5E%7Bz+1%7D)%20&amp;%20z%20%3E%200%20%5C%5C%0AO(n%20%5Clog%20n)%20&amp;%20z%20=%200%20%5C%5C%0AO(n)%20&amp;%20z%20%3C%200%0A%5Cend%7Bcases%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>遗憾的是，对此前缀和做差分并不能得到 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"> 的优秀估计.</p>
<p>现在引入一个重要放缩技巧，其在后续估计中屡试不爽.</p>
<div id="prp-trick1" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 1 </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cmid%20n%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5En%20f%20(%5Cfloor%7B%5Cfrac%20n%20i%7D)%0A"></p>
</div>
<p>显然，右式比左式多算了 <img src="https://latex.codecogs.com/png.latex?i%20%5Cnmid%20n"> 的项，因此命题是正确的. 但我们还可以做得更好：</p>
<div id="prp-trick1ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 2 </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cmid%20n%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20f(i)%20+%20f(%5Cfloor%7B%5Cfrac%20n%20i%7D)%0A"></p>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Csqrt%20n"> 分治. 我们其实已经在 Example&nbsp;1 估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)"> 时用过此技巧了.</p>
<div id="exm-sigma1ub" class="theorem example">
<p><span class="theorem-title"><strong>Example 4 </strong></span>估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20(n)"> 的渐进上界.</p>
</div>
<p>用 Proposition&nbsp;1： <img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_1%20(n)%0A=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20d%20%5Cleq%20%5Csum_%7Bi=1%7D%5En%20%5Cfloor%7B%5Cfrac%20n%20i%7D%20%5Cleq%20n%20H(n)%20%5Cin%20O(n%20%5Clog%20n)%0A"></p>
<p>可以证明用 Proposition&nbsp;2 不会得到更优的结果.</p>
<p>我们发现了一个有趣的事实：<img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20(n)"> 和 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma_0%7D(n)"> 的渐进上界均为 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">.</p>
<div id="exm-sigmazub" class="theorem example">
<p><span class="theorem-title"><strong>Example 5 </strong></span>估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z%20(n)"> 的渐进上界.</p>
</div>
<p>用 Proposition&nbsp;2 和 <img src="https://latex.codecogs.com/png.latex?p"> - 级数的性质：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csigma_z%20(n)%0A&amp;=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20d%5Ez%0A%5Cleq%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20i%5Ez%20+%20%5Cfloor%7B%5Cfrac%20n%20i%7D%5Ez%20%5C%5C%0A&amp;%5Cleq%20%5Cbegin%7Bcases%7D%0A%5Cdisplaystyle%202%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20%5Cfloor%7B%5Cfrac%20n%20i%7D%5Ez%20%5Cleq%202%20n%5Ez%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20i%5E%7B-z%7D%20&amp;%20=%202%20n%5Ez%20P_z(%5Csqrt%20n)%20&amp;%20z%20%5Cgeq%200%5C%5C%0A%5Cdisplaystyle%202%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20i%5Ez%20&amp;%20=%202%20P_%7B-z%7D(%5Csqrt%20n)%20%20&amp;%20z%20%3C%200%0A%5Cend%7Bcases%7D%20%5C%5C%0A%5Cin%20&amp;%20%5Cbegin%7Bcases%7D%0A2%20n%5Ez%20O(1)%20&amp;%20z%20%3E%201%20%5C%5C%0A2%20n%20O(%5Clog%20%5Csqrt%20n)%20&amp;%20z%20=%201%20%5C%5C%0A2%20n%5Ez%20O(n%5E%7B%5Cfrac%20%7B1-z%7D%202%7D)%20&amp;%200%20%5Cleq%20z%20%3C%201%20%5C%5C%0A2%20O(n%5E%7B%5Cfrac%20%7B1+z%7D%202%7D)%20&amp;%20-1%20%3C%20z%20%3C%200%20%5C%5C%0A2%20O(%5Clog%20%5Csqrt%20n)%20&amp;%20z%20=%20-1%20%5C%5C%0A2%20O(1)%20&amp;%20z%20%3C%20-1%0A%5Cend%7Bcases%7D%0A=%20%5Cbegin%7Bcases%7D%0AO(n%5Ez)%20&amp;%20z%20%3E%201%20%5C%5C%0AO(n%20%5Clog%20n)%20&amp;%20z%20=%201%20%5C%5C%0AO(n%5E%7B%5Cfrac%20%7B1+z%7D%202%7D)%20&amp;%20-1%20%3C%20z%20%3C%201%20%5C%5C%0AO(%5Clog%20n)%20&amp;%20z%20=%20-1%20%5C%5C%0AO(1)%20&amp;%20z%20%3C%20-1%0A%5Cend%7Bcases%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>我们得到了一个相当优秀的渐进上界. 值得关注的是：</p>
<ul>
<li>当 <img src="https://latex.codecogs.com/png.latex?z=0"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20O(n%5E%7B%5Cfrac%201%202%7D)">. 这与 Example&nbsp;1 的结果一致.</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?z=%5Cfrac%201%202"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cfrac%201%202%7D(n)%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)">，即 <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bd%20%5Cmid%20n%7D%20%5Csqrt%20d%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)">. 洛谷 P4980 Polya 定理模板题<span class="citation" data-cites="polya_luogu"><sup>[9]</sup></span>的一种比较 trivial 的解法<span class="citation" data-cites="polya_my"><sup>[10]</sup></span>的时间复杂度证明就来源于此. 我们之后还会在整除分块与杜教筛中见到它.</li>
</ul>
<p>另外，如果只使用 Proposition&nbsp;1 ，<img src="https://latex.codecogs.com/png.latex?-1%3Cz%3C1"> 部分的渐进上界将只能估计至 <img src="https://latex.codecogs.com/png.latex?O(n)">. 因此 Proposition&nbsp;2 是更为优越的.</p>
<p>约数函数更复杂的上限与渐进估计可参考 Wikipedia<span class="citation" data-cites="wikipedia_divisor"><sup>[7]</sup></span>.</p>
</section>
<section id="整除分块" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="整除分块"><span class="header-section-number">2</span> 整除分块</h2>
<p>也被称为数论分块. 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20f(i)%20g(%5Cfloor%7B%5Cfrac%20n%20i%7D)%0A"> 我们按 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cfloor%7B%5Cfrac%20n%20i%7D"> 分块求和： <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%7D%20g(d)%20%5Csum_%7B%5Cfloor%7B%5Cfrac%20n%20i%7D%20=%20d%7D%20f(i)%0A"> 可以证明，对一指定的 <img src="https://latex.codecogs.com/png.latex?d">，满足 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cfloor%7B%5Cfrac%20n%20i%7D"> 的 <img src="https://latex.codecogs.com/png.latex?i"> 取遍一连续区间，故若 <img src="https://latex.codecogs.com/png.latex?f"> 的前缀和能 <img src="https://latex.codecogs.com/png.latex?O(1)"> 求出，块数量 <img src="https://latex.codecogs.com/png.latex?%5C#%20%5Cleft%5C%7B%20%5Cfloor%7B%5Cfrac%20n%20i%7D%20%5Cright%5C%7D_%7Bi=1%7D%5En"> 即该算法的时间复杂度. 注意到当 <img src="https://latex.codecogs.com/png.latex?i%20%5Cleq%20%5Csqrt%20n"> 时，<img src="https://latex.codecogs.com/png.latex?%5Cfloor%7B%5Cfrac%20n%20i%7D"> 最多只有 <img src="https://latex.codecogs.com/png.latex?%5Cfloor%7B%5Csqrt%20n%7D"> 种取值，而 <img src="https://latex.codecogs.com/png.latex?i%20%5Cgeq%20%5Csqrt%20n"> 时，<img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20%5Cfloor%7B%5Cfrac%20n%20i%7D%20%5Cleq%20%5Csqrt%20n"> 表明其也最多只有 <img src="https://latex.codecogs.com/png.latex?%5Cfloor%7B%5Csqrt%20n%7D"> 种取值. 因此整除分块的时间复杂度 <img src="https://latex.codecogs.com/png.latex?%0AT_1(n)%20=%20%5C#%20%5Cleft%5C%7B%20%5Cfloor%7B%5Cfrac%20n%20i%7D%20%5Cright%5C%7D_%7Bi=1%7D%5En%20%5Cleq%202%20%5Csqrt%20n%20%5Cin%20O(%5Csqrt%20n)%0A"></p>
<p>方便起见，后文记 <img src="https://latex.codecogs.com/png.latex?D(n)%20=%20%5Cleft%5C%7B%20%5Cfloor%7B%5Cfrac%20n%20i%7D%20%5Cright%5C%7D_%7Bi=1%7D%5En">.</p>
<section id="整除分块嵌套" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="整除分块嵌套"><span class="header-section-number">2.1</span> 整除分块嵌套</h3>
<p>将 Proposition&nbsp;2 加强，我们有如下通用放缩：</p>
<div id="prp-trick2ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 3 </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cmid%20n%7D%20f(d)%20%5Cleq%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20f(i)%20+%20f(%5Cfloor%7B%5Cfrac%20n%20i%7D)%0A"></p>
</div>
<p>LHS 成立的关键在于 <img src="https://latex.codecogs.com/png.latex?%5C%7Bd:%20d%20%5Cmid%20n%5C%7D%20%5Csubset%20D(n)">；而 RHS 的本质就是上述对整除分块块数量上界的估计.</p>
<p>注意到 Proposition&nbsp;2 是 Example&nbsp;5 证明的核心，而 Proposition&nbsp;3 是 Proposition&nbsp;2 的加强版，故仿造 Example&nbsp;5 的证明，我们有</p>
<div id="exm-divissigma" class="theorem example">
<p><span class="theorem-title"><strong>Example 6 </strong></span>令 <img src="https://latex.codecogs.com/png.latex?%0AS_z(n)%20=%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20d%5Ez%0A"> 则前述 Example&nbsp;5 中 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"> 的上界与渐进上界也同样适用于 <img src="https://latex.codecogs.com/png.latex?S_z(n)">.</p>
</div>
<p>现在可以对嵌套整除分块 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20f(i)%20%5Csum_%7Bj=1%7D%5E%7B%5Cfloor%7B%5Cfrac%20n%20i%7D%7D%20g(j)%20h(%5Cfloor%7B%5Cfrac%20n%20%7Bij%7D%7D)%0A"> 的时间复杂度 <img src="https://latex.codecogs.com/png.latex?T_2"> 做出估计了. 对 Example&nbsp;6 取 <img src="https://latex.codecogs.com/png.latex?z=%5Cfrac%201%202">，立刻有 <img src="https://latex.codecogs.com/png.latex?%0AT_2(n)%20=%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20T_1(d)%20%5Cleq%202%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20%5Csqrt%20d%20=%202%20S_%7B%5Cfrac%201%202%7D(n)%20%5Cleq%204%20%5Csqrt%20n%20P_%7B%5Cfrac%201%202%7D(%5Csqrt%20n)%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)%0A"></p>
<p>我们还可以进一步归纳. 假定 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20m%20%5Cgeq%200,%20%5Cquad%20%5Cexists%20z_m%20:%200%20%5Cleq%20z_m%20%3C%201,%20%5Cquad%20T_m(n)%20=%20O(n%5E%7Bz_m%7D)">，我们有</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT_%7Bm+1%7D(n)%20=%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20T_m(d)%20%5Cleq%20C%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20n%5E%7Bz_m%7D%20=%20C%20S_%7Bz_m%7D(n)%20%5Cin%20O(n%5E%7B%5Cfrac%20%7B1+z_m%7D%202%7D)%0A"></p>
<p>因此 <img src="https://latex.codecogs.com/png.latex?z_%7Bm+1%7D%20=%20%5Cfrac%20%7B1+z_m%7D%202">. 边界条件 <img src="https://latex.codecogs.com/png.latex?z_0%20=%200">，数列递推求得 <img src="https://latex.codecogs.com/png.latex?z_m%20=%201-2%5E%7B-m%7D">，检验满足条件. 因此 <img src="https://latex.codecogs.com/png.latex?m"> 重嵌套整除分块的时间复杂度 <img src="https://latex.codecogs.com/png.latex?%0AT_m(n)%20%5Cin%20O(n%5E%7B1-%202%5E%7B-m%7D%7D)%0A"></p>
</section>
</section>
<section id="杜教筛" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="杜教筛"><span class="header-section-number">3</span> 杜教筛</h2>
<p>杜教筛可以以低于线性的时间复杂度求解某些数论函数的前缀和. 其思路并不复杂. 设 <img src="https://latex.codecogs.com/png.latex?f"> 为一数论函数，我们希望快速求得其前缀和 <img src="https://latex.codecogs.com/png.latex?%5Chat%20f%20(n)%20=%20%5Csum_%7Bi=1%7D%5En%20f(i)">. 考虑数论函数 <img src="https://latex.codecogs.com/png.latex?g"> 和 <img src="https://latex.codecogs.com/png.latex?h%20=%20g%20*%20f">， <img src="https://latex.codecogs.com/png.latex?%0Ah(n)%20=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20g(d)%20f(%5Cfrac%20n%20d)%0A"> 两端做前缀和得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Chat%20h%20(n)%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20h(i)%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bd%20%5Cmid%20i%7D%20g(d)%20f(%5Cfrac%20i%20d)%20%5C%5C%0A&amp;=%20%5Csum_%7Bd=1%7D%5En%20g(d)%20%5Csum_%7Bi=1%7D%5E%7B%5Cfloor%7B%5Cfrac%20n%20d%7D%7D%20f(i)%20%5C%5C%0A&amp;=%20%5Csum_%7Bd=1%7D%5En%20g(d)%20%5Chat%20f%20(%5Cfloor%7B%5Cfrac%20n%20d%7D)%20%5C%5C%0A&amp;=%20g(1)%20%5Chat%20f%20(n)%20+%20%5Csum_%7Bd=2%7D%5En%20g(d)%20%5Chat%20f%20(%5Cfloor%7B%5Cfrac%20n%20d%7D)%0A%5Cend%7Baligned%7D%0A"> 因此 <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20f%20(n)%20=%20%5Cfrac%201%20%7Bg(1)%7D%20%5Cleft(%20%5Chat%20h%20(n)%20-%20%5Csum_%7Bd=2%7D%5En%20g(d)%20%5Chat%20f%20(%5Cfloor%7B%5Cfrac%20n%20d%7D)%20%5Cright)%0A"></p>
<p>故若 <img src="https://latex.codecogs.com/png.latex?g">、<img src="https://latex.codecogs.com/png.latex?h"> 的前缀和可 <img src="https://latex.codecogs.com/png.latex?O(1)"> 算得，根据上式整除分块即可递归地计算出 <img src="https://latex.codecogs.com/png.latex?f"> 的前缀和.</p>
<p>下面分析算法的复杂度. 注意到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfloor%7B%5Cfrac%7B%5Cfloor%7B%5Cfrac%20n%20i%7D%7D%7Bj%7D%7D%20=%20%5Cfloor%7B%5Cfrac%7Bn%7D%7Bij%7D%7D%0A"> 故单轮递归涉及到的自变量均可表示为 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cfloor%7B%5Cfrac%20n%20i%7D"> 的形式. 一个 <img src="https://latex.codecogs.com/png.latex?%5Chat%20f%20(d)"> 做整除分块耗时 <img src="https://latex.codecogs.com/png.latex?T_1(d)">，若采用记忆化递归，由上节分析，算法总时间复杂度为 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cin%20D(n)%7D%20T_1(d)%20=%20T_2(n)%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)%0A"></p>
<p>但我们还可以做得更好——考虑先用 <img src="https://latex.codecogs.com/png.latex?O(K)"> 的时间复杂度线性筛出前 <img src="https://latex.codecogs.com/png.latex?K"> 个 <img src="https://latex.codecogs.com/png.latex?f(n)"> 并求前缀和，则递归求解时，<img src="https://latex.codecogs.com/png.latex?d%20%5Cleq%20K"> 的 <img src="https://latex.codecogs.com/png.latex?%5Chat%20f(d)"> 就无需再向下递归了. 为分析此类时间复杂度，对 Proposition&nbsp;3 做最后一点扩展：</p>
<div id="prp-trick3ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 4 </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cmid%20n%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cin%20D(n)%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7BK%20%3C%20i%20%5Cleq%20%5Csqrt%20n%7D%20f(i)%20+%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cmin%7B%5C%7B%20%5Cfloor%7B%5Cfrac%20n%20K%7D,%5Csqrt%20n%20%5C%7D%20%7D%7D%20f(%5Cfloor%7B%5Cfrac%20n%20i%7D)%0A"></p>
<p>特别的，当 <img src="https://latex.codecogs.com/png.latex?K%20%3E%20%5Csqrt%20n"> 时，有</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cmid%20n%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cin%20D(n)%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cfloor%7B%5Cfrac%20n%20K%7D%7D%20f(%5Cfloor%7B%5Cfrac%20n%20i%7D)%0A"></p>
</div>
<p>故用 Proposition&nbsp;4 ，当 <img src="https://latex.codecogs.com/png.latex?K%20%3E%20%5Csqrt%20n"> 时，算法在递归部分的时间复杂度降低为</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cin%20D(n)%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20T_1(d)%0A&amp;=%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cfloor%7B%5Cfrac%20n%20K%7D%7D%20T_1(%5Cfloor%7B%5Cfrac%20n%20i%7D)%20%5C%5C%0A&amp;%5Cleq%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cfloor%7B%5Cfrac%20n%20K%7D%7D%20C%20%5Csqrt%7B%5Cfrac%20n%20i%7D%20%5C%5C%0A&amp;=%20C%20%5Csqrt%20n%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cfloor%7B%5Cfrac%20n%20K%7D%7D%20i%5E%7B-%5Cfrac%201%202%7D%20%5C%5C%0A&amp;=%20%20C%20%5Csqrt%20n%20P_%7B%5Cfrac%201%202%7D%5Cleft(%5Cfloor%7B%5Cfrac%20n%20K%7D%5Cright)%20%5C%5C%0A&amp;%5Cin%20%5Csqrt%20n%20O%5Cleft(%20%5Cleft(%5Cfrac%20n%20K%5Cright)%5E%7B%5Cfrac%201%202%7D%20%5Cright)%20%5C%5C%0A&amp;%5Csubset%20O(n%20K%5E%7B-%5Cfrac%201%202%7D)%0A%5Cend%7Baligned%7D%0A"></p>
<p>总时间复杂度为 <img src="https://latex.codecogs.com/png.latex?%0AO(K)%20+%20O(n%20K%5E%7B-%5Cfrac%201%202%7D)%0A"></p>
<p>为最小化时间复杂度，取 <img src="https://latex.codecogs.com/png.latex?K%20=%20n%5E%7B%5Cfrac%202%203%7D">，得到最优时间复杂度 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B%5Cfrac%202%203%7D)">.</p>
<p>这部分的时间复杂度证明主要参考了文章<span class="citation" data-cites="zhihu_dusieve"><sup>[11]</sup></span>.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-line-spacing="2">
<div id="ref-wikipedia_abuse" class="csl-entry">
1. <em>Abuse of notation - wikipedia</em>. (n.d.). <a href="https://en.wikipedia.org/wiki/Abuse_of_notation#Function_notation" class="uri">https://en.wikipedia.org/wiki/Abuse_of_notation#Function_notation</a>.
</div>
<div id="ref-concretemath_onotation" class="csl-entry">
2. Graham, R. L., Knuth, D. E., &amp; Patashnik, O. (1994). <em>Concrete mathematics: A foundation for computer science</em> (second, pp. 443–449). Addison-Wesley.
</div>
<div id="ref-asymptotic_wikipedia" class="csl-entry">
3. <em>Big o notation - wikipedia # family of bachmann–landau notations</em>. (n.d.). <a href="https://en.wikipedia.org/wiki/Big_O_notation#Family_of_Bachmann%E2%80%93Landau_notations" class="uri">https://en.wikipedia.org/wiki/Big_O_notation#Family_of_Bachmann%E2%80%93Landau_notations</a>.
</div>
<div id="ref-asymptotic_oiwiki" class="csl-entry">
4. <em>复杂度 - OI wiki</em>. (n.d.). <a href="https://oi-wiki.org/basic/complexity/#%E6%B8%90%E8%BF%9B%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%AE%9A%E4%B9%89" class="uri">https://oi-wiki.org/basic/complexity/#%E6%B8%90%E8%BF%9B%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%AE%9A%E4%B9%89</a>.
</div>
<div id="ref-knuth_omicron" class="csl-entry">
5. Knuth, D. E. (1976). Big omicron and big omega and big theta. <em>SIGACT News</em>, <em>8</em>(2), 18–24. <a href="https://doi.org/10.1145/1008328.1008329">https://doi.org/10.1145/1008328.1008329</a>
</div>
<div id="ref-concretemath_calculus" class="csl-entry">
6. Graham, R. L., Knuth, D. E., &amp; Patashnik, O. (1994). <em>Concrete mathematics: A foundation for computer science</em> (second, pp. 47–56). Addison-Wesley.
</div>
<div id="ref-wikipedia_divisor" class="csl-entry">
7. <em>Divisor function - wikipedia # growth_rate</em>. (n.d.). <a href="https://en.wikipedia.org/wiki/Divisor_function#Growth_rate" class="uri">https://en.wikipedia.org/wiki/Divisor_function#Growth_rate</a>.
</div>
<div id="ref-gcdconv" class="csl-entry">
8. sun123zxy. (2020). <em>sun123zxy’s blog - 原创OI题目 GCD卷积 problem and solution</em>. <a href="https://blog.sun123zxy.top/posts/20201206-gcdconv/" class="uri">https://blog.sun123zxy.top/posts/20201206-gcdconv/</a>.
</div>
<div id="ref-polya_luogu" class="csl-entry">
9. <em>P4980 【模板】pólya 定理 - 洛谷 | 计算机科学教育新生态</em>. (n.d.). <a href="https://www.luogu.com.cn/problem/P4980" class="uri">https://www.luogu.com.cn/problem/P4980</a>.
</div>
<div id="ref-polya_my" class="csl-entry">
10. sun123zxy. (2020). <em>sun123zxy’s blog - 等价类计数：Burnside引理 &amp; Polya定理</em>. <a href="http://blog.sun123zxy.top/posts/20200321-burnside/#s-4.3" class="uri">http://blog.sun123zxy.top/posts/20200321-burnside/#s-4.3</a>.
</div>
<div id="ref-zhihu_dusieve" class="csl-entry">
11. Ander. (2022). <em>杜教筛</em>. <a href="https://zhuanlan.zhihu.com/p/521699400" class="uri">https://zhuanlan.zhihu.com/p/521699400</a>.
</div>
</div></section></div> ]]></description>
  <category>OI</category>
  <category>数学</category>
  <guid>https://blog.sun123zxy.top/posts/20230418-complexity/index.html</guid>
  <pubDate>Mon, 17 Apr 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>国家博物馆兼东单良乡骑行一日游</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230306-national-museum-tour/index.html</link>
  <description><![CDATA[ 



<p>“来北京，当然要逛逛啊！”嘴上这么说，充实的学习生活却总能带来无数个宅在宿舍的理由。恰逢本学期思政课需亿点社会实践，国家博物馆乃官方推荐之所，而东可游长安街、王府井，南可观东交民巷，完成任务而了却游园之心，岂不美哉？虽开学未几，春景未至，然天气渐暖，今日不去，更待何时？不妨早做打算。遂与室友相约，周日出游。</p>
<p>乘地铁至天安门东，一路罚站。当然毕竟是淡季，车上并不拥挤。惊奇地发现一号线已非昔日模样：站台已加装护栏，而列车的内饰也早已翻新。</p>
<p>例行排队安检，上至天安门广场东侧。国家博物馆就在眼前，隔天安门广场与人民大会堂遥相呼应。馆子很大，上上下下一共六层，尚分南北两区，一整天或许也很难逛完，故我们只选取少量展馆参观。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/col-museum-outside.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">博物馆外侧</figcaption>
</figure>
</div>
<p>展览当然是相当不错的，但具体说来却没啥好写。博物馆这种地方，始终还是得自己去看。常设的《复兴之路》展区是标准的《中国近现代史纲要》，最近也新开了新时代展区，但我们去的时候……空无一人……（逃）</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/museum-exhibits.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">神州十三号返回舱（左）；复兴之路“新时代”展厅（右）</figcaption>
</figure>
</div>
<p>总之，逛逛逛拍拍拍，出来已经一点半了。讨论一下，准备往东单走找地儿吃饭。走在东长安街的人行道上，公安部、生态环境部、<del>长安俱乐部</del>滚滚而来，赫赫有名的北京饭店也映入眼帘。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/beijing-hotel.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">挺敦实一栋楼</figcaption>
</figure>
</div>
<p>王府井的人气似乎已经恢复了八成。我们并无兴致逛街，草草填饱肚子，往南向东交民巷前进。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/wangfujing.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">王府井步行街</figcaption>
</figure>
</div>
<p>比起嘈杂的天安门广场，东交民巷可谓意外的宁静。从东侧进入东交民巷，街上行人三三两两，似乎都是本地居民。往东前进，法国邮政局、西班牙领事馆等欧式建筑在街边排列，但均未开放游览，亦无游客驻足。灰黑色的砖瓦在紧闭的大门后默默不语，枯树残影的映衬下略显凄凉。教堂倒是小有人气，时有新人在此拍摄婚纱。行至天安门广场前最后一个路口，有警卫把守，似乎已不得入内。查看地图，前面已是公安局地界。也许得从天安门广场方向步行进入才可进一步游览吧。（事后调查，不少使馆的入口其实在前门大街一侧，许多建筑也已商业运行，除外观保持原样外，已无太多历史可寻。）</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/church.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">东交民巷的教堂</figcaption>
</figure>
</div>
<p>室友突然提议骑回良乡——英雄所见略同啊（笑）。从学校骑至主城一直是我的计划之一，现在离天黑尚有三四小时光景，晚 7:00 之前骑回学校并无不可。已有一室友因事先行离开，另一位室友苦于舟车劳顿，计划地铁回程。于是和提议的室友开启了近 40km 的骑行之旅。</p>
<p>已在东交民巷南边，我们没有选择卢沟桥路线，而是往京良路方向前进。二环可不小，出了前门公园，在狭窄的胡同间穿行，不一会就有点小累了。室友事后表示他没意识到 40km 的严重性（</p>
<p>渐行至三、四环外。偶然拐离干道，驶入普通道路。路上房屋低矮，矮墙垛垛，货车辆辆，尘土飞扬，加之今日有霾，揉眼一看，好似来到某西部偏远地区的乡间小路上。偌大的北京城也有如此“土里土气”的地方……之前在房山线上看到的壮美秋景，似乎也不在本次路线之上。况且春天尚未到来，即使经过也别无二致吧。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/col-riding.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">胡同、“乡道”与分界处</figcaption>
</figure>
</div>
<p>至京良路。室友体力已下降不少，速度逐渐放缓。然而调高座椅、换用前脚掌蹬车的我似乎还能一战。<del>室友表示你个山区居民怎么这么能蹬，</del>虽然中途因未知原因迷路多绕出几公里的路程，最终还是在 7:00 之前赶回了学校。</p>
<p>买了面包和咖啡匆匆赶去参加组会，坐下的瞬间，突然感觉如断电般困倦……</p>



 ]]></description>
  <category>游记</category>
  <guid>https://blog.sun123zxy.top/posts/20230306-national-museum-tour/index.html</guid>
  <pubDate>Sun, 05 Mar 2023 16:00:00 GMT</pubDate>
  <media:content url="https://blog.sun123zxy.top/posts/20230306-national-museum-tour/img/wangfujing.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>聊聊红石音乐</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230217-rmg/index.html</link>
  <description><![CDATA[ 



<p>咕极必肝，肝极必咕。</p>
<p>本来是打算做完 Ancient Temple 和视频一起发出的，但现在看到这篇文章，说明下文随想里立下的 flag 已经被打脸了（</p>
<p>咕的原因，一方面是因为现实生活太过充实有趣，即使红乐般的激昂也有黯淡之时；但更重要的，还是对第二次迭代的表现效果不满意。模子是 Foxtail Grass Studio 的专辑封面和《妖妖剑戟梦想》的白玉楼阶梯，但始终没能做出想要的效果。更好的想法？暂时也没有。</p>
<p>半途而废很可惜，但糟蹋更可惜。或许暂时搁置、静待花开，会有更好的结果。</p>
<p>写下随想与技术细节，封存于冷清的博客，是纪念，还是重启的依托？</p>
<blockquote class="blockquote">
<p>东方的天空微微露出青白色的天光，幻想乡迎来了又一个清晨。</p>
<p>很快，太阳就会出现，将光芒洒满这片遗忘之地。</p>
<p>尽管，那片原野已然如幻梦般消失不见——</p>
<p>但，在看不见的隐秘角落，无数的原野正在悄然生长——</p>
<p>这里也是，那里也是</p>
<p>——如同小小的光芒。</p>
<p>——<a href="https://www.bilibili.com/read/cv11907285">东方莳梦原～Champaign of Unfinished Dreams</a> by 秋ノ宮飛鳥</p>
</blockquote>
<section id="一点随想" class="level2">
<h2 class="anchored" data-anchor-id="一点随想">一点随想</h2>
<p>2022 年 8 月 17 日夜，Ancient Temple 完成过半，月色入户，欣然开摆。</p>
<p>对，今天又是 8 月 17 日，是妖妖梦、风神录的发售日，<del>也是某个枪毙节</del>，还是某个新博客启用的周年纪念日——我又来写随想了。</p>
<p>18 年华灯宴 1U_s 大佬一曲<a href="https://b23.tv/FwrlLWL">十七岁</a>把我拉入红石音乐的大坑，到现在也有 4 年多了。随便聊聊感想，谈谈技术和非技术的各种话题。</p>
<p>我玩红乐，或许“科技靠考古的自闭造轮手”是个不错的形容。不加红石群、不更新版本，没人带没人陪，Google + Minecraft Wiki 在手，自己瞎倒腾，其他看造化。风格是 18 年的远古遗风——realpiano + 命令方块 + WorldEdit 的前进式、贪吃蛇式、下落式红石音乐大行其道的年头。到后来，特效红石音乐开始流行，但我心中的红乐早已定型。</p>
<p>我喜欢那个年代红石音乐特有的那种风格，那种朴素，但红石音乐完美融入场景的感觉。当年东方各作红石音乐全曲中就可见一斑——跟随红石信号一步步向前，如同听着 BGM 驾驶自机飞翔于道中，看版面缓缓向前伸展——STG 原作与 Minecraft 的奇妙融合让我着迷。我想做这样的红石音乐，我想做这样能化出心中幻想的红石音乐。</p>
<p>想做？音乐你懂吗？建筑你会吗？</p>
<p>不会，但可以学！</p>
<p>那你还会什么？</p>
<p>我是 OIer！我会编程！</p>
<p>这就是后来近三年红乐自动化尝试的开端。倒也开始稍微认真点的学习 MIDI、乐理以及其他各种各样的东西。</p>
<p>时间来到 20 年暑假。当时正好在玩 Python，偶然一搜，找到了 Raspberry Jam Mod 和 <a href="https://github.com/mido/mido">mido</a>——前者把 <a href="https://www.minecraft.net/en-us/edition/pi" class="uri">https://www.minecraft.net/en-us/edition/pi</a> 的 Python API 移植到 Java 版，后者提供在 Python 中处理 MIDI 文件的方法。</p>
<p>诶，这就不可以开工了吗！</p>
<p>肝能量发动，写了第一个能跑起来的脚本，随便丢了个正在做的第三版 Ancient Temple 进去听听——哎哟挺不错啊！</p>
<p>生产力工具上线，整活得以开始。要说最想做的，那一定是妖妖梦五面道中。对，就是 《东方妖妖梦 ~ Ancient Temple》。如 ZUN 所说，那是使古老寺院的空气突然升温的曲子。樱花上飘，楼观斩下……那是原作带来的难以忘怀的幻想。</p>
<p>但当时的我，没打算做，或者说有点不敢做。一方面，当然是 1U_s 大大的<a href="https://www.bilibili.com/video/BV1Gs411i7K9">妖妖梦红乐曲集</a>实在精彩，随手制作的五面道中已足以满足我自娱自乐的需求；二来也是对自己实力不太自信，怕做出自己也不太喜欢的作品。但 1U 的曲集毕竟是手工打造，两条音轨虽然意境极佳，但与原曲相比确也是捉襟见肘，而我手中的自动化可以极大程度地减轻工作量（虽然造轮子的过程没少花时间 (lll￢ω￢)）</p>
<p>所以到头来还是想做——或者下次一定？</p>
<p>那这次造啥呢？</p>
<p>余光瞄到刚退坑不久的 Dancing Line——说是舞线，其实脑子里全是 Through the Fog 的场景。回去重打 TTF 风暴的时候，听着 90% 后疯狂的雷声，突然想到 Minecraft 可以 <code>/weather rain</code> 可以 <code>/summon lightning_bolt</code>，加之场景想要偷懒的话搞个单层水世界就行，倒是试水的不错选择。</p>
<p>于是就开始试着扒谱。暑假结束，MIDI 是写好了，人却咕起来了。一咕就咕到了后一年的四月，忍不住了，爆肝三个周末整出来了。这个明显还是有很多问题的，首先曲子扒得就不太好，而且灯光一直到最后一小段才加上，另外前面下雨那段也太黑了。Sildur’s Vibrant Shader 的黑雷电问题也没解决，加上当时电脑太菜，Replaymod 录制还是挺难受的（不过预览模式倒是意外的贡献了个封面 XD），当然凑合能看。</p>
<p>后来就又到暑假了，打算一口气把 RMG 这个烂摊子写好，于是大刀阔斧的重构了，命名为 <a href="https://github.com/sun123zxy/redstone-music-generator">redstone-music-generator</a>，甚至还写了文档发了 Github，收获人生首 star &amp; issue（</p>
<p>或许是为了尝试 observer 的设计模式，亦或是太重视轮子的易用性，代码比较臃肿，过了几个月发现自己也很难看懂了。</p>
<p>其实写脚本主要还是给自己创作使用啊，没必要考虑太多“别人的需求”。</p>
<p>反思的结果就是新版的 redstone-music-generator 了，现暂存于原版本的 <code>develop</code> 分支下。这个版本再次重构，学习了某些命令行软件的做法，配置参数从之前在各个组件上的零散分布变为了单一配置文件的集中分布，显然提高了效率。</p>
<p>Ancient Temple 的 MIDI 也已经做到第五版了，这次以红乐的标准，大幅参考原曲 MIDI，期望能尽力还原出原作的表现。</p>
<p>鼓起勇气脱离咕海的动力来源，还是喜欢这曲子吧。说到底还是想把它做了再养老。</p>
<p>说起来，红石音乐到底应该怎样定义呢？之前 WorldEdit 的使用就已经引发过争议，那自动化搭建到底是红是黑？而在发声方面，是坚持音符盒的原教旨主义，还是命令方块的改良革新，甚至是更激进的 Midiout？</p>
<blockquote class="blockquote">
<p>up辛苦了，工作量能看出来。</p>
<p>但是原谅我还是很难接受这种从mc映射到外部midi播放器的格式。我觉得这并不能称作红石音乐，因为不是在mc内部完成播放的。</p>
<p>不过，用资源包和用接口，也不过只是内部调用和外部调用的区别罢了，也说不清…这是个哲学层次的问题。</p>
<p>红石音乐最后到底会变成什么样我也不知道，而且这种发展的方向和趋势我也没办法也没有理由去阻止。</p>
<p>我大概是，跟不上时代了吧…</p>
<p>——<a href="https://www.bilibili.com/video/BV1oW411a7eJ">【黑石音乐】aLIEz【接近完美的还原】_哔哩哔哩_bilibili</a> 下 <a href="https://space.bilibili.com/32262433">NJune六月</a> 的评论</p>
</blockquote>
<p>或许每个人心中的红乐标准都有所不同……或许我们只能求同存异，力求百花齐放，不要走火入魔。但最近粒子特效红石音乐的发展又让我感到困惑——一点红石、音符盒甚至命令方块都不出现，真的算红乐吗？那些炫酷的粒子特效，真的属于 Minecraft 吗？</p>
<p>只能交给时间回答了。我想，我能保证的，只是一颗全心投入、宁缺毋滥的创作心态；而我应该做的，是继续完成手头的作品。</p>
</section>
<section id="mc-指令相关" class="level2">
<h2 class="anchored" data-anchor-id="mc-指令相关">MC 指令相关</h2>
<section id="setblock-datavalue-block-state-and-data-tag-nbt" class="level3">
<h3 class="anchored" data-anchor-id="setblock-datavalue-block-state-and-data-tag-nbt">setblock, dataValue, block state and data tag (nbt)</h3>
<section id="扁平化前1.12-及以前" class="level4">
<h4 class="anchored" data-anchor-id="扁平化前1.12-及以前">扁平化前（1.12 及以前）</h4>
<p><code>setblock &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;block&gt; [dataValue|state] [oldBlockHandling] [dataTag]</code></p>
<p><code>dataValue</code> 和 <code>blockstate</code> 在扁平化之前是方块状态的两种不同描述方式，<code>dataValue</code> 是实际存储时使用的 4 bit 数据。通常，<code>blockstate</code> 或 <code>dataValue</code> 用来描述方块的一些基本性质，比如朝向 <code>facing</code>、羊毛的颜色 <code>color</code>、中继器的延迟刻数 <code>delay</code>。</p>
<p>具体写法例如：<code>/setblock ~ ~ ~1 minecraft:unpowered_repeater delay=4,facing=east</code> 设置一个延迟为 4 rt，面朝“东方”的红石中继器。（这里打上了引号，因为事实上<strong>红石中继器的 facing 代表的方向与信号传导的方向是相反的</strong>）</p>
<p>又，其效果等同于 <code>/setblock ~ ~ ~1 minecraft:unpowered_repeater 15</code>。（<code>dataValue = (delay - 1) * 4 + facing</code>，<code>facing=south|west|north|east</code> 分别对应 <code>0|1|2|3</code> 。默认值是 <code>north</code>）</p>
<p>再例如，<code>/setblock ~ ~ ~1 minecraft:command_block facing=down 0 {Command:"/time set 6000"}</code> 设置一个修改时间为正午的，面朝下方的命令方块。</p>
<p>中间的 <code>0</code> 是用来占位的。</p>
<p>查找某方块的 <code>dataValue</code> 和 <code>blockstate</code> 时可以翻阅 Minecraft Wiki 1.13 以前的历史版本（1.13 于 2018 年 6 月 18 日发布）</p>
</section>
<section id="扁平化后1.13-及以后" class="level4">
<h4 class="anchored" data-anchor-id="扁平化后1.13-及以后">扁平化后（1.13 及以后）</h4>
<p><code>setblock &lt;pos&gt; &lt;block&gt; [destroy|keep|replace]</code></p>
<p>其中 <code>&lt;block&gt;</code> 是 <code>block_state</code>， 具体的写法是 <code>namespaced_ID[block_states=value]{data_tags:value}</code></p>
<p>也就是说，原先的 <code>block</code>、<code>block_state</code> 和 <code>dataTag</code> 现在被统一整合入 <code>block_state</code> 里面，显然这更方便使用了。（然而作为考古学家，这好像也没法用上…）</p>
</section>
</section>
<section id="fallingsand-or-falling_block" class="level3">
<h3 class="anchored" data-anchor-id="fallingsand-or-falling_block">FallingSand or falling_block</h3>
<p>掉落方块实体。1.11 前它叫 <code>FallingSand</code>，1.11 及以后它叫 <code>falling_block</code>。</p>
<p>1.12 及以前可用 <code>/summon falling_block ~ ~ ~ {Block:minecraft:redstone_block,Time: 1}</code> 召唤掉落的红石块。Time 参数设置最长掉落时间，实际上会与 30 秒取最大值，但如果留空则会马上消失。</p>
<p>而 <code>/summon falling_block ~ ~ ~ {Block:"minecraft:wool", Data: 14, Time:1}</code> 可召唤掉落的红色羊毛。<code>Data</code> 标签自然与颜色对应了。</p>
<p>1.13 后由于扁平化更新了 <code>block_state</code> 的概念，指令格式变为 <code>/summon falling_block &lt;x&gt; &lt;y&gt; &lt;z&gt; {BlockState:{Name:&lt;Namespaced block ID&gt;,Properties:{&lt;blockstate_name&gt;:&lt;value&gt;}}}</code>。</p>
<p>参见：</p>
<ul>
<li><p><a href="https://minecraft.fandom.com/wiki/Falling_Block">Falling Block – Minecraft Wiki</a></p></li>
<li><p><a href="https://minecraft.fandom.com/wiki/Tutorials/Falling_blocks">Tutorials/Falling blocks – Minecraft Wiki</a></p></li>
<li><p><a href="https://minecraft.fandom.com/wiki/Tutorials/Command_NBT_tags#Entities">Tutorials/Command NBT tags – Minecraft Wiki</a></p></li>
</ul>
</section>
<section id="解决指令引号嵌套无法识别问题" class="level3">
<h3 class="anchored" data-anchor-id="解决指令引号嵌套无法识别问题">解决指令引号嵌套无法识别问题</h3>
<p>见 <a href="https://gaming.stackexchange.com/questions/246064/why-are-my-quotation-marks-causing-an-unexpected-token-error-with-this-command">minecraft java edition - Why are my quotation marks causing an “unexpected token” error with this command? - Arqade</a>，用 <code>\</code> 转义即可。</p>
</section>
</section>
<section id="mod资源包" class="level2">
<h2 class="anchored" data-anchor-id="mod资源包">mod、资源包</h2>
<p>注意此处提到的 mod 和资源包均只在其 1.12.2 对应版本下测试，不少功能在新版已经不需要 mod 了。</p>
<section id="worldedit" class="level3">
<h3 class="anchored" data-anchor-id="worldedit">WorldEdit</h3>
<p>建筑党老相识了，不细讲了，Google 一下你就知道。</p>
<ul>
<li><a href="https://worldedit.enginehub.org/en/latest/">WorldEdit Documentation</a></li>
</ul>
<p>用的多的命令 <code>copy</code>、<code>flip</code>、<code>rotate</code>、<code>paste</code>、<code>stack</code>、<code>set</code>、<code>replace</code>。当然还有最要命的 <code>undo</code> 啦（</p>
<p><code>schematic</code> 系列指令也很好用（用来偷建筑）（逃）</p>
</section>
<section id="voxelmap" class="level3">
<h3 class="anchored" data-anchor-id="voxelmap">VoxelMap</h3>
<p>常见的小地图，用来传送挺方便的。也不细讲了。</p>
</section>
<section id="tickratechanger" class="level3">
<h3 class="anchored" data-anchor-id="tickratechanger">TickrateChanger</h3>
<p><a href="https://www.curseforge.com/minecraft/mc-mods/tickratechanger">TickrateChanger - Mods - Minecraft - CurseForge</a></p>
<p>tickrate changer，就是字面意思嘛。改 tickrate 可以使游戏变快或变慢，从而实现精确调节 BPM。正常值 20。</p>
<p>但是有个挺烦的问题是调了过后声音的频率也随之改变了，这样音高就发生变化了…有大佬知道怎么办吗？</p>
</section>
<section id="colored-redstone" class="level3">
<h3 class="anchored" data-anchor-id="colored-redstone">Colored Redstone</h3>
<p><a href="https://www.curseforge.com/minecraft/mc-mods/colored-redstone">Colored Redstone - Mods - Minecraft - CurseForge</a></p>
<p>材质包编辑红石颜色失败后的替代品。具体细节有点忘了，只记得生成时 namespace 好像是 <code>coloredredstone:colored_redstone_block</code>，用 datavalue 来调颜色。（也忘了自己是怎么知道的了……好像是拆 jar 看的？）</p>
<p>顺序大概是这样：</p>
<p><img src="https://blog.sun123zxy.top/posts/20230217-rmg/colorful-redstone.jpg" class="img-fluid"></p>
</section>
<section id="invisiblights" class="level3">
<h3 class="anchored" data-anchor-id="invisiblights">InvisibLights</h3>
<p><a href="https://www.curseforge.com/minecraft/mc-mods/invisiblights">InvisibLights - Mods - Minecraft - CurseForge</a></p>
<p>材质包编辑发光材质失败后的替代品。字面义，作为隐形光源使用。</p>
</section>
<section id="realpiano-资源包" class="level3">
<h3 class="anchored" data-anchor-id="realpiano-资源包">realpiano 资源包</h3>
<p><a href="http://lkrb.net/blog/54.html">原出处</a>已挂，有个<a href="https://www.cr173.com/soft/277354.html">下载站</a>还有资源。</p>
<p>发声命令 <code>/execute @p ~ ~ ~ playsound lkrb.piano.p60fff voice @p ~ ~ ~"</code>，<code>C5 = 60</code>，音高 21 至 108，力度可选 <code>ppp,pp,p,mp,mf,f,ff,fff</code>。</p>
</section>
<section id="soma-资源包" class="level3">
<h3 class="anchored" data-anchor-id="soma-资源包">soma 资源包</h3>
<p>这个老强了，按 MIDI 音源标准制作的全套音色，长短音都有。</p>
<p>因为没怎么用就不细讲了。</p>
</section>
<section id="材质包编辑" class="level3">
<h3 class="anchored" data-anchor-id="材质包编辑">材质包编辑</h3>
<p>一开始是因为 SEUS v11.0 太黑看不清红石块，想找个方法让红石块自发光 。找了半天没找到的现成的，只好现学现做。</p>
<p>关于如何获取作为参考的 Default 材质包，参考 <a href="https://www.reddit.com/r/Minecraft/comments/47sycp/where_can_i_find_the_default_texture_pack_to_edit/">Where can I find the default texture pack to edit? : Minecraft</a>，直接把 <code>1.12.2.jar</code> 解压后里面的 <code>assets</code> 文件夹提到资源包里就可以用了，意外的方便啊（</p>
<p>（其实 mod 的 jar 里面也有这个文件夹！）</p>
<p>参考 <a href="https://optifine.readthedocs.io/emissive_textures.html">Emissive Textures - OptiFine documentation</a>，只需在材质包放置 <code>/assets/minecraft/optifine/emissive.properties</code> 和 <code>/assets/minecraft/textures/blocks/redstone_block_e.png</code>，<code>emissive.properties</code> 里写上 <code>suffix.emissive=_e</code> 就可以了。</p>
<p>1.12 差不多也算是古董版本了，参考网上教程时还需注意版本差异。</p>
<p>于是兴高采烈的准备用到掉落式红石钢琴上，发现——欸？光呢？？？</p>
<p>于是发现了 <a href="https://github.com/sp614x/optifine/issues/1342">Emissive textures not working for certain entities and items · Issue #1342 · sp614x/optifine · GitHub</a>——woc，这不是 xwj 大佬吗？？？</p>
<p>所以人家 18 年就把这些东西玩透了……<del>只有红石音乐作者才能发现的 bug</del></p>
<p>这个 Issue 至今 open，一下不知道怎么办了…只能暂时搁置。后来使用上文提到的 Colored Redstone 和 invisiblights 解决问题。</p>
<p>此外，发现同一地点方块贴图始终一致，这说明随机种子由位置决定。但作为 Falling_block 生成时，全都只会用第一个贴图。</p>
</section>
</section>
<section id="mcpi-和-raspberryjammod-相关" class="level2">
<h2 class="anchored" data-anchor-id="mcpi-和-raspberryjammod-相关">MCPI 和 RaspberryJamMod 相关</h2>
<p>RaspberryJamMod：把 <a href="https://www.minecraft.net/en-us/edition/pi">Minecraft: Pi Edition</a> 的 Python API 移植到 Java 版的一款 mod。</p>
<ul>
<li>Github 库：<a href="https://github.com/arpruss/raspberryjammod">GitHub - arpruss/raspberryjammod: Raspberry Jam Mod - a Mod Forge Minecraft mod implementing most of Raspberry Juice/Pi API</a></li>
<li>官方指南：<a href="https://www.instructables.com/Python-coding-for-Minecraft/">Python Coding for Minecraft : 18 Steps (with Pictures) - Instructables</a></li>
<li>Minecraft: Pi Edition 的 API：<a href="https://www.stuffaboutcode.com/p/minecraft-api-reference.html">Minecraft: Pi Edition API</a></li>
</ul>
<section id="mcpi-block-类在-setblock-setblockwithnbt-中的使用" class="level3">
<h3 class="anchored" data-anchor-id="mcpi-block-类在-setblock-setblockwithnbt-中的使用">MCPI Block 类在 setBlock &amp; setBlockWithNBT 中的使用</h3>
<p><code>Block</code> 类被封装成了包含三个元素 <code>id:int</code>, <code>data:int</code>, <code>nbt:str</code> 的“数组”，在 <code>setBlock</code> 和 <code>setBlockWithNBT</code> 中直接使用 <code>Block</code> 类会被 <code>flatten()</code> 或 <code>floorFlatten()</code> 函数“拍扁”成分散的参数。一个 <code>Block</code> 对象只可能被拍扁成 <code>data, id</code> 或 <code>id, data, nbt</code>，取决于该对象是否设置了 <code>nbt</code> （用 <code>None</code> 判断）。</p>
<p>因此，需要自定义 <code>data</code> 时，不能使用 <code>block</code> 模块的预设方块。</p>
<p><code>Vec3</code> 类也可被拍扁。</p>
<p>例如：</p>
<ul>
<li><code>setBlock(Vec3(0,0,0), 137, 2)</code> 等同于 <code>mc.setBlock(Vec3(0,0,0), Block(137, 2))</code></li>
<li><code>setBlockWithNBT(Vec3(0,0,0), 137, 2, '{Command:"your command"}')</code> 等同于 <code>setBlockWithNBT(Vec3(0,0,0), Block(137, 2), '{Command:"your command"}')</code> 等同于 <code>setBlockWithNBT(Vec3(0,0,0), Block(137, 2, '{Command:"your command"}'))</code></li>
</ul>
<p>需要注意的是， <code>setBlock()</code> 不能接受 <code>nbt</code> 参数或带 <code>nbt</code> 的 <code>Block</code> 对象，否则会报错。而 <code>setBlockWithNBT()</code> 则有无 <code>nbt</code> 皆可。</p>
</section>
<section id="关于-mcpi-与游戏内的坐标差" class="level3">
<h3 class="anchored" data-anchor-id="关于-mcpi-与游戏内的坐标差">关于 MCPI 与游戏内的坐标差</h3>
<p>见 <a href="https://stackoverflow.com/questions/70747581/python-minecraft-coordinates-trouble">Python + Minecraft Coordinates Trouble - Stack Overflow</a>：</p>
<blockquote class="blockquote">
<p>getPos, getTilePos, setPos and setTilePos all appear to be relative to the player’s spawn point at least in a single player world. I am going through trying to teleport my character but the coordinates I end up on are not the world’s coordinates but a coordinate relative to where my character would spawn.</p>
</blockquote>
<blockquote class="blockquote">
<p>So, either fix an offset of 66 blocks into the y-axis values, or manually set the world spawn to <code>(0, 0, 0)</code> with <code>/setworldspawn</code>.</p>
</blockquote>
</section>
</section>
<section id="自制轮子" class="level2">
<h2 class="anchored" data-anchor-id="自制轮子">自制轮子</h2>
<section id="redstone-music-generator旧版" class="level3">
<h3 class="anchored" data-anchor-id="redstone-music-generator旧版">redstone-music-generator（旧版）</h3>
<p>（这是重构旧版前再次阅读代码后的小报告）</p>
<p>大概使用了 observer 的设计模式，写了类似 C# 中的 Event，Delegate 暂时还没有封装，稍微有点混乱。</p>
<p>自己写了一些工具类，然后弄了个 <code>MIDIHandler</code> 预处理 MIDI 文件。</p>
<p>整个生成在最上层由 <code>RMG</code> 类管，<code>RMG</code> 读取 <code>MIDIHandler</code> 的信息然后触发绑定在 <code>RMG</code> 上的各种 <code>onNote()</code>、<code>onBeat()</code> 函数（触发过程由封装的 <code>Event</code> 类实现）。通过设置 <code>RMG</code> 的成员变量可以设置例如要生成的音轨、起始终止拍等参数。</p>
<p>然后各种插件都丢在了 <code>observer.py</code> 里。这些插件接受各种需要的信息（当前音符编号、音高等），一些是用于生成 <code>Vec3</code> 或 <code>Block</code> 的 <code>XXXPosGen</code> 和 <code>XXXBlockGen</code>（还没有给他们写基类，主要是现在还没封装 Delegate），另一些是包含 <code>onNote()</code>、<code>onBeat()</code>，用来绑在 <code>RMG</code> 上的插件。（注意绑在 <code>RMG</code> 上的是函数而不是插件本身！）每个插件都有自己的参数，插件之间也可以相互嵌套（例如 <code>GroundedAdvancing</code> 里面就套了个 <code>SingleBlock</code>）。插件存在的目的是为各个输出函数 <code>onNote()</code>、<code>onBeat()</code> 统一设置参数。（这里是否可以再改的函数式编程一点？）</p>
<p>现在有一个问题就是 PosGen 和 BlockGen 分开了，有 Issue 提到想要自定义每个 Note 下放的 partBlock，像这样搞就很麻烦。</p>
<p>应该有一个把 PosGen 和 BlockGen 合起来的方案，最好是能独立表示多个方块及其位置信息的一个整体。</p>
</section>
<section id="redstone-music-generator新版" class="level3">
<h3 class="anchored" data-anchor-id="redstone-music-generator新版">redstone-music-generator（新版）</h3>
<p>TODO（咕咕咕）</p>
<p>temp: <code>/execute @p ~ ~ ~ playsound block.note.guitar voice @p ~ ~ ~</code></p>


</section>
</section>

 ]]></description>
  <category>回忆</category>
  <category>Minecraft</category>
  <category>音乐</category>
  <category>Python</category>
  <guid>https://blog.sun123zxy.top/posts/20230217-rmg/index.html</guid>
  <pubDate>Thu, 16 Feb 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>str 学数学 题解</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230213-strwithmath/index.html</link>
  <description><![CDATA[ 



<div id="exm-problem" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 (str 学数学) </strong></span>str 同学因为名字里含有一个 str，所以觉得字符串对于他来说太简单了，于是他开始了他的数学之旅。</p>
<p>在旅途中str遇到了刚抽到胡桃的 lyl，而 lyl 同学正沉浸在出货的喜悦之中，为了能收获双倍喜悦，他便询问 str，他选的区间内有多少个幸运数字，str觉得这个问题和字符串一样简单，于是把这个问题交给了你。</p>
<p>共有 <img src="https://latex.codecogs.com/png.latex?T"> 组询问，每次给出两个正整数 <img src="https://latex.codecogs.com/png.latex?L,R">，你需要判断有多少 <img src="https://latex.codecogs.com/png.latex?n">，<img src="https://latex.codecogs.com/png.latex?L%20%5Cleq%20n%20%5Cleq%20R"> 使得方程 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B4%7D%0A"> 成立。</p>
<p>请输出你得到的答案。</p>
<p>数据范围：<img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20T%20%5Cleq%2010000">，<img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20L%20%5Cleq%20R%20%5Cleq%2010%5E7"></p>
<p>样例输入：</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">4</span>
<span id="cb1-2">1 4</span>
<span id="cb1-3">2 8</span>
<span id="cb1-4">1 10</span>
<span id="cb1-5">1 100</span></code></pre></div>
<p>样例输出：</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">3</span>
<span id="cb2-2">3</span>
<span id="cb2-3">5</span>
<span id="cb2-4">26</span></code></pre></div>
<p>来源：2023 年寒假集训 B 组总结赛</p>
</div>
<p>考场上当然是打表找规律了，但非常愚钝地没看出来……</p>
<p>结论是，<img src="https://latex.codecogs.com/png.latex?n"> 是一个幸运数字，当且仅当 <img src="https://latex.codecogs.com/png.latex?n+1"> 是一个质数。下面提供两种证明方法。</p>
<section id="official-solution" class="level2">
<h2 class="anchored" data-anchor-id="official-solution">Official Solution</h2>
<p>出题人提供的非常有技巧性的解法。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B4%7D%0A"></p>
<p>考虑为 <img src="https://latex.codecogs.com/png.latex?%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Crfloor"> 配对，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20+%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bi(n-j+1)%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20&amp;=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B2%7D%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20+%20%5Cleft%20%5Clfloor%20i%20-%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20&amp;=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B2%7D%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20i%20-%20%5B%20n+1%20%5Cnmid%20ij%20%5D%20&amp;=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B2%7D%20%5C%5C%0A%5Cfrac%7Bn%5E2%20(n+1)%7D%7B2%7D%20-%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5B%20n+1%20%5Cnmid%20ij%20%5D%20&amp;=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B2%7D%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5B%20n+1%20%5Cnmid%20ij%20%5D%20&amp;=%20n%5E2%0A%5Cend%7Baligned%7D%0A"></p>
<p>即要求 <img src="https://latex.codecogs.com/png.latex?n+1%20%5Cnmid%20ij"> 对任意 <img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20i,j%20%5Cleq%20n"> 成立。因此根据质数定义，<img src="https://latex.codecogs.com/png.latex?n+1"> 就是且只能是质数了。</p>
</section>
<section id="alternative-solution" class="level2">
<h2 class="anchored" data-anchor-id="alternative-solution">Alternative Solution</h2>
<p>考场上推了一半的想法。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20=%20%5Cfrac%20%7Bn%5E2%20(n-1)%7D%7B4%7D%0A"></p>
<p>注意到 <img src="https://latex.codecogs.com/png.latex?a%20%5Cbmod%20b%20=%20a%20-%20b%20%5Clfloor%20%5Cfrac%20a%20b%20%5Crfloor">，考虑构造取模</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20(n+1)%20%5Cleft%20%5Clfloor%20%5Cfrac%20%7Bij%7D%20%7Bn+1%7D%20%5Cright%20%5Crfloor%20=%20%5Cfrac%20%7Bn%5E2%20(n-1)(n+1)%7D%7B4%7D%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20ij%20-%20ij%20%5Cbmod%20(n+1)%20=%20%5Cfrac%20%7Bn%5E2%20(n-1)(n+1)%7D%7B4%7D%20%5C%5C%0A%5Cleft(%20%5Cfrac%20%7Bn(n+1)%7D%7B2%7D%20%5Cright)%5E2%20-%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20ij%20%5Cbmod%20(n+1)%20=%20%5Cfrac%20%7Bn%5E2%20(n-1)(n+1)%7D%7B4%7D%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20ij%20%5Cbmod%20(n+1)%20=%20%5Cfrac%20%7Bn%5E2%20(n+1)%7D%20%7B2%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>考虑固定 <img src="https://latex.codecogs.com/png.latex?i">，研究 <img src="https://latex.codecogs.com/png.latex?j"> 变化下左式的情况。方便起见，我们将上式左侧 <img src="https://latex.codecogs.com/png.latex?j"> 的取值范围扩展至 <img src="https://latex.codecogs.com/png.latex?0"> 到 <img src="https://latex.codecogs.com/png.latex?n">： <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=0%7D%5En%20ij%20%5Cbmod%20(n+1)%20=%20%5Cfrac%20%7Bn%5E2%20(n+1)%7D%20%7B2%7D%0A"> 细心的读者或许已经发现，当 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(i,n+1)%20=%201"> 恒成立，即 <img src="https://latex.codecogs.com/png.latex?n+1"> 为质数时，<img src="https://latex.codecogs.com/png.latex?ij%20%5Cbmod%20(n+1)"> 将取遍 <img src="https://latex.codecogs.com/png.latex?0"> 到 <img src="https://latex.codecogs.com/png.latex?n">，此时左右两式相等。下面我们证明这是上式相等的充分必要条件。</p>
<p>仍从 <img src="https://latex.codecogs.com/png.latex?ij%20%5Cbmod%20(n+1)"> 的取值下手，我们研究如下以 <img src="https://latex.codecogs.com/png.latex?j"> 和 <img src="https://latex.codecogs.com/png.latex?t"> 为变量的不定方程的解 <img src="https://latex.codecogs.com/png.latex?%0Aij%20+%20(n+1)%20t%20=%20m%20%5Cpod%7B0%20%5Cleq%20m%20%3C%20n+1%7D%0A"> 由裴蜀定理（Bézout’s identity），方程有解的充分必要条件为 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(i,n+1)%20%5Cmid%20m">。不妨记 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cgcd(i,n+1)">，<img src="https://latex.codecogs.com/png.latex?m%20=%20k%20d">，方程变为 <img src="https://latex.codecogs.com/png.latex?%0Aij%20+%20(n+1)%20t%20=%20kd%20%5Cpod%7B0%20%5Cleq%20k%20%3C%20%5Cfrac%20%7Bn+1%7D%20d%7D%0A"> 写出该不定方程的通解 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%20%5C%7B%0A%5Cbegin%7Baligned%7D%0Aj%20&amp;=%20j_0%20+%20s%20%5Ccdot%20%5Cfrac%7Bn+1%7D%7Bd%7D%5C%5C%0At%20&amp;=%20t_0%20-%20s%20%5Ccdot%20%5Cfrac%7Bi%7D%7Bd%7D%0A%5Cend%7Baligned%7D%0A%5Cright%20.%20%5Cpod%7Bs%20%5Cin%20%5Cmathbb%20Z%7D%0A"> 不难发现，对 <img src="https://latex.codecogs.com/png.latex?0%20%5Cle%20k%20%3C%20%5Cfrac%20n%20d">，上述不定方程在 <img src="https://latex.codecogs.com/png.latex?0%20%5Cleq%20j%20%5Cleq%20n"> 的范围内总有 <img src="https://latex.codecogs.com/png.latex?d"> 个解，这意味着 <img src="https://latex.codecogs.com/png.latex?ij%20%5Cbmod%20(n+1)"> 将有 <img src="https://latex.codecogs.com/png.latex?d"> 次取到 <img src="https://latex.codecogs.com/png.latex?kd">。故我们有 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bj=1%7D%5En%20ij%20%5Cbmod%20(n+1)%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20d%20%5Csum_%7Bk=0%7D%5E%7B%5Cfrac%20%7Bn+1%7D%7Bd%7D%20-1%7D%20kd%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20d%5E2%20%5Csum_%7Bk=0%7D%5E%7B%5Cfrac%20%7Bn+1%7D%7Bd%7D%20-1%7D%20k%20%5C%5C%0A&amp;=%20%5Cfrac%201%202%20%5Csum_%7Bi=1%7D%5En%20d%5E2%20%5Cleft(%20%5Cfrac%20%7Bn+1%7D%20d%20-%201%20%5Cright)%20%5Cfrac%20%7Bn+1%7D%20d%20%5C%5C%0A&amp;=%20%5Cfrac%20%7Bn+1%7D%202%20%5Csum_%7Bi=1%7D%5En%20(n+1-d)%20=%20%5Cfrac%7Bn%5E2%20(n+1)%7D%7B2%7D%0A%5Cend%7Baligned%7D%0A"> 化简即得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bi=1%7D%5En%20(n+1-d)%20&amp;=%20n%5E2%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20d%20&amp;=%20n%20%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Cgcd(i,%20n+1)%20&amp;=%20n%0A%5Cend%7Baligned%7D%0A"> 显然上式等价于对任意 <img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20i%20%5Cleq%20n">，<img src="https://latex.codecogs.com/png.latex?%5Cgcd(i,%20n+1)%20=%201"> 恒成立。因此我们证明了 <img src="https://latex.codecogs.com/png.latex?n+1"> 是质数是原方程成立的充分必要条件。</p>


</section>

 ]]></description>
  <category>OI</category>
  <category>数学</category>
  <category>题解</category>
  <guid>https://blog.sun123zxy.top/posts/20230213-strwithmath/index.html</guid>
  <pubDate>Sun, 12 Feb 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>算法竞赛向 C++ Standard Library 使用速查</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230124-stl/index.html</link>
  <description><![CDATA[ 



<p>本文旨在对算法竞赛所需 C++ Standard Library 做一个全面而相对严谨的总结。</p>
<p>全文主要参考以下文档：</p>
<ul>
<li><a href="https://en.cppreference.com/w/cpp/container">Containers library - cppreference.com</a></li>
<li><a href="https://oi-wiki.org/lang/csl/">C++ 标准库简介 - OI Wiki</a></li>
</ul>
<p>如有能力，阅读原文可获得更深入的了解。</p>
<section id="stl-算法" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="stl-算法"><span class="header-section-number">1</span> STL 算法</h2>
<p>均在 <code>#include&lt;algorithm&gt;</code> 定义。</p>
<ul>
<li><p><code>std::sort(first,last,cmp)</code></p>
<p>排序为不降序列。</p>
<p>接受随机访问迭代器。可自定义比较函数。</p>
<p>平均时间复杂度 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">，C++11 后严格 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">。</p></li>
<li><p><code>std::stable_sort(first,last,cmp)</code></p>
<p>排序为不降序列，且保持相等元素的顺序。</p></li>
<li><p><code>std::lower_bound(first,last,val,cmp)</code></p>
<p>返回指向首个不小于 <code>val</code> 的元素的迭代器，如无，返回 <code>last</code>。</p>
<p>要求小于 <code>val</code> 的值和大于等于 <code>val</code> 的值分居区间两侧。</p>
<p>可自定义比较函数。若迭代器支持随机访问，对数时间复杂度，否则为线性。</p></li>
<li><p><code>std::upper_bound(first,last,val,cmp)</code></p>
<p>返回指向首个大于 <code>val</code> 的元素的迭代器，如无，返回 <code>last</code>。</p></li>
<li><p><code>std::unique(first,last,cmp)</code></p>
<p>保留区间中所有连续等值区间的首个元素组成新序列，返回处理后序列的尾迭代器。</p>
<p>接受前向迭代器，可自定义判断相等的函数。</p>
<p>线性时间复杂度。</p></li>
</ul>
</section>
<section id="基本或特殊容器" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="基本或特殊容器"><span class="header-section-number">2</span> 基本或特殊容器</h2>
<p>注：C++11 新引入的容器，大部分头文件名与容器名一致。</p>
<ul>
<li><code>pair</code> <code>#include&lt;utility&gt;</code> ：元素对。</li>
<li><code>tuple</code> (C++11) ：元组。</li>
<li><code>bitset</code> <code>#include&lt;bitset&gt;</code> ：定长压缩 01 串，可在 <img src="https://latex.codecogs.com/png.latex?O(%5Cfrac%20N%20K)"> 的时空复杂度内完成常见运算，<img src="https://latex.codecogs.com/png.latex?K"> 对应操作系统位数。</li>
<li><code>string</code> <code>#include&lt;string&gt;</code> ：字符串。</li>
</ul>
<section id="pair" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="pair"><span class="header-section-number">2.1</span> pair</h3>
<ul>
<li><code>operator=</code> ：重载了赋值运算符用于拷贝。</li>
<li><code>first</code> / <code>second</code> ：访问第一项或第二项。</li>
<li><code>std::make_pair(a,b)</code> ：新建元素对，自动检测类型。</li>
<li><code>operator&lt;=&gt;</code> ：重载了各种比较运算符，按第一关键字、第二关键字顺序比较。</li>
</ul>
</section>
<section id="tuple" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="tuple"><span class="header-section-number">2.2</span> tuple</h3>
<ul>
<li><code>operator=</code> ：重载了赋值运算符用于拷贝。</li>
<li><code>std::get&lt;i&gt;(tp)</code> ：获取元组的第 i 项。</li>
<li><code>std::get&lt;T&gt;(tp)</code> ：获取元组中类型为 T 的项。</li>
<li><code>std::make_tuple(a,b,c,...)</code>：新建元组，自动检测类型。</li>
<li><code>operator&lt;=&gt;</code> ：重载比较运算符，同样是顺序关键字比较。 …</li>
</ul>
</section>
<section id="string" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="string"><span class="header-section-number">2.3</span> string</h3>
<p>与 <code>vector</code> 类似。其余重要特性如下：</p>
<ul>
<li><code>c_str()</code> ：生成一个 C 风格字符串（尾部置 0）并返回其头部指针。</li>
<li><code>length()</code> ：<code>size()</code> 的同义函数。</li>
<li><code>append(str)</code> ：后方追加字符串，返回 <code>*this</code>。</li>
<li><code>append(first, last)</code> ：区间插入版本。</li>
<li><code>operator+</code> ：连接两个字符串。</li>
<li><code>compare(str)</code> ：字典序比较。返回一个 <code>int</code>，用 <code>&lt;0</code> / <code>==0</code> / <code>&gt;0</code> 判断该字符串小于 / 等于 / 大于参数字符串。</li>
<li><code>operator&lt;=&gt;</code> ：字典序比较的运算符重载。</li>
<li><code>substr(pos=0, count)</code>：返回 <code>[pos, min(pos+count, size()))</code> 的子串。时间复杂度与 <code>count</code> 成线性。</li>
<li><code>pop_back()</code> (C++11)</li>
<li><code>find(str)</code> / <code>rfind(str)</code> / <code>find_first_of(c)</code> / <code>find_first_not_of(c)</code> / <code>find_last_of(c)</code> / <code>find_last_not_of(c)</code>：找字符串或字符，返回位置。若无，返回 <code>npos=-1</code>。<strong>无时间复杂度保证</strong>，不建议使用。</li>
</ul>
</section>
<section id="bitset" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="bitset"><span class="header-section-number">2.4</span> bitset</h3>
<p><code>bitset&lt;N&gt; bs(val / str)</code>：声明一个长度为 N 的 <code>bitset</code> 并设定初值。</p>
<ul>
<li><code>&amp; / ! / ^ / ~ / &gt;&gt; / &lt;&lt;</code> ：支持 AND / OR / XOR / NOT / 右移 / 左移等位运算系列。</li>
<li><code>operator==</code> ：判断两个 <code>bitset</code> 是否相同。</li>
<li><code>test(idx) / operator[idx]</code> ：前者会做越界检查，抛出异常。</li>
<li><code>size()</code></li>
<li><code>count()</code> ：返回 1 的个数。</li>
<li><code>all()</code> (C++11) ：检查是否全为 1。</li>
<li><code>any() / none()</code> ：检查是否存在 1 / 没有 1。</li>
<li><code>set() / reset()</code> ：所有位赋 1 / 0。</li>
<li><code>flip()</code> ：翻转 0 / 1。</li>
</ul>
</section>
</section>
<section id="stl-容器概览" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="stl-容器概览"><span class="header-section-number">3</span> STL 容器概览</h2>
<p>以下部分均为 STL 容器相关内容。</p>
<section id="迭代器" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="迭代器"><span class="header-section-number">3.1</span> 迭代器</h3>
<p>声明：形如 <code>vector&lt;int&gt;::iterator iter = xxx.begin()</code>。C++11 后可用 <code>auto</code> 代替类型声明。</p>
<p><code>*iter</code> 取值，<code>iter++</code> 后继。</p>
<p>双向迭代器可 <code>iter--</code>，随机访问迭代器支持加减、比较运算。</p>
<ul>
<li><code>begin()</code>, <code>end()</code> ：返回迭代器。<code>end()</code> 常作为 NULL 使用。</li>
<li><code>cbegin()</code>, <code>cend()</code> (C++11) ：部分容器支持，返回只读迭代器。</li>
<li><code>rbegin()</code>, <code>rend()</code> ：部分容器支持，返回反向迭代器。</li>
<li><code>crbegin()</code>, <code>crend()</code> ：部分容器支持，返回只读反向迭代器。</li>
</ul>
</section>
<section id="公共性质" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="公共性质"><span class="header-section-number">3.2</span> 公共性质</h3>
<ul>
<li><code>operator=</code> ：重载了赋值运算符用于拷贝。</li>
<li><code>empty()</code> ：返回容器是否为空，即 <code>v.begin() == v.end()</code>。</li>
<li><code>size()</code> ：返回容器内元素个数。</li>
<li><code>clear()</code> ：清空容器。</li>
</ul>
</section>
</section>
<section id="序列式容器或容器适配器" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="序列式容器或容器适配器"><span class="header-section-number">4</span> 序列式容器或容器适配器</h2>
<p>序列式容器：</p>
<ul>
<li><code>array</code> (C++11) ：定长顺序表，常数随机访问。</li>
<li><code>vector</code> <code>#include&lt;vector&gt;</code>：顺序表，常数后段插入，常数随机访问。</li>
<li><code>deque</code> <code>#include&lt;deque&gt;</code> ：顺序表，常数双端插入，<strong>常数随机访问</strong>。</li>
<li><code>list</code> <code>#include&lt;list&gt;</code> ：链表，常数插入删除，双向迭代器。
<ul>
<li><code>forward_list</code> (C++11) ：单向版本。</li>
</ul></li>
</ul>
<p>容器适配器（均不支持迭代器）：</p>
<ul>
<li><code>queue</code> <code>#include&lt;queue&gt;</code>：队列（FIFO）。适配双向变长序列式容器，即 <code>deque</code>（默认）或 <code>list</code>。</li>
<li><code>stack</code> <code>#include&lt;stack&gt;</code>：栈（LIFO）。适配变长序列式容器，即 <code>deque</code>（默认）、<code>vector</code>或 <code>list</code>。</li>
<li><code>priority_queue</code> <code>#include&lt;queue&gt;</code>：大根堆。适配随机访问变长序列式容器，即 <code>vector</code>（默认）或 <code>deque</code>。</li>
</ul>
<section id="vector" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="vector"><span class="header-section-number">4.1</span> vector</h3>
<p>Find:</p>
<ul>
<li><code>crbegin()</code></li>
<li><code>at(idx)</code> / <code>operator[idx]</code> ：前者会做越界检查，抛出异常。</li>
<li><code>front()</code>, <code>back()</code> ：返回首尾元素引用。</li>
</ul>
<p>Modify:</p>
<ul>
<li><code>push_back(x)</code> / <code>pop_back()</code> ：均摊常数复杂度。</li>
<li><code>insert(iter, val)</code> ：于迭代器 <code>iter</code> 处插入，返回指向被插入元素的迭代器。 <code>insert(iter, first, last)</code> ：左闭右开区间插入，返回指向首个被插入元素的迭代器。 注意，此操作<strong>非常数时间复杂度</strong>。</li>
<li><code>erase(iter)</code> ：于迭代器 <code>iter</code> 处删除，返回指向被删除元素的后一个元素的迭代器。 <code>erase(first, last)</code> ：左闭右开区间删除，返回指向被删除元素的后一个元素的迭代器。 注意，此操作<strong>非常数时间复杂度</strong>。</li>
</ul>
<p>Size:</p>
<ul>
<li><code>resize(n)</code> ：改变长度，可指定补充元素默认值。</li>
<li><code>shrink_to_fit()</code> ：调整为恰好长度。</li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p><code>vector&lt;bool&gt;</code> 被特殊定义，使用方式较为复杂，<strong>不建议使用</strong>。</p>
</div>
</div>
</div>
</section>
<section id="deque" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="deque"><span class="header-section-number">4.2</span> deque</h3>
<ul>
<li><code>push_front(x)</code>, <code>pop_front()</code></li>
</ul>
<p>其余与 <code>vector</code> 类似。</p>
<section id="stack" class="level4">
<h4 class="anchored" data-anchor-id="stack">stack</h4>
<ul>
<li><code>top()</code></li>
<li><code>push(x)</code></li>
<li><code>pop()</code></li>
</ul>
</section>
<section id="queue" class="level4">
<h4 class="anchored" data-anchor-id="queue">queue</h4>
<ul>
<li><code>front()</code></li>
<li><code>push(x)</code></li>
<li><code>pop()</code></li>
</ul>
</section>
<section id="priority_queue" class="level4">
<h4 class="anchored" data-anchor-id="priority_queue">priority_queue</h4>
<ul>
<li><code>std::priority_queue&lt;TypeName&gt;</code> ：<code>Compare</code> 默认使用 <code>std::less&lt;T&gt;</code>，即以 <code>operator &lt;</code> 作为大根堆的比较依据。</li>
<li><code>std::priority_queue&lt;TypeName, Container, Compare&gt;</code> ：亦可自行指定底层容器和比较函数对象。</li>
</ul>
<p>例如，传入 <code>std::greater&lt;T&gt;</code> 将使用 <code>&gt;</code> 作为比较符号，进而构造出小根堆。</p>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>自定义比较函数对象，可仿照以下代码：</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;queue&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){}</span></span>
<span id="cb1-8">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vecCompare<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>priority_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> vecCompare <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">    H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-20">    H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-21">    Vec t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<p>用法基本同 <code>queue</code>，但 <code>push() / pop()</code> 为对数时间复杂度。</p>
</section>
</section>
<section id="list" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="list"><span class="header-section-number">4.3</span> list</h3>
<ul>
<li>无随机访问接口。</li>
<li><code>insert(iter, val)</code> / <code>erase(iter)</code> ：插入与删除变为常数时间复杂度，参见 <code>vector</code>。</li>
<li><code>sort(cmp)</code> ：为链表特殊设计的 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)"> 稳定排序算法。</li>
</ul>
<p>其余与 <code>deque</code> 类似。</p>
</section>
</section>
<section id="关联式容器" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="关联式容器"><span class="header-section-number">5</span> 关联式容器</h2>
<p>不支持随机访问，双向迭代器，大部分操作为对数时间复杂度，红黑树实现。</p>
<ul>
<li><code>set</code> / <code>multiset</code> <code>#include&lt;set&gt;</code>：元素有序。后者支持同值多元素。</li>
<li><code>map</code> / <code>multimap</code> <code>#include&lt;map&gt;</code>：键有序。后者支持同键值多元素。</li>
</ul>
<section id="set-multiset" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="set-multiset"><span class="header-section-number">5.1</span> set / multiset</h3>
<ul>
<li><code>set&lt;Key&gt;</code>：默认使用 <code>operator &lt;</code> 比较（升序）。</li>
<li><code>set&lt;Key, Compare&gt;</code>：也可使用类似 <code>priority_queue</code> 的方法自定义比较函数对象 <code>Compare</code>。</li>
</ul>
<p>Find：</p>
<ul>
<li><code>crbegin()</code></li>
<li><code>count(x)</code> ：返回值为 <code>x</code> 的元素数量。</li>
<li><code>lower_bound(x)</code> / <code>upper_bound(x)</code> ：为 <code>set</code> 特殊定制的对数时间复杂度 <code>lower_bound</code> 和 <code>upper_bound</code>。</li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>没有 <code>nth_element()</code>，对数时间复杂度查询第 k 大需自行手写平衡树或使用 pbds 库。</p>
</div>
</div>
</div>
<p>Modify:</p>
<ul>
<li><code>insert(x)</code> ：插入元素 x。返回 <code>pair&lt;iterator, bool&gt;</code>，表示插入元素的迭代器与插入是否成功。 对于 <code>multiset</code>，由于插入不会失败，<code>insert</code> 只返回迭代器。</li>
<li><code>erase(x)</code> ：删除所有值为 x 的元素，返回删除元素的个数。 <code>erase(iter)</code> ：删除迭代器指向的元素，(C++11) 返回指向被删除元素的后一个元素的迭代器。 <code>erase(first, last)</code>：左闭右开区间删除，(C++11) 返回指向被删除元素的后一个元素的迭代器。</li>
</ul>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>删除单个值为 x 的元素，可按如下方法进行：</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-2">s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>erase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="map-multimap" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="map-multimap"><span class="header-section-number">5.2</span> map / multimap</h3>
<p><code>map&lt;Key, T, Compare&gt;</code>：可自定义比较方式。</p>
<ul>
<li>对迭代器解引用得到 <code>pair&lt;Key, T&gt;</code>。</li>
<li><code>insert(pair&lt;Key, T&gt;)</code></li>
<li><code>at[key]</code> / <code>operator[key]</code>：前者会做越界检查，抛出异常。</li>
</ul>
<p>其余与 <code>set</code> 类似。</p>
</section>
</section>
<section id="无序关联式容器-c11" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="无序关联式容器-c11"><span class="header-section-number">6</span> 无序关联式容器 (C++11)</h2>
<p>单向迭代器，平均常数时间复杂度，Hash 实现。</p>
<p>若不支持 c++11，使用时需引入 TR1 扩展。例如，使用 <code>unordered_map</code> 需引入 <code>#include&lt;tr1/unordered_map&gt;</code> 头文件，使用时需写为 <code>std::tr1::unordered_map</code>。</p>
<ul>
<li><code>unordered_set</code> / <code>unordered_multiset</code> <code>#include&lt;unordered_set&gt;</code>：元素无序。</li>
<li><code>unorderep_map</code> / <code>unordered_multimap</code> <code>#include&lt;unordered_map&gt;</code>：键无序。</li>
</ul>
<p>只有单向迭代器，其余特性与有序版本类似。</p>
<p>此外，还可自行指定相等判定方式和 Hash 函数。</p>
<ul>
<li><code>unordered_set&lt;Key, Hash, KeyEqual&gt;</code></li>
<li><code>unordered_map&lt;Key, T, Hash, KeyEqual&gt;</code></li>
</ul>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Hash 函数的自定义方法也与 <code>priority_queue</code> 中的方法类似：</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;unordered_set&gt;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-5">  ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){}</span></span>
<span id="cb3-7">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vecHash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1E9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)+</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107897</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unordered_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>vecHash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">    S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-22">    S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>OI</category>
  <category>C++</category>
  <guid>https://blog.sun123zxy.top/posts/20230124-stl/index.html</guid>
  <pubDate>Mon, 23 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Jekyll 2 Quarto: Academic Writing’s not All About PDF</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20221226-quarto-fantasia/index.html</link>
  <description><![CDATA[ 



<section id="旅程继续" class="level2">
<h2 class="anchored" data-anchor-id="旅程继续">旅程继续</h2>
<p><a href="../../posts/20210817-aboutblog">上回说到</a>，sun123zxy 同学完成了手撸 Jekyll 的伟大壮举，然后悠哉游哉地度过了他的高三生活。现在，静态博客的大厦已经基本落成，剩下的只是一些装修工作。然而，几朵不大不小的乌云却总让他感到不安。</p>
<p>sun123zxy 曾写过一篇相对严谨的学习笔记<a href="../../posts/20200321-burnside">等价类计数：Burnside引理 &amp; Polya定理</a>，还有一篇关于行列式与生成树计数的笔记尚未发布。这些笔记里包含大量章节标号、定理与交叉引用。关于交叉引用，原生 Markdown 只支持在链接处以 section 的标题作为标签完成引用，显然对中文文档不大友好。不少人选择使用内嵌 HTML 解决问题，但死脑筋的 sun123zxy 认为这种方式背离了 Markdown 简化格式的初衷。后来他发现，<a href="https://michelf.ca/projects/php-markdown/extra/">PHP Markdown Extra</a> 格式的 Special Attributes 能解决部分交叉引用的问题，更惊喜的是 Pandoc 竟然兼容这种语法（当时 sun123zxy 对 Pandoc 还没有做深入了解，只局限于使用 jekyll-pandoc 渲染而已）。至于处理章节标号，只需对已经写好的目录系统脚本做一点改动即可，而且当时 sun123zxy 也并没有那么多篇严谨的学术向写作。总之，问题暂时得到解决。</p>
<p>另一朵乌云来自 LaTeX。众所周知，Markdown 的内嵌数学公式是 LaTeX Math Mode 的某个子集。sun123zxy 发现，自己在 LaTeX 上的不求甚解开始给他带来各种麻烦。比如，他无法解释为什么只有 <code>aligned</code> 环境能被正确渲染，而不少教程中提到的 <code>align*</code> 和支持标号的 <code>align</code> 却总是报错；再比如，由于使用了重视速度的 <a href="https://katex.org/">KaTeX</a> 而不是更加完备的 <a href="https://www.mathjax.org/">MathJax</a> 作为渲染引擎，他发现自己无法使用诸如 <code>\newcommand</code>、<code>\DeclareMathOperator</code> 的宏定义。而且，一些教程中提到的 <code>physics</code> 等需要自行导入的“宏包”也让他摸不着头脑。</p>
<p>最重要的是，sun123zxy 开启了他的大学生活，论文写作的需求使他产生了系统学习 LaTeX 的想法。他在网协大牛那里听说了 <a href="https://www.overleaf.com/">Overleaf</a>，并在间歇性热情驱使下疯狂啃食文档，最终写出了自己的文档类，覆盖常见中文社科、科技向论文写作需求。验之以文，效果拔群。学习过程中，sun123zxy 习得众多排版常识，掌握了各种 font family 的区别、衬线字体的使用情景、英文 dash 的分辨方式等技巧，姿势水平得到质的飞跃。</p>
<p>sun123zxy 发现自己有点沉迷 LaTeX 了。他在写集合论大作业时学习了 <code>amsthm</code> 宏包，现已完全抵挡不住“定理 2.3”、“推论 4.1.1”、“例题 3.2”、“图 3”、“表 1”自动标号和交叉引用的诱惑。曾经博客使用的加强版 Markdown 在完备的 LaTeX 面前不值一提。他突然感觉有点害怕，毕竟 PDF 格式的网络发布效果并不理想。他需要找到一种能兼取两种格式长处的解决方案，否则他的博客将成为历史的眼泪。</p>
<p>然而在这里他遇到了瓶颈。尽管已经有一系列形如 LaTeX2HTML 的项目存在，但因为 TeX/LaTeX 是为 PDF 等页面固定的展现方式而设计，在转换成尺寸动态变化的网页（HTML）时必然面临信息损失。<a href="https://yihui.org/en/2013/10/markdown-or-latex/">Markdown or LaTeX? - Yihui Xie | 谢益辉</a> 这篇文章详细的讨论了 Markdown 和 LaTeX 间不可调和的冲突。更好的思路是，利用轻巧且可读性优秀的 Markdown 作为写作语言直接输出 HTML，需要 PDF 时再使用其它程序处理得到 LaTeX 代码。<a href="https://ctan.org/pkg/markdown">markdown 宏包</a>就解决了这样的问题。</p>
<blockquote class="blockquote">
<p>「你喜爱的 Markdown 写作，现更以 LaTeX 呈现。」</p>
<p>——<a href="https://liam.page/2020/03/30/writing-manuscript-in-Markdown-and-typesetting-with-LaTeX/">以 Markdown 撰写文稿，以 LaTeX 排版 | 始终</a></p>
</blockquote>
<p>markdown 宏包提供的 hybrid 功能还提供了将 LaTeX 命令混入 Markdown 的功能，完美覆盖了上述使用情景。然而，Markdown 自身在学术写作方面的固有缺陷——难以交叉引用、无法自动编号、没有定理系统——仍然让 HTML 输出举步维艰。问题在这里似乎陷入了死结：既想要 Markdown 的可读性和 HTML 输出，又想要 LaTeX 的定理系统和 PDF 输出——这可能吗？</p>
<p>sun123zxy 询问了不少同时掌握 Markdown 和 LaTeX 的大佬，他们都没有研究过这样的问题。唯一的希望是：找到一种合适的方式扩展 Markdown 的语法。sun123zxy 想起了 <a href="https://pandoc.org/">Pandoc</a>——文档转换界的瑞士军刀。事实证明 Pandoc 确实对得起这个称呼。他离解决方案已经非常近了：<a href="https://pandoc.org/MANUAL.html#pandocs-markdown">Pandoc’s Markdown</a> 已经非常强大，强大到可以随意内嵌 LaTeX 代码（当然只对 LaTeX 输出有效），交叉引用几乎任何内容，甚至可以用 Markdown 风格的 fenced syntax 控制 HTML 中的 <code>div</code>、<code>span</code> 及其参数！再加上 <a href="https://github.com/tomduck/pandoc-xnos">pandoc-xnos</a> 插件提供的自动标号功能，问题几乎得到全部解决——而现在看来，定理系统也可以通过编写 Pandoc filter 实现。</p>
<p>当然，sun123zxy 是个懒人，在能搜到解决方案的情况下，他不会干重复造轮子的傻事。某日，sun123zxy 又开始他了的头脑风暴。通过 Google 新的关键字 <code>markdown</code>、<code>cross-reference</code>、<code>academic writing</code>，他发现了 <a href="https://rmarkdown.rstudio.com/">R Markdown</a>，进而发现了 <a href="https://quarto.org/">Quarto</a>。</p>
<blockquote class="blockquote">
<p>Quarto is an open-source scientific and technical publishing system built on Pandoc.</p>
<ul>
<li>Create dynamic content with Python, R, Julia, and Observable.</li>
<li>Author documents as plain text markdown or Jupyter notebooks.</li>
<li>Publish high-quality articles, reports, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more.</li>
<li>Author with scientific markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.</li>
</ul>
<p>——几乎让我一下子跳起来的 Overview</p>
</blockquote>
<p>Quarto 是构建在 Pandoc 上的文档发布系统，对 Pandoc’s Markdown 做了进一步扩展以适应学术写作，其中就包含了 pandoc-xnos 的语法和——用 Pandoc’s Markdown 的 fenced syntax 实现的定理系统！此外，Quarto 甚至还支持 Jupyter Notebook 的动态计算，附上 Matplotlib 代码就可动态生成统计图表——而且同样也可以被交叉引用！更让人欣喜的是，除了直接输出 HTML 和 PDF/LaTeX，Quarto 还提供了类似 Jekyll 的生成静态网站的功能！</p>
<p>于是，长达数月的探索终于落下帷幕，语法学习、环境配置与博客迁移被提上日程。又是近一个月的辛勤劳动，sun123zxy 终于完成了写作流程的构建和博客的搭建工作。盯着桌前已经冷透了的保温杯，他陷入了沉思……</p>
</section>
<section id="主要成果" class="level2">
<h2 class="anchored" data-anchor-id="主要成果">主要成果</h2>
<ul>
<li>基于 Quarto 的 <a href="https://github.com/sun123zxy/sunquartex">SunQuarTeX</a> 多格式中文学术写作出版流程，内含适用于常见中文论文写作的 LaTeX 文档类及其示例文档。</li>
<li>Quarto 驱动的适应学术写作要求的<a href="https://blog.sun123zxy.top">新版博客</a>（<a href="https://github.com/sun123zxy/blog-quarto-code">sun123zxy/blog-quarto-code</a>）。</li>
</ul>
<p>上一个 Jekyll 博客，一砖一瓦都是自己搭出来的，有感情了（笑）。所以也没下线，放在 <a href="https://blog-jekyll.sun123zxy.top">blog-jekyll.sun123zxy.top</a> 上了。如果你也和我一样怀旧，可以去看看~</p>
<p>那么，依照惯例，聊聊学习与折腾中的一点心得体会。</p>
</section>
<section id="关于-latex" class="level2">
<h2 class="anchored" data-anchor-id="关于-latex">关于 LaTeX</h2>
<p>很多人说 LaTeX 不好学——的确。即使是 OIer 群体，对 LaTeX 的认知也大多停留在数学公式水平。然而比起客观的困难，更应该问的问题是——Why LaTeX? 不同人的答案或许有所不同，但应有以下几点：</p>
<ul>
<li>有学术写作或打印文档的需求（否则可直接使用 Markdown/HTML）</li>
<li>认同内容与样式分离的设计思想，希望对文档排版有清晰的控制，而不是所见即所得的富文本格式导致的混乱。</li>
<li>希望用相对不易损坏且可读性较高的代码式文档替代 <code>.docx</code> 式的黑箱存储。</li>
<li>需要使用章节标号、定理系统等交叉引用功能。</li>
<li>想用简洁的代码生成严谨美观的数学公式。</li>
<li><del>就是感觉 LaTeX 排出来的东西很牛逼</del></li>
</ul>
<p>学习 LaTeX 需要了解它的历史，理解它的开发理念，理清 TeX/LaTeX 的历史进程，弄清 pdfLaTeX、XeLaTeX、LuaLaTeX 各自的特点，在 MikeTeX、TeXLive 两个发行版中做出选择，学习 BibTeX 引用管理格式，还有对排版知识的初步了解——知识体系可谓庞大。此外，不少 LaTeX 教学文档、各种宏包的手册本身就是由 LaTeX 生成的，这意味它们都是 PDF 格式，无法在互联网上得到很好的传播。但请不要忘记，它们是学习 LaTeX 的第一手资料。例如，<a href="https://www.ctan.org/">CTAN</a> 上的手册是学习各类宏包的第一途径，<a href="https://www.latex-project.org/help/documentation/">LaTeX 官网</a>也提供了不少相对系统的 PDF 教程。当然，近年来网页渲染工具 <a href="https://www.overleaf.com/">Overleaf</a> 的出现降低了环境配置的难度，<a href="https://www.overleaf.com/learn">Overleaf 的 LaTeX 教学文档</a>也非常优秀。我还强烈推荐 <a href="https://liam.page/2014/09/08/latex-introduction/">一份其实很短的 LaTeX 入门文档 | 始终</a> 这篇文章作为入门，作者是一位参与维护 CTeX 宏集的大佬，之前提到的 markdown 宏包他也写过一篇详细的介绍，详见上文引用中的链接。</p>
<p>在互联网上碎片化的学习 LaTeX，一定要经常问自己——这功能是哪个宏包定义的？例如，关于交叉引用，<code>\label</code>、<code>\ref</code>、<code>\pageref</code> 均为原生自带，<code>\eqref</code> 是 <code>amsmath</code> 宏包定义的，而 <code>\autoref</code> <code>\href</code> <code>\url</code> 均为 <code>hyperref</code> 宏包的命令，引入 <code>hyperref</code> 的目的主要是让文章里的交叉引用都变成 PDF 里可点击跳转的超链接；再例如，定理系统是 LaTeX 原生支持的，但 <code>amsthm</code> 提供了无标号版本的定理、设置 <code>\theoremstyle</code> 的方式和自动添加 QED symbol 的 <code>proof</code> 环境。再次强调，不要错过宏包的 PDF 手册！阅读手册是整合碎片知识、查漏补缺的最佳途径。</p>
</section>
<section id="关于-ctex" class="level2">
<h2 class="anchored" data-anchor-id="关于-ctex">关于 CTeX</h2>
<p>此外，有必要对中文排版基础宏包 <a href="https://ctan.org/pkg/ctex">CTeX</a> 做进一步说明。</p>
<blockquote class="blockquote">
<p>最初，Knuth 在设计开发 TeX 的时候没有考虑到多国文字支持，特别是对多字节的中日韩表意文字的支持。这使得 TeX 以至后来的 LaTeX 对中文的支持一直不是很好。即使在 CJK 宏包解决了中文字符处理的问题以后，中文用户使用 LaTeX 仍然要面对许多困难。这些困难里，以章节标题的中文化为最。由于中文和西文书写习惯的差异，用户很难使用标准文档类中的代码结构来表达中文标题。于是，用户不得不对标准文档类做较大的修改。除此之外，日期格式、首行缩进、中文字号和字距等细节问题，也需要精细的调校。我们设计 CTeX 宏集的目的之一就是解决这些 LaTeX 文档的汉化难题。</p>
<p>另一方面，随着 TeX 引擎和 LaTeX 宏包的不断发展，LaTeX 的中文支持方式从早期的专用系统（如 CCT）发展为适用于不同引擎的多种方式。这些方式的适用情况和使用方式有不少细节上的差异，同时操作系统的不同、语言环境的不同等客观情况又进一步带来了更多的细节差异。我们设计 CTeX 宏集的另一个主要目的就是尽可能消除这些差异带来的影响，使用户能够以一个统一的接口来使用不同的中文支持方式，使得同一份文档能够在不同环境下交换使用。</p>
<p>——CTeX 宏集手册 - 第 1 节：介绍</p>
</blockquote>
<p>CTeX 的基础使用，我仍然推荐上面始终的入门文档。<a href="https://zhuanlan.zhihu.com/p/538459335">LaTeX 中文字体配置基础指南 - 知乎</a>对我的帮助也很大。如果打算进一步自定义样式建立自己的文档类，还得沉下心来研读手册。</p>
</section>
<section id="关于-pandoc" class="level2">
<h2 class="anchored" data-anchor-id="关于-pandoc">关于 Pandoc</h2>
<p>Pandoc 其实一直致力于扩展 Markdown 的语法使其适合学术写作。<a href="https://www.youtube.com/watch?v=T9uZJFO54iM">TUG 2020 — John MacFarlane — Pandoc for TeXnicians</a> 的演讲几乎涵盖了所有值得关心的问题。</p>
<p>我认为 Pandoc 已有能力成为下一代学术写作的终极解决方案。语法上，Markdown 简洁易读，语法天然与格式解耦（反例是 LaTeX），而 Pandoc’s Markdown 是 Markdown 方言的集大成者，交叉引用、文献引用、图表等 Markdown 原生痛点都有很好的支持，fenced syntax 甚至可以视为 LaTeX environment 的平替；技术上，Pandoc 已经是非常成熟的格式转换工具，而 Pandoc filter 好比 LaTeX 中的 documentclass 和 style 文件，事实上实现了 Markdown 中的“宏定义”。如社区进一步发展，大部分常用 filter 能像在 LaTeX 中引用 documentclass 一样轻松获取，我们就能真正告别格式的困扰，拥抱 Pandoc’s Markdown 治下的多格式学术写作。</p>
<p>从这角度来看，Quarto 似乎更像是 Jupyter、Jekyll 和一堆 Pandoc filter 的混合物（笑）</p>
</section>
<section id="关于-quarto" class="level2">
<h2 class="anchored" data-anchor-id="关于-quarto">关于 Quarto</h2>
<p>Quarto 首个 Release 距今不到 2 年，是相当年轻的项目。开发 Quarto 的团队之前主要维护 R Markdown，Quarto 是他们跳出 R 语言生态圈，将成果扩展至更广阔生态圈（如 Python）的尝试，这也意味着项目尚存不尽人意之处。把它调理成满意的模样，还真得花不少功夫。<del>甚至让笔者开了人生首个正经 issue</del></p>
<section id="sunquartex" class="level3">
<h3 class="anchored" data-anchor-id="sunquartex">SunQuarTeX</h3>
<p>使用 Quarto，我主要有两大需求——论文多格式输出和静态博客生成。两个需求相对独立，因此有必要将离线论文输出的功能单独抽象出来。折腾的结果就是 <a href="https://github.com/sun123zxy/sunquartex">SunQuarTeX</a>。Quarto 原生的 HTML 输出还不错，自带目录高亮还有引用提示，稍微改改就能用了。关于自定义，Quarto 使用 SCSS 作为 CSS 生成器，意味着可以直接通过修改变量或 <code>@extend</code> 完成大部分工作。参考以下文档：</p>
<ul>
<li><a href="https://quarto.org/docs/output-formats/html-themes.html">Quarto - HTML Theming</a></li>
<li><a href="https://quarto.org/docs/output-formats/html-themes-more.html">Quarto - More About Quarto Themes</a></li>
<li><code>quarto-cli</code> 下的 <code>/src/resources/formats/html/bootstrap/</code>：内有 Quarto 的 SCSS 定义，目录下还有各种官方主题的 SCSS 文件，可作参照。Tip: 善用 Github 搜索功能！</li>
</ul>
<p>我这边的修改主要是把定理做成了 callout 的样式，另外给 proof 尾部加了 QED symbol。</p>
<p>难绷的是 PDF，直接生成效果可谓一言难尽……还好，与 Pandoc 相似，Quarto 提供了设置 <code>template</code> 的功能，可使用稍加改动的 LaTeX 文件作为生成模板，从而完全控制文章 LaTeX 的生成方式，进而控制 PDF 输出的样式。可参考以下文档食用：</p>
<ul>
<li><a href="https://github.com/quarto-dev/quarto-cli/discussions/2543">complex thesis with quarto · Discussion #2543 · quarto-dev/quarto-cli · GitHub</a></li>
<li><a href="https://quarto.org/docs/journals/templates.html#templates">Quarto - Article Templates</a></li>
</ul>
<p>当然，这得在已有成熟 LaTeX 模板的前提下才能进行，所以还是得会 LaTeX（笑）。使用过程中笔者也发现生成的 LaTeX 的某些细节不太合理（如 <a href="https://github.com/quarto-dev/quarto-cli/issues/3736">Issue #3736</a>，详见 SunQuarTeX 仓库 README），当然也无伤大雅，且等开发团队慢慢完善吧。</p>
</section>
<section id="blog" class="level3">
<h3 class="anchored" data-anchor-id="blog">Blog</h3>
<p>有了前面的基础，再搭博客也就容易了。以笔者一贯的风格，博客样式都是要操刀大改的（上一个甚至直接从零手撸了 XD），这次工作却意外的少。一方面考虑到毕竟不在 CS 专业，写那么多祖传代码之后维护也是麻烦事；另一方面嘛……</p>
<blockquote class="blockquote">
<p>这，谁写的这 <code>darkly</code> 这主题，绿不拉几的</p>
<p>看一眼</p>
<p><code>#00bc8c</code>，啊这样</p>
<p>草</p>
<p>这样啊这样</p>
<p>加个背景</p>
<p>……</p>
<p>？</p>
<p>？？？</p>
<p>好像还挺配的？</p>
<p>——来自考试周还在摸鱼的 sun123zxy 的惊叹</p>
</blockquote>
<p>light mode 的 <code>flatly</code> 也还不错，直接丢上去没改了。唯一的缺憾是 <a href="https://github.com/quarto-dev/quarto-cli/issues/3705">Issue #3705</a>，按开发组成员的回复来看，短期内 light mode 和 dark mode 的相互分离还不能实现。</p>
<p>此外，关于代码高亮的自定义方式，可参考以下要点：</p>
<ul>
<li><a href="https://quarto.org/docs/output-formats/html-code.html#highlighting">Quarto - HTML Code Blocks # Highlighting</a></li>
<li><code>quarto-cli</code> 下的 <code>/src/resources/pandoc/highlight-styles/</code>：内有官方样式文件，可作为模板。</li>
<li>行内高亮不能在 <code>.theme</code> 中更改，可通过覆盖 SCSS 的 <code>$code-color</code> 设置。</li>
</ul>
</section>
</section>
<section id="画廊" class="level2">
<h2 class="anchored" data-anchor-id="画廊">画廊</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20221226-quarto-fantasia/quarto-begin.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">2022/12/26 上线前夕</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>站点相关</category>
  <category>web</category>
  <category>LaTeX</category>
  <category>回忆</category>
  <guid>https://blog.sun123zxy.top/posts/20221226-quarto-fantasia/index.html</guid>
  <pubDate>Sun, 25 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>SunQuarTeX 中文学术写作示例文档</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20221223-quarto-test/index.html</link>
  <description><![CDATA[ 



<section id="前言" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="前言"><span class="header-section-number">1</span> 前言</h2>
<p>具体使用方法等参见 <a href="https://github.com/sun123zxy/sunquartex">sun123zxy/sunquartex</a>。</p>
</section>
<section id="文章结构测试" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="文章结构测试"><span class="header-section-number">2</span> 文章结构测试</h2>
<p>这一节测试文章结构。</p>
<section id="文章分节" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="文章分节"><span class="header-section-number">2.1</span> 文章分节</h3>
<p>非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</p>
<section id="sec-test" class="level4">
<h4 class="anchored" data-anchor-id="sec-test">文章分分节</h4>
<p>Quarto 支持交叉引用。比如这一节的标题就已经被打上了标签。</p>
<section id="分分分节" class="level5">
<h5 class="anchored" data-anchor-id="分分分节">分分分节</h5>
<p>本节中我们测试交叉引用 Section&nbsp;2.1.1。</p>
<section id="分分分分节" class="level6">
<h6 class="anchored" data-anchor-id="分分分分节">分分分分节</h6>
<p>这是最小的一级了。</p>
</section>
</section>
</section>
</section>
</section>
<section id="图片表格列表测试" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="图片表格列表测试"><span class="header-section-number">3</span> 图片、表格、列表测试</h2>
<p>这是 Quarto 的图标。</p>
<div id="fig-quarto" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20221223-quarto-test/quarto.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;1: 这是一张插图</figcaption>
</figure>
</div>
<p>交叉引用 Figure&nbsp;1 当然也是可以的。</p>
<p>这是一个紧凑列表。</p>
<ul>
<li>自反性。</li>
<li>反对称性一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</li>
<li>传递性。</li>
</ul>
<p>这是一个宽松列表。</p>
<ul>
<li><p>自反性。</p></li>
<li><p>反对称性一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</p>
<p>还多加了一段。</p></li>
<li><p>传递性。</p></li>
</ul>
<p>当然也可以使用 markdown 表格。例如 Table&nbsp;1 (a).</p>
<p>顺便测试以下多表格并列。加上 Table&nbsp;1 (b)，它们共同组成了 Table&nbsp;1。</p>
<div id="tbl-panel-unsolved" class="tbl-parent quarto-layout-panel anchored">
<div class="quarto-layout-row quarto-layout-valign-top">
<div id="tbl-cartesian-unsolved" class="quarto-layout-cell quarto-layout-cell-subref anchored" data-ref-parent="tbl-panel-unsolved" style="flex-basis: 50.0%;justify-content: center;">
<table class="table">
<caption>(a) 笛卡尔积</caption>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?L_i%20%5Ctimes%20C_j"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?2"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?2"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?4"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;">?</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
<td style="text-align: center;">?</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
</tr>
</tbody>
</table>
</div>
<div id="tbl-power-unsolved" class="quarto-layout-cell quarto-layout-cell-subref anchored" data-ref-parent="tbl-panel-unsolved" style="flex-basis: 50.0%;justify-content: center;">
<table class="table">
<caption>(b) 集合幂</caption>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?L_i%5E%7BC_j%7D"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?2"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?2"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?4"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?2%5E%7B%5Cmathbb%20R%7D"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20N"></td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R"></td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="panel-caption table-caption">
<p>Table&nbsp;1: 相关集合的势（不完整版）</p>
</div>
</div>
</section>
<section id="数学公式定理系统测试" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="数学公式定理系统测试"><span class="header-section-number">4</span> 数学公式、定理系统测试</h2>
<p>Quarto 的一大卖点。</p>
<p>这一节我们测试数学相关内容. HTML 中的定理标号方式目前没有方法更改，但 LaTeX 中的定理标号可通过自行修改模板中 <code>amsthm</code> 宏包的定义实现.</p>
<p>此外，根据 <a href="https://quarto.org/docs/authoring/markdown-basics.html#equations">Quarto - Markdown Basics # Equations</a> 和 <a href="https://github.com/quarto-dev/quarto-cli/discussions/1793">Defining LaTeX commands for HTML and PDF rendering - Discussion #1793</a>，可按如下面方式自定义 macro 并确保其在 HTML 和 LaTeX/PDF 中都得到正确渲染。值得注意的是，由于 <code>\DeclareMathOperator</code> 只能在 LaTeX 的导言区使用，这里我们用 <code>\newcommand</code> + <code>\operatorname</code> 的方式替代。</p>
<div class="hidden">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnewcommand%7B%5Cran%7D%7B%5Coperatorname%7Bran%7D%7D%0A"></p>
</div>
<p>下面的公式使用了上面定义的 macro。 <img src="https://latex.codecogs.com/png.latex?%0A%5Cran%20A%20:=%20%5C%7B%20y%20%5Cmid%20(x,y)%20%5Cin%20A%20%5C%7D%0A"></p>
<p>两个集合 <img src="https://latex.codecogs.com/png.latex?A,%20B"> 的笛卡尔积定义为 <img src="https://latex.codecogs.com/png.latex?%0AA%20%5Ctimes%20B%20=%20%5C%7B%5Clangle%20x,y%20%5Crangle%20%5Cmid%20x%20%5Cin%20A%20%5Cland%20y%20%5Cin%20B%20%5C%7D%0A"></p>
<p>显然，笛卡尔积不满足交换律和结合律. 在势的视角下，它的表现如何呢？</p>
<div id="thm-cartesian-preserve" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (笛卡尔积的保势性) </strong></span>这是一个有 caption 的定理.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20%5Cpreccurlyeq%20C%20%5Cland%20B%20%5Cpreccurlyeq%20D%20%5Cimplies%20A%20%5Ctimes%20B%20%5Cpreccurlyeq%20C%20%5Ctimes%20D%0A"></p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>建立单射 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cvarphi:%20A%20%5Ctimes%20B%20&amp;%5Cto%20C%20%5Ctimes%20D%20%5C%5C%0A%5Clangle%20x,y%20%5Crangle%20&amp;%5Cmapsto%20%5Clangle%20f(x),%20g(y)%20%5Crangle%0A%5Cend%7Baligned%7D%0A"> 即可，其中 <img src="https://latex.codecogs.com/png.latex?f"> 和 <img src="https://latex.codecogs.com/png.latex?g"> 是由 <img src="https://latex.codecogs.com/png.latex?A%20%5Cpreccurlyeq%20C"> 和 <img src="https://latex.codecogs.com/png.latex?B%20%5Cpreccurlyeq%20D"> 确定的单射.</p>
</div>
<div id="cor-random" class="theorem corollary">
<p><span class="theorem-title"><strong>Corollary 1 </strong></span>等势意义下可用等势的集合替换参与笛卡尔积运算的集合，即 <img src="https://latex.codecogs.com/png.latex?%0AA%20%5Capprox%20C%20%5Cland%20B%20%5Capprox%20D%20%5Cimplies%20A%20%5Ctimes%20B%20%5Capprox%20C%20%5Ctimes%20D%0A"></p>
<p>这是一个没有 caption 的定理.</p>
</div>
<div id="exm-rtimesn" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>证明 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20R%20%5Ctimes%20%5Cmathbb%20N%20%5Capprox%20%5Cmathbb%20N%20%5Ctimes%20%5Cmathbb%20R%20%5Capprox%20%5Cmathbb%20R%0A"></p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>利用 Theorem&nbsp;1 对 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R%20%5Ctimes%202"> 和 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20R%20%5Ctimes%20%5Cmathbb%20R"> 夹逼，立刻得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20R%20%5Capprox%20%5Cmathbb%20R%20%5Ctimes%202%20%5Cpreccurlyeq%20%5Cmathbb%20R%20%5Ctimes%20%5Cmathbb%20N%20%5Cpreccurlyeq%20%5Cmathbb%20R%20%5Ctimes%20%5Cmathbb%20R%20%5Capprox%20%5Cmathbb%20R%0A%5Cimplies%20%5Cmathbb%20R%20%5Ctimes%20%5Cmathbb%20N%20%5Capprox%20%5Cmathbb%20N%20%5Ctimes%20%5Cmathbb%20R%20%5Capprox%20%5Cmathbb%20R%0A"></p>
</div>
</section>
<section id="数据可视化" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="数据可视化"><span class="header-section-number">5</span> 数据可视化</h2>
<p>Quarto 的另一大卖点。</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb1-5">theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r</span>
<span id="cb1-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(</span>
<span id="cb1-7">  subplot_kw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'projection'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polar'</span>} </span>
<span id="cb1-8">)</span>
<span id="cb1-9">ax.plot(theta, r)</span>
<span id="cb1-10">ax.set_rticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-11">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-12">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-polar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20221223-quarto-test/index_files/figure-html/fig-polar-output-1.png" width="450" height="439" class="figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: A line plot on a polar axis</figcaption>
</figure>
</div>
</div>
</div>
<p>交叉引用 Figure&nbsp;2 当然也是可以的.</p>
<p>另外，支持使用 GraphViz 或 Mermaid 绘制有向图或流程图。</p>
<div class="cell" data-fig-width="6.25" data-fig-height="2.5">
<div class="cell-output-display">
<div id="fig-real" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div>
<svg width="600" height="240" viewbox="0.00 0.00 422.00 310.40" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 306.4)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-306.4 418,-306.4 418,4 -4,4"></polygon> <!-- sup --> <g id="node1" class="node">
<title>
sup
</title>
<ellipse fill="none" stroke="black" cx="27" cy="-106.8" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="27" y="-102.6" font-family="Times,serif" font-size="14.00">A</text> </g> <!-- mono --> <g id="node2" class="node">
<title>
mono
</title>
<ellipse fill="none" stroke="black" cx="117" cy="-106.8" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="117" y="-102.6" font-family="Times,serif" font-size="14.00">B</text> </g> <!-- sup&#45;&gt;mono --> <g id="edge1" class="edge">
<title>
sup-&gt;mono
</title>
<path fill="none" stroke="black" d="M54.07,-106.8C62.67,-106.8 71.27,-106.8 79.87,-106.8"></path> <polygon fill="black" stroke="black" points="79.96,-110.3 89.96,-106.8 79.96,-103.3 79.96,-110.3"></polygon> </g> <!-- nested --> <g id="node3" class="node">
<title>
nested
</title>
<ellipse fill="none" stroke="black" cx="207" cy="-106.8" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="207" y="-102.6" font-family="Times,serif" font-size="14.00">C</text> </g> <!-- mono&#45;&gt;nested --> <g id="edge2" class="edge">
<title>
mono-&gt;nested
</title>
<path fill="none" stroke="black" d="M144.07,-106.8C152.67,-106.8 161.27,-106.8 169.87,-106.8"></path> <polygon fill="black" stroke="black" points="169.96,-110.3 179.96,-106.8 169.96,-103.3 169.96,-110.3"></polygon> </g> <!-- nested&#45;&gt;sup --> <g id="edge6" class="edge">
<title>
nested-&gt;sup
</title>
<path fill="none" stroke="black" d="M188.83,-93.14C172.85,-82.02 148.45,-67.2 124.5,-61 97.85,-54.1 69.61,-70.28 50.42,-85.28"></path> <polygon fill="black" stroke="black" points="48.02,-82.72 42.53,-91.78 52.47,-88.12 48.02,-82.72"></polygon> <text text-anchor="middle" x="121" y="-58.2" font-family="Times,serif" font-size="14.00">2</text> </g> <!-- bw --> <g id="node4" class="node">
<title>
bw
</title>
<ellipse fill="none" stroke="black" cx="387" cy="-106.8" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="387" y="-102.6" font-family="Times,serif" font-size="14.00">D</text> </g> <!-- nested&#45;&gt;bw --> <!-- accu --> <g id="node6" class="node">
<title>
accu
</title>
<ellipse fill="none" stroke="black" cx="297" cy="-106.8" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="297" y="-102.6" font-family="Times,serif" font-size="14.00">F</text> </g> <!-- nested&#45;&gt;accu --> <g id="edge8" class="edge">
<title>
nested-&gt;accu
</title>
<path fill="none" stroke="black" d="M234,-106.8C242.03,-106.8 250.97,-106.8 259.53,-106.8"></path> <polygon fill="black" stroke="black" points="259.71,-110.3 269.71,-106.8 259.7,-103.3 259.71,-110.3"></polygon> <text text-anchor="middle" x="252" y="-91.2" font-family="Times,serif" font-size="14.00">4</text> </g> <!-- finite --> <g id="node7" class="node">
<title>
finite
</title>
<ellipse fill="none" stroke="black" cx="252" cy="-284.4" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="252" y="-280.2" font-family="Times,serif" font-size="14.00">G</text> </g> <!-- nested&#45;&gt;finite --> <g id="edge7" class="edge">
<title>
nested-&gt;finite
</title>
<path fill="none" stroke="black" d="M211.31,-124.64C219.14,-155.19 235.74,-219.97 245.14,-256.64"></path> <polygon fill="black" stroke="black" points="241.83,-257.8 247.7,-266.61 248.61,-256.06 241.83,-257.8"></polygon> <text text-anchor="middle" x="237.5" y="-191.4" font-family="Times,serif" font-size="14.00">3</text> </g> <!-- cauchy --> <g id="node5" class="node">
<title>
cauchy
</title>
<ellipse fill="none" stroke="black" cx="228" cy="-18" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="228" y="-13.8" font-family="Times,serif" font-size="14.00">E</text> </g> <!-- bw&#45;&gt;cauchy --> <g id="edge4" class="edge">
<title>
bw-&gt;cauchy
</title>
<path fill="none" stroke="black" d="M366.78,-94.76C338.97,-79.58 288.77,-52.17 256.97,-34.82"></path> <polygon fill="black" stroke="black" points="258.59,-31.71 248.14,-29.99 255.24,-37.86 258.59,-31.71"></polygon> </g> <!-- lebesgue --> <g id="node8" class="node">
<title>
lebesgue
</title>
<ellipse fill="none" stroke="black" cx="368" cy="-195.6" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="368" y="-191.4" font-family="Times,serif" font-size="14.00">H</text> </g> <!-- bw&#45;&gt;lebesgue --> <g id="edge11" class="edge">
<title>
bw-&gt;lebesgue
</title>
<path fill="none" stroke="black" d="M383.25,-124.95C380.59,-137.08 376.98,-153.58 373.94,-167.48"></path> <polygon fill="black" stroke="black" points="370.47,-166.97 371.75,-177.49 377.3,-168.47 370.47,-166.97"></polygon> <text text-anchor="middle" x="382.5" y="-147" font-family="Times,serif" font-size="14.00">7</text> </g> <!-- cauchy&#45;&gt;mono --> <g id="edge5" class="edge">
<title>
cauchy-&gt;mono
</title>
<path fill="none" stroke="black" d="M211.14,-32.18C192.72,-46.59 163.03,-69.8 141.92,-86.31"></path> <polygon fill="black" stroke="black" points="139.74,-83.58 134.02,-92.49 144.05,-89.09 139.74,-83.58"></polygon> <text text-anchor="middle" x="186.5" y="-58.2" font-family="Times,serif" font-size="14.00">1</text> </g> <!-- accu&#45;&gt;bw --> <g id="edge10" class="edge">
<title>
accu-&gt;bw
</title>
<path fill="none" stroke="black" d="M334.16,-106.8C339.24,-106.8 344.45,-106.8 349.54,-106.8"></path> <polygon fill="black" stroke="black" points="334,-103.3 324,-106.8 334,-110.3 334,-103.3"></polygon> <polygon fill="black" stroke="black" points="349.71,-110.3 359.71,-106.8 349.7,-103.3 349.71,-110.3"></polygon> <text text-anchor="middle" x="342" y="-91.2" font-family="Times,serif" font-size="14.00">6</text> </g> <!-- finite&#45;&gt;sup --> <g id="edge13" class="edge">
<title>
finite-&gt;sup
</title>
<path fill="none" stroke="black" d="M235.2,-270.29C195.96,-239.66 98.12,-163.3 51.91,-127.24"></path> <polygon fill="black" stroke="black" points="53.95,-124.39 43.91,-121 49.64,-129.91 53.95,-124.39"></polygon> <text text-anchor="middle" x="165.5" y="-191.4" font-family="Times,serif" font-size="14.00">9</text> </g> <!-- finite&#45;&gt;accu --> <g id="edge9" class="edge">
<title>
finite-&gt;accu
</title>
<path fill="none" stroke="black" d="M256.3,-266.61C264.12,-236.1 280.72,-171.32 290.13,-134.62"></path> <polygon fill="black" stroke="black" points="293.59,-135.19 292.69,-124.64 286.81,-133.46 293.59,-135.19"></polygon> <text text-anchor="middle" x="282.5" y="-191.4" font-family="Times,serif" font-size="14.00">5</text> </g> <!-- lebesgue&#45;&gt;finite --> <g id="edge12" class="edge">
<title>
lebesgue-&gt;finite
</title>
<path fill="none" stroke="black" d="M350.72,-209.6C336.77,-220.09 316.63,-235.21 299,-248.4 292.13,-253.54 284.68,-259.09 277.78,-264.23"></path> <polygon fill="black" stroke="black" points="275.35,-261.67 269.42,-270.45 279.53,-267.29 275.35,-261.67"></polygon> <text text-anchor="middle" x="322.5" y="-235.8" font-family="Times,serif" font-size="14.00">8</text> </g> </g>
</svg>
</div>
<figcaption class="figure-caption">Figure&nbsp;3: GraphViz 有向图</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="html-专用测试" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="html-专用测试"><span class="header-section-number">6</span> HTML 专用测试</h2>
<p>目前暂未处理 LaTeX/PDF 格式的代码高亮和 callout，本节测试内容只会在 HTML 输出中被渲染。（参见：<a href="https://quarto.org/docs/authoring/conditional.html">Quarto - Conditional Content</a>）</p>
<section id="代码块引用" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="代码块引用"><span class="header-section-number">6.1</span> 代码块、引用</h3>
<p>本节测试代码块和引用。</p>
<blockquote class="blockquote">
<p>这是一个引用块和一个非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</p>
</blockquote>
<p>Quarto 具有 5 种 callout 类型：<code>note</code>，<code>warning</code>，<code>important</code>，<code>tip</code>，和 <code>caution</code>。</p>
<p>下面是代码块。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"></span>
<span id="cb2-4">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb2-5">theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r</span>
<span id="cb2-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(</span>
<span id="cb2-7">  subplot_kw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'projection'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polar'</span>} </span>
<span id="cb2-8">)</span>
<span id="cb2-9">ax.plot(theta, r)</span>
<span id="cb2-10">ax.set_rticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb2-11">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-12">plt.show()</span></code></pre></div>
</section>
<section id="callouts" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="callouts"><span class="header-section-number">6.2</span> Callouts</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>普通的 note callout。</p>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>这是 warning callout 和一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</p>
</div>
</div>
<p>这是两个 callout 中间的一个段落。</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>这是 important callout。</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
有 caption 的 callout
</div>
</div>
<div class="callout-body-container callout-body">
<p>这是有 caption 的 callout。</p>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
可折叠的 callout
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>开启 collapse 的可折叠 caution callout。</p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-caution">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>simple 风格的 callout 和一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-caution no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>minimal 风格的 callout 和一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。</p>
</div>
</div>
</div>
</section>
</section>
<section id="文献引用测试" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="文献引用测试"><span class="header-section-number">7</span> 文献引用测试</h2>
<p>人脸识别是以人面部特征作为识别个体身份的一种个体生物特征识别方法<span class="citation" data-cites="define"><sup>[1]</sup></span>。……人脸识别的研究最早可追溯到上世纪 60 年代，Bledsoe and Chan 研究了编程计算机识别人脸的方法<span class="citation" data-cites="history"><sup>[2]</sup></span>。随后，萌芽期的人脸识别技术经历多轮蜕变，在发展中逐渐完善。然而，人脸识别的主要难点在于不同个体的人脸结构并无大异，而同一个体的人脸在不同表情、年龄、妆饰、光照等干扰因素下又往往差异显著<span class="citation" data-cites="technical"><sup>[3]</sup></span>，这要求人脸识别技术既要克服类内因素的干扰，同时又要加强类间差距的显著性，而早期人脸识别方法关注人脸几何特征，识别效果不尽人意。为此，以 Eigenfaces<span class="citation" data-cites="eigenfaces"><sup>[4]</sup></span> 为代表的子空间学习识别方法和 Gabor<span class="citation" data-cites="gabor"><sup>[5]</sup></span>、LBP<span class="citation" data-cites="lbp"><sup>[6]</sup></span> 等局部特征分析的滤波器提取方法在各自领域都有所突破。2014 年，应用新兴的深度卷积神经网络技术，DeepFace<span class="citation" data-cites="deepface"><sup>[7]</sup></span> 横空出世，以 97.35% 的 LFW 基准数据集识别准确率重塑了人脸识别领域的研究格局。随后，人脸识别技术迎来爆发式增长，并逐渐走进人们的日常生活之中。……个体层面，要加强公众的权利意识，塑造个人的“数字理性”<span class="citation" data-cites="guochunzhen"><sup>[8]</sup></span>。</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-line-spacing="2">
<div id="ref-define" class="csl-entry">
1. 全国信息安全标准化技术委员会. (2020). <em>《信息安全技术远程人脸识别系统技术要求》（GB/T38671-2020）</em>. <a href="https://std.samr.gov.cn/gb/search/gbDetailed?id=A47A713B767814ABE05397BE0A0ABB25" class="uri">https://std.samr.gov.cn/gb/search/gbDetailed?id=A47A713B767814ABE05397BE0A0ABB25</a>.
</div>
<div id="ref-history" class="csl-entry">
2. Bledsoe, W. W., &amp; Chan, H. (1965). A man-machine facial recognition system—some preliminary results. <em>Panoramic Research, Inc, Palo Alto, California., Technical Report PRI A</em>, <em>19</em>, 1965.
</div>
<div id="ref-technical" class="csl-entry">
3. 余璀璨, &amp; 李慧斌. (2021). 基于深度学习的人脸识别方法综述. <em>工程数学学报</em>, <em>38</em>(4), 19.
</div>
<div id="ref-eigenfaces" class="csl-entry">
4. Turk, M., &amp; Pentland, A. (n.d.). Eigenfaces for recognition. <em>Journal of Cognitive Neuroscience</em>, <em>3</em>(1), 71–86.
</div>
<div id="ref-gabor" class="csl-entry">
5. Liu, C., &amp; Wechsler, H. (2001). A gabor feature classifier for face recognition. <em>Proceedings Eighth IEEE International Conference on Computer Vision. ICCV 2001</em>, <em>2</em>, 270–275.
</div>
<div id="ref-lbp" class="csl-entry">
6. Ahonen, T., Hadid, A., &amp; Pietikäinen, M. (2004). Face recognition with local binary patterns. <em>European Conference on Computer Vision</em>, 469–481.
</div>
<div id="ref-deepface" class="csl-entry">
7. Taigman, Y., Yang, M., Ranzato, M., &amp; Wolf, L. (n.d.). Closing the gap to human-level performance in face verification. deepface. <em>Proceedings of the IEEE Computer Vision and Pattern Recognition (CVPR)</em>, <em>5</em>, 6.
</div>
<div id="ref-guochunzhen" class="csl-entry">
8. 郭春镇. (2020). 数字人权时代人脸识别技术应用的治理. <em>现代法学</em>, <em>42</em>(4), 18.
</div>
</div></section></div> ]]></description>
  <category>web</category>
  <category>LaTeX</category>
  <category>站点相关</category>
  <guid>https://blog.sun123zxy.top/posts/20221223-quarto-test/index.html</guid>
  <pubDate>Thu, 22 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>有限覆盖定理与实数理论</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20221213-cover/index.html</link>
  <description><![CDATA[ 



<section id="example-1" class="level2">
<h2 class="anchored" data-anchor-id="example-1">Example 1</h2>
<p>为更好的证明本题，先引入 Bolzano-Weierstrass 定理的一种等价表述.</p>
<div id="def-accu" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (数列聚点) </strong></span>对任意实数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D">，若实数 <img src="https://latex.codecogs.com/png.latex?a"> 满足：对 <img src="https://latex.codecogs.com/png.latex?a"> 的任意小邻域 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon)%20=%20(a%20-%20%5Cvarepsilon,%20a%20+%20%5Cvarepsilon)">，都有无穷个 <img src="https://latex.codecogs.com/png.latex?x_n"> 满足 <img src="https://latex.codecogs.com/png.latex?x_n%20%5Cin%20U(a,%20%5Cvarepsilon)">，则称 <img src="https://latex.codecogs.com/png.latex?a"> 是数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个聚点.</p>
</div>
<p>请注意，这里我们没有使用建立在集合之上的标准的聚点定义. 对数列单独定义聚点，是考虑到数列允许重复的元素出现，如此定义更容易展开后面的讨论.</p>
<div id="thm-accuequiv" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 </strong></span>实数 <img src="https://latex.codecogs.com/png.latex?a"> 是数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D%20%5Csubset%20%5Cmathbb%20R"> 的聚点的充要条件是：存在 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个收敛子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_%7Bn_k%7D%20%5C%7D">，其极限为 <img src="https://latex.codecogs.com/png.latex?a">.</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>先证充分性. 用定义写开 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bk%20%5Cto%20%5Cinfty%7D%20%5C%7B%20x_%7Bn_k%7D%20%5C%7D%20=%20a">，就有 <img src="https://latex.codecogs.com/png.latex?%0A(%5Cforall%20%5Cvarepsilon%20%3E%200)(%5Cexists%20K%20%5Cin%20%5Cmathbb%20N_+)(%5Cforall%20k%20%3E%20K)(%7Cx_%7Bn_k%7D%20-%20a%7C%20%3C%20%5Cvarepsilon)%0A"> 故确有无穷项 <img src="https://latex.codecogs.com/png.latex?x_n"> 落在任意小的 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon)"> 中，即 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个聚点，该方向得证.</p>
<p>下证必要性. 已知 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 有一聚点 <img src="https://latex.codecogs.com/png.latex?a">. 我们按如下方法构造子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_%7Bn_k%7D%20%5C%7D">：</p>
<ol type="1">
<li>当 <img src="https://latex.codecogs.com/png.latex?k=1">，取 <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_1%20=%201">，因为 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?E"> 的一个聚点，<img src="https://latex.codecogs.com/png.latex?%5Cexists%20n_1%20%5Cin%20%5Cmathbb%20N_+">，<img src="https://latex.codecogs.com/png.latex?%7Cx_%7Bn_1%7D%20-%20a%7C%20%3C%20%5Cvarepsilon">.</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?k%20%5Cgeqslant%202">，取 <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_k%20=%20%5Cfrac%201%20k">，因为 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?E"> 的一个聚点， <img src="https://latex.codecogs.com/png.latex?%5Cexists%20n_k%20%3E%20n_%7Bk-1%7D">，<img src="https://latex.codecogs.com/png.latex?%7Cx_%7Bn_k%7D%20-%20a%7C%20%3C%20%5Cvarepsilon">.</li>
</ol>
<p>这样，我们构造出 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_%7Bn_k%7D%20%5C%7D"> 满足 <img src="https://latex.codecogs.com/png.latex?%7Cx_%7Bn_k%7D%20-%20a%7C%20%3C%20%5Cvarepsilon_k%20=%20%5Cfrac%201%20k">. 因此其收敛于 <img src="https://latex.codecogs.com/png.latex?a">，该方向得证.</p>
</div>
<p>上述定理立刻证明了下定理与 Bolzano-Weierstrass 定理的等价性.</p>
<div id="thm-bwequiv" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2 (数列聚点定理) </strong></span>任意有界实数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 至少有一个聚点.</p>
</div>
<div id="exm-finite2bw" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>利用有限覆盖定理证明 Bolzano-Weierstrass 定理.</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>命题等价于用有限覆盖定理证明数列聚点定理. 用反证法. 假设一有界实数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 不存在聚点，设其有上界 <img src="https://latex.codecogs.com/png.latex?L"> 和下界 <img src="https://latex.codecogs.com/png.latex?l">. 对任意 <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Bl,L%5D">，它都不是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的聚点，因此总存在一个 <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon(a)%20%3E%200">，使得只有有限个 <img src="https://latex.codecogs.com/png.latex?x_n"> 落入 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon(x_0))">. 这样，构造开区间族 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathscr%7BF%7D%20=%20%5C%7B%20U(a,%20%5Cvarepsilon(a))%20%5Cmid%20a%20%5Cin%20%5Bl,L%5D%20%5C%7D%0A"> 它显然是闭区间 <img src="https://latex.codecogs.com/png.latex?%5Bl,L%5D"> 的一个开覆盖. 由有限覆盖定理，只需取其中有限个开区间就可以覆盖住 <img src="https://latex.codecogs.com/png.latex?%5Bl,L%5D">，因此覆盖 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 也只需要有限个开区间. 然而由前述构造，每一个开区间中也只包含有限个 <img src="https://latex.codecogs.com/png.latex?x_n">，因此数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 只有有限项——这显然是荒谬的. 故 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 必有聚点，原命题得证.</p>
</div>
</section>
<section id="example-2" class="level2">
<h2 class="anchored" data-anchor-id="example-2">Example 2</h2>
<div id="thm-lebesgue" class="theorem">
<p><span class="theorem-title"><strong>Theorem 3 (Lebesgue 覆盖定理) </strong></span>设开区间族 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 是闭区间 <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D"> 的一个开覆盖，则必存在 <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%3E%200">，使得只要区间 <img src="https://latex.codecogs.com/png.latex?%5COmega%20%5Csubset%20%5Ba,%20b%5D"> 且 <img src="https://latex.codecogs.com/png.latex?%5COmega"> 的长度 <img src="https://latex.codecogs.com/png.latex?%7C%5COmega%7C%20%3C%20%5Csigma">，就必有 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的一个开区间包含 <img src="https://latex.codecogs.com/png.latex?%5COmega">. 其中 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 称为 Lebesgue 数.</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>不妨只证 <img src="https://latex.codecogs.com/png.latex?%5COmega"> 是闭区间这种最强的情况.</p>
<p>用反证法. 假设命题不成立，则对任意 <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%3E%200">，都存在一个长度小于 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 的闭区间 <img src="https://latex.codecogs.com/png.latex?%5COmega%20%5Csubset%20%5Ba,b%5D">，它不被任何 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的开区间包含. 因此，对所有自然数 <img src="https://latex.codecogs.com/png.latex?n">，可取 <img src="https://latex.codecogs.com/png.latex?%5Csigma_n%20=%20%5Cfrac%201%20n">，按上述方法就可构造出一列闭区间 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_n%20%5C%7D%20=%20%5C%7B%20%5Ba_n,%20b_n%5D%20%5C%7D%20%5Csubset%20%5Ba,b%5D"> 其中每一个闭区间都不被任何 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的开区间包含，且区间长度 <img src="https://latex.codecogs.com/png.latex?%7C%5COmega_n%7C%20%3C%20%5Csigma_n%20=%20%5Cfrac%201%20n">，即 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%7C%5COmega_n%7C%20=%200">.</p>
<p>因为 <img src="https://latex.codecogs.com/png.latex?%5COmega_n%20%5Csubset%20%5Ba,b%5D">，<img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_n%20%5C%7D"> 有界，由 Bolzano-Weierstrass 定理，其存在一收敛子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_%7Bn_k%7D%20%5C%7D">，设其极限为 <img src="https://latex.codecogs.com/png.latex?x_0">，极限保序性表明 <img src="https://latex.codecogs.com/png.latex?x_0%20%5Cin%20%5Ba,b%5D">. 注意到 <img src="https://latex.codecogs.com/png.latex?b_%7Bn_k%7D%20=%20a_%7Bn_k%7D%20+%20%7C%5COmega_%7Bn_k%7D%7C">，两端取 <img src="https://latex.codecogs.com/png.latex?k%20%5Cto%20%5Cinfty"> 即得 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bk%20%5Cto%20%5Cinfty%7D%20b_%7Bn_k%7D%20=%20x_0">. 综上，我们说明了 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_%7Bn_k%7D%20%5C%7D"> 收缩于 <img src="https://latex.codecogs.com/png.latex?x_0">.</p>
<p>但，因为 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 是闭区间 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的一个开覆盖，故总存在一个开区间 <img src="https://latex.codecogs.com/png.latex?I_%7Bx_0%7D%20=%20(a_0,%20b_0)%20%5Cin%20%5Cmathscr%20F"> 使得 <img src="https://latex.codecogs.com/png.latex?x_0%20%5Cin%20I_%7Bx_0%7D">，而 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_%7Bn_k%7D%20%5C%7D"> 又收缩于 <img src="https://latex.codecogs.com/png.latex?x_0">，故存在 <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5Cmathbb%20N">，<img src="https://latex.codecogs.com/png.latex?%5COmega_%7Bn_k%7D%20%5Csubset%20I_%7Bx_0%7D%20%5Cin%20%5Cmathscr%20F">，这与我们构造 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_%7Bn_k%7D%20%5C%7D"> 的方法矛盾. 故原命题成立.</p>
</div>
<div class="remark proof">
<p><span class="proof-title"><em>Remark</em>. </span>证明过程与用 Bolzano-Weierstrass 定理证明闭区间一致连续性定理类似.</p>
</div>
<div id="exm-lebesgue2bw" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 </strong></span>用 Lebesgue 覆盖定理证明有限覆盖定理.</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>若 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 是覆盖 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的开覆盖 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 的勒贝格数，令 <img src="https://latex.codecogs.com/png.latex?N%20=%20%5Clceil%20%5Cfrac%7B2(b-a)%7D%7B%5Csigma%7D%20%5Crceil">，<img src="https://latex.codecogs.com/png.latex?L%20=%20%5Cfrac%20%7Bb-a%7D%7BN%7D%20%5Cleqslant%20%5Cfrac%20%5Csigma%202%20%3C%20%5Csigma">. 由 Lebesgue 覆盖定理，任意长度为 <img src="https://latex.codecogs.com/png.latex?L"> 的 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 内闭区间都包含于某个 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的开区间. 因此对 <img src="https://latex.codecogs.com/png.latex?n%20=%201,2,%5Cdots,N">，令 <img src="https://latex.codecogs.com/png.latex?%5COmega_n%20=%20%5Cleft%5B%20a%20+%20(n-1)L,%20a%20+%20nL%20%5Cright%5D">，总存在一个 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中开区间 <img src="https://latex.codecogs.com/png.latex?I_n"> 满足 <img src="https://latex.codecogs.com/png.latex?%5COmega_n%20%5Csubset%20I_n">. 因为显然 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_n%20%5C%7D_%7Bn=1%7D%5EN"> 是 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的一个覆盖，故 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20I_n%20%5C%7D_%7Bn=1%7D%5EN%20%5Csubset%20%5Cmathscr%20F"> 也是 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的覆盖. 这样，我们就成功构造出了一个 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 的有限子覆盖 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20I_n%20%5C%7D_%7Bn=1%7D%5EN">，命题得证.</p>
</div>
<div class="remark proof">
<p><span class="proof-title"><em>Remark</em>. </span>在处理区间问题时，Lebsegue 覆盖定理很多时候比有限覆盖定理更好用. 例如处理闭区间一致连续性定理时，“落入两个有交点的相邻的这样的区间”<span class="citation" data-cites="lizhong"><sup>[1]</sup></span>这种神乎其技的操作就可以省去了. （这种操作的严格叙述是：把单点连续性要求的区间半径改成 <img src="https://latex.codecogs.com/png.latex?2%20%5Cdelta_x">，但构造开覆盖还是用半径为 <img src="https://latex.codecogs.com/png.latex?%5Cdelta_x"> 的区间，这样可以有 <img src="https://latex.codecogs.com/png.latex?%7Cx_2%20-%20x%7C%20%5Cleqslant%20%7Cx_2%20-%20x_1%7C%20+%20%7Cx_1%20-%20x%7C%20%5Cleqslant%20%5Cdelta_%7Bm%7D%20+%20%5Cdelta_%7Bx%7D%20%5Cleqslant%202%20%5Cdelta_%7Bx%7D">，能把两个点放在同一个区间内了. 详细可参考 <a href="https://www.zhihu.com/question/56393706/answer/298562084" class="uri">https://www.zhihu.com/question/56393706/answer/298562084</a>. 事实上，Lebesgue 覆盖定理也可以用类似的方法证明.）</p>
</div>
<p>作为小结，下图展现了刚刚介绍的几个定理在整个实数完备性等价定理体系中的地位.</p>
<div class="cell" data-fig-width="6.25" data-fig-height="2.5">
<div class="cell-output-display">
<div id="fig-real" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div>
<svg width="600" height="240" viewbox="0.00 0.00 808.39 310.40" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 306.4)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-306.4 804.39,-306.4 804.39,4 -4,4"></polygon> <!-- sup --> <g id="node1" class="node">
<title>
sup
</title>
<ellipse fill="none" stroke="black" cx="40.01" cy="-106.8" rx="40.01" ry="18"></ellipse> <text text-anchor="middle" x="40.01" y="-102.6" font-family="Times,serif" font-size="14.00">确界原理</text> </g> <!-- mono --> <g id="node2" class="node">
<title>
mono
</title>
<ellipse fill="none" stroke="black" cx="170.01" cy="-106.8" rx="54.49" ry="18"></ellipse> <text text-anchor="middle" x="170.01" y="-102.6" font-family="Times,serif" font-size="14.00">单调有界定理</text> </g> <!-- sup&#45;&gt;mono --> <g id="edge1" class="edge">
<title>
sup-&gt;mono
</title>
<path fill="none" stroke="black" d="M80.12,-106.8C88.44,-106.8 96.77,-106.8 105.09,-106.8"></path> <polygon fill="black" stroke="black" points="105.24,-110.3 115.24,-106.8 105.23,-103.3 105.24,-110.3"></polygon> </g> <!-- nested --> <g id="node3" class="node">
<title>
nested
</title>
<ellipse fill="none" stroke="black" cx="314.01" cy="-106.8" rx="54.49" ry="18"></ellipse> <text text-anchor="middle" x="314.01" y="-102.6" font-family="Times,serif" font-size="14.00">闭区间套定理</text> </g> <!-- mono&#45;&gt;nested --> <g id="edge2" class="edge">
<title>
mono-&gt;nested
</title>
<path fill="none" stroke="black" d="M224.57,-106.8C232.85,-106.8 241.13,-106.8 249.41,-106.8"></path> <polygon fill="black" stroke="black" points="249.51,-110.3 259.51,-106.8 249.51,-103.3 249.51,-110.3"></polygon> </g> <!-- nested&#45;&gt;sup --> <g id="edge6" class="edge">
<title>
nested-&gt;sup
</title>
<path fill="none" stroke="black" d="M288.13,-90.8C259.06,-74.72 210.22,-53.33 166.51,-61 135.43,-66.45 101.93,-78.9 77.22,-89.45"></path> <polygon fill="black" stroke="black" points="75.64,-86.32 67.87,-93.52 78.43,-92.73 75.64,-86.32"></polygon> <text text-anchor="middle" x="177.01" y="-58.2" font-family="Times,serif" font-size="14.00">构造</text> </g> <!-- bw --> <g id="node4" class="node">
<title>
bw
</title>
<ellipse fill="none" stroke="black" cx="692.01" cy="-106.8" rx="108.26" ry="18"></ellipse> <text text-anchor="middle" x="692.01" y="-102.6" font-family="Times,serif" font-size="14.00">Bolzano-Weierstrass 定理</text> </g> <!-- nested&#45;&gt;bw --> <!-- accu --> <g id="node6" class="node">
<title>
accu
</title>
<ellipse fill="none" stroke="black" cx="476.01" cy="-106.8" rx="68.96" ry="18"></ellipse> <text text-anchor="middle" x="476.01" y="-102.6" font-family="Times,serif" font-size="14.00">（数列）聚点定理</text> </g> <!-- nested&#45;&gt;accu --> <g id="edge8" class="edge">
<title>
nested-&gt;accu
</title>
<path fill="none" stroke="black" d="M368.85,-106.8C377.82,-106.8 387.26,-106.8 396.68,-106.8"></path> <polygon fill="black" stroke="black" points="396.86,-110.3 406.86,-106.8 396.86,-103.3 396.86,-110.3"></polygon> <text text-anchor="middle" x="387.76" y="-91.2" font-family="Times,serif" font-size="14.00">构造</text> </g> <!-- finite --> <g id="node7" class="node">
<title>
finite
</title>
<ellipse fill="none" stroke="black" cx="314.01" cy="-284.4" rx="54.49" ry="18"></ellipse> <text text-anchor="middle" x="314.01" y="-280.2" font-family="Times,serif" font-size="14.00">有限覆盖定理</text> </g> <!-- nested&#45;&gt;finite --> <g id="edge7" class="edge">
<title>
nested-&gt;finite
</title>
<path fill="none" stroke="black" d="M314.01,-135.4C314.01,-168.33 314.01,-223.05 314.01,-255.92"></path> <polygon fill="black" stroke="black" points="317.51,-134.96 314.01,-124.96 310.51,-134.96 317.51,-134.96"></polygon> <polygon fill="black" stroke="black" points="310.51,-256.17 314.01,-266.17 317.51,-256.17 310.51,-256.17"></polygon> <text text-anchor="middle" x="324.51" y="-191.4" font-family="Times,serif" font-size="14.00">反证</text> </g> <!-- cauchy --> <g id="node5" class="node">
<title>
cauchy
</title>
<ellipse fill="none" stroke="black" cx="364.01" cy="-18" rx="71.84" ry="18"></ellipse> <text text-anchor="middle" x="364.01" y="-13.8" font-family="Times,serif" font-size="14.00">Cauchy 收敛原理</text> </g> <!-- bw&#45;&gt;cauchy --> <g id="edge4" class="edge">
<title>
bw-&gt;cauchy
</title>
<path fill="none" stroke="black" d="M636.86,-91.21C577.09,-75.39 482.17,-50.27 421.5,-34.22"></path> <polygon fill="black" stroke="black" points="422.26,-30.8 411.7,-31.62 420.47,-37.56 422.26,-30.8"></polygon> </g> <!-- lebesgue --> <g id="node8" class="node">
<title>
lebesgue
</title>
<ellipse fill="none" stroke="black" cx="616.01" cy="-195.6" rx="79.35" ry="18"></ellipse> <text text-anchor="middle" x="616.01" y="-191.4" font-family="Times,serif" font-size="14.00">Lebesgue 覆盖定理</text> </g> <!-- bw&#45;&gt;lebesgue --> <g id="edge12" class="edge">
<title>
bw-&gt;lebesgue
</title>
<path fill="none" stroke="black" d="M676.99,-124.95C665.68,-137.87 650.01,-155.77 637.38,-170.18"></path> <polygon fill="black" stroke="black" points="634.69,-167.95 630.73,-177.78 639.95,-172.56 634.69,-167.95"></polygon> <text text-anchor="middle" x="670.51" y="-147" font-family="Times,serif" font-size="14.00">反证</text> </g> <!-- cauchy&#45;&gt;mono --> <g id="edge5" class="edge">
<title>
cauchy-&gt;mono
</title>
<path fill="none" stroke="black" d="M330.22,-34.12C296.97,-48.99 246.19,-71.71 210.74,-87.58"></path> <polygon fill="black" stroke="black" points="208.87,-84.58 201.17,-91.86 211.73,-90.97 208.87,-84.58"></polygon> <text text-anchor="middle" x="295.51" y="-58.2" font-family="Times,serif" font-size="14.00">反证</text> </g> <!-- accu&#45;&gt;bw --> <g id="edge11" class="edge">
<title>
accu-&gt;bw
</title>
<path fill="none" stroke="black" d="M555.42,-106.8C561.27,-106.8 567.25,-106.8 573.27,-106.8"></path> <polygon fill="black" stroke="black" points="555.24,-103.3 545.24,-106.8 555.24,-110.3 555.24,-103.3"></polygon> <polygon fill="black" stroke="black" points="573.43,-110.3 583.43,-106.8 573.43,-103.3 573.43,-110.3"></polygon> <text text-anchor="middle" x="564.31" y="-91.2" font-family="Times,serif" font-size="14.00">构造</text> </g> <!-- finite&#45;&gt;sup --> <g id="edge14" class="edge">
<title>
finite-&gt;sup
</title>
<path fill="none" stroke="black" d="M289.69,-268.25C267.16,-254.18 232.74,-232.6 203.01,-213.6 156.62,-183.96 103.15,-149.13 70.47,-127.76"></path> <polygon fill="black" stroke="black" points="72.11,-124.65 61.83,-122.1 68.28,-130.51 72.11,-124.65"></polygon> <text text-anchor="middle" x="213.51" y="-191.4" font-family="Times,serif" font-size="14.00">反证</text> </g> <!-- finite&#45;&gt;mono --> <g id="edge10" class="edge">
<title>
finite-&gt;mono
</title>
<path fill="none" stroke="black" d="M300.39,-266.8C274.93,-235.75 220,-168.76 190.21,-132.43"></path> <polygon fill="black" stroke="black" points="192.6,-129.83 183.55,-124.32 187.19,-134.27 192.6,-129.83"></polygon> <text text-anchor="middle" x="267.51" y="-191.4" font-family="Times,serif" font-size="14.00">反证</text> </g> <!-- finite&#45;&gt;accu --> <g id="edge9" class="edge">
<title>
finite-&gt;accu
</title>
<path fill="none" stroke="black" d="M329.26,-266.87C357.9,-235.82 419.87,-168.65 453.38,-132.32"></path> <polygon fill="black" stroke="black" points="456.27,-134.36 460.47,-124.64 451.12,-129.61 456.27,-134.36"></polygon> <text text-anchor="middle" x="421.51" y="-191.4" font-family="Times,serif" font-size="14.00">反证</text> </g> <!-- lebesgue&#45;&gt;finite --> <g id="edge13" class="edge">
<title>
lebesgue-&gt;finite
</title>
<path fill="none" stroke="black" d="M569.29,-210.18C533.18,-220.66 481.94,-235.51 437.01,-248.4 412.84,-255.34 385.99,-262.98 363.55,-269.36"></path> <polygon fill="black" stroke="black" points="362.57,-266 353.9,-272.1 364.48,-272.73 362.57,-266"></polygon> <text text-anchor="middle" x="501.51" y="-235.8" font-family="Times,serif" font-size="14.00">构造</text> </g> </g>
</svg>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: 实数完备性等价定理关系图</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="example-3" class="level2">
<h2 class="anchored" data-anchor-id="example-3">Example 3</h2>
<div id="thm-ulaccu" class="theorem">
<p><span class="theorem-title"><strong>Theorem 4 </strong></span>设数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 有界，其上极限 <img src="https://latex.codecogs.com/png.latex?%5Cvarlimsup_%7Bn%20%5Cto%20%5Cinfty%7D%20x_n%20=%20L">，下极限 <img src="https://latex.codecogs.com/png.latex?%5Cvarliminf_%7Bn%20%5Cto%20%5Cinfty%7D%20x_n%20=%20l">，则 <img src="https://latex.codecogs.com/png.latex?L"> 是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的最大聚点，<img src="https://latex.codecogs.com/png.latex?l"> 是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的最小聚点.</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>Theorem&nbsp;1 中，我们已经知道，一个数列的收敛子列的极限也是该数列的一个聚点. 结合上下极限的子列式定义即可证明上述定理.</p>
</div>
<div id="exm-ullim" class="theorem example">
<p><span class="theorem-title"><strong>Example 3 </strong></span>设数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 有界且 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D(x_%7Bn+1%7D%20%E2%88%92%20x_n)%20=%200">，分别记 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的上下极限为 <img src="https://latex.codecogs.com/png.latex?L"> 和 <img src="https://latex.codecogs.com/png.latex?l">. 证明 <img src="https://latex.codecogs.com/png.latex?%5Bl,%20L%5D"> 上的任意点可作为 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 某个子列的极限.</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>反证. 假设 <img src="https://latex.codecogs.com/png.latex?%5Bl,%20L%5D"> 上有一点 <img src="https://latex.codecogs.com/png.latex?a"> 不是任何 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的收敛子列的极限，则根据 Theorem&nbsp;1，<img src="https://latex.codecogs.com/png.latex?a"> 不是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的聚点，即存在 <img src="https://latex.codecogs.com/png.latex?a"> 的一个邻域 <img src="https://latex.codecogs.com/png.latex?U(a,%5Cvarepsilon)">，使得只有有限个 <img src="https://latex.codecogs.com/png.latex?x_n"> 落入该邻域，换句话说，存在某个 <img src="https://latex.codecogs.com/png.latex?N%20%5Cin%20%5Cmathbb%20N_+">，当 <img src="https://latex.codecogs.com/png.latex?n%3EN"> 时，就有 <img src="https://latex.codecogs.com/png.latex?x_n%20%5Cnotin%20U(a,%5Cvarepsilon)">.</p>
<p>又，考虑到 Theorem&nbsp;4 表明上下极限 <img src="https://latex.codecogs.com/png.latex?L"> 和 <img src="https://latex.codecogs.com/png.latex?l"> 都是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的聚点，<img src="https://latex.codecogs.com/png.latex?L,l%20%5Cnotin%20U(a,%5Cvarepsilon)"> 显然成立，且第 <img src="https://latex.codecogs.com/png.latex?N"> 项后的 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 完全由满足 <img src="https://latex.codecogs.com/png.latex?x_n%20%3E%20a+%5Cvarepsilon"> 和 <img src="https://latex.codecogs.com/png.latex?x_n%20%3C%20a-%5Cvarepsilon"> 的两种 <img src="https://latex.codecogs.com/png.latex?x_n"> 构成，且它们均有无穷多项. 这样，对于任意的 <img src="https://latex.codecogs.com/png.latex?M%3EN">，总可以找到一个 <img src="https://latex.codecogs.com/png.latex?m%20%3E%20M"> 使得 <img src="https://latex.codecogs.com/png.latex?x_m"> 和 <img src="https://latex.codecogs.com/png.latex?x_%7Bm+1%7D"> 分属 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon)"> 的两侧，故 <img src="https://latex.codecogs.com/png.latex?%7Cx_m%20-%20x_%7Bm+1%7D%7C%20%5Cgeqslant%202%20%5Cvarepsilon">，这就与条件 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D(x_%7Bn+1%7D%20%E2%88%92%20x_n)%20=%200"> 产生矛盾. 故不存在这样的 <img src="https://latex.codecogs.com/png.latex?a">，定理得证.</p>
</div>
</section>


<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Acknowledgments</h2><div class="quarto-appendix-contents">

<p>感谢史老师主持研讨课并指出讲稿的多处错误，特别是原来聚点定理的证明中数列元素可重的 bug. 史老师还提供了标准聚点定义的另一种叙述.</p>



</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-line-spacing="2">
<div id="ref-lizhong" class="csl-entry">
1. 李忠, &amp; 方丽萍. (2008). <em>数学分析教程</em> (pp. 257–258). 高等教育出版社.
</div>
</div></section></div> ]]></description>
  <category>数学</category>
  <category>题解</category>
  <guid>https://blog.sun123zxy.top/posts/20221213-cover/index.html</guid>
  <pubDate>Mon, 12 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>关于泰勒展开拉格朗日余项中值点的渐进性</title>
  <link>https://blog.sun123zxy.top/posts/20221110-taylor/index.html</link>
  <description><![CDATA[ 



<p>之前学拉格朗日中值定理的时候做到一道涉及到特定函数中值渐进性的题，感觉似乎有一般的结论，推广了一下就是这样了。</p>
<p>感谢刘导拯救 <img src="https://latex.codecogs.com/png.latex?n=1"> 都不会证的我，感谢王佬指出这是中科大《数学分析教程》第三版问题 4.3.1。</p>
<blockquote class="blockquote">
<p>设函数 <img src="https://latex.codecogs.com/png.latex?f(x)"> 在区间 <img src="https://latex.codecogs.com/png.latex?I"> 上有 <img src="https://latex.codecogs.com/png.latex?n+1"> 阶导数，<img src="https://latex.codecogs.com/png.latex?x_0%20%5Cin%20I">，<img src="https://latex.codecogs.com/png.latex?f%5E%7B(n+1)%7D(x_0)%20%5Cnot%20=%200">；定义函数 <img src="https://latex.codecogs.com/png.latex?T_n(x)"> 为 <img src="https://latex.codecogs.com/png.latex?f(x)"> 在 <img src="https://latex.codecogs.com/png.latex?x=x_0"> 处的 <img src="https://latex.codecogs.com/png.latex?n"> 阶泰勒多项式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT(x)%20=%20T_n(x_0+h)%20=%20%5Csum_%7Bk=0%7D%5En%20%5Cfrac%7Bf%5E%7B(k)%7D(x_0)%7D%7Bk!%7D%20h%5Ek%0A"></p>
<p>求证： <img src="https://latex.codecogs.com/png.latex?f(x)"> 在 <img src="https://latex.codecogs.com/png.latex?x=x_0"> 处带拉格朗日余项的 <img src="https://latex.codecogs.com/png.latex?n-1"> 阶泰勒展开</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20f(x_0+h)%20=%20T_%7Bn-1%7D(x_0+h)%20+%20%5Cfrac%7Bf%5E%7B(n)%7D(x_0+%5Ctheta%20h)%7D%7Bn!%7D%20h%5En%20%5Cqquad%20%5Ctheta%20%5Cin%20(0,1)%0A"></p>
<p>中的 <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> 满足：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bh%20%5Cto%200%7D%20%5Ctheta%20=%20%5Cfrac%201%20%7Bn+1%7D%0A"></p>
</blockquote>
<p>非常漂亮的结论啊。</p>
<p>理一下思路。关键点在于怎么构造出 <img src="https://latex.codecogs.com/png.latex?%5Ctheta">，得想办法把它从 <img src="https://latex.codecogs.com/png.latex?f%5E%7B(n)%7D(x_0+%5Ctheta%20h)"> 这样的形式中拿出来。或许我们能想到构造</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bf%5E%7B(n)%7D(x_0+%5Ctheta%20h)%20-%20f%5E%7B(n)%7D(x_0)%7D%7B%5Ctheta%20h%7D%20%5Cto%20f%5E%7B(n+1)%7D(x_0)%20%5Cqquad%20(h%20%5Cto%200)%0A"></p>
<p>这样 <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> 就可以拿出来单独求极限了。<img src="https://latex.codecogs.com/png.latex?f%5E%7B(n)%7D(x_0+%5Ctheta%20h)"> 可以从 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的 <img src="https://latex.codecogs.com/png.latex?n-1"> 阶泰勒展开的拉格朗日余项中得到，而 <img src="https://latex.codecogs.com/png.latex?f%5E%7B(n)%7D(x_0)"> 和 <img src="https://latex.codecogs.com/png.latex?f%5E%7B(n+1)%7D(x_0)"> 也可以从 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的 <img src="https://latex.codecogs.com/png.latex?n+1"> 阶带皮亚诺余项的泰勒展开中拿到。于是，下面的证明就十分自然了。</p>
<p><strong>证明：</strong> 考虑 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的 <img src="https://latex.codecogs.com/png.latex?n-1"> 阶带拉格朗日余项的泰勒展开</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x_0%20+%20h)%20=%20T_%7Bn-1%7D(x_0%20+%20h)%20+%20%5Cfrac%7Bf%5E%7B(n)%7D(x_0+%5Ctheta%20h)%7D%7Bn!%7D%20h%5En%0A"></p>
<p>和 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的 <img src="https://latex.codecogs.com/png.latex?n+1"> 阶带皮亚诺余项的泰勒展开</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x_0%20+%20h)%20=%20T_%7Bn+1%7D(x_0%20+%20h)%20+%20o(h%5E%7Bn+1%7D)%20=%20T_%7Bn-1%7D(x_0%20+%20h)%20+%20%5Cfrac%7Bf%5E%7B(n)%7D(x_0)%7D%7Bn!%7D%20h%5En%20+%20%5Cfrac%7Bf%5E%7B(n+1)%7D(x_0)%7D%7B(n+1)!%7D%20h%5E%7Bn+1%7D%20+%20o(h%5E%7Bn+1%7D)%0A"></p>
<p>两式相减得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bf%5E%7B(n)%7D(x_0+%5Ctheta%20h)%7D%7Bn!%7D%20h%5En%20=%20%5Cfrac%7Bf%5E%7B(n)%7D(x_0)%7D%7Bn!%7D%20h%5En%20+%20%5Cfrac%7Bf%5E%7B(n+1)%7D(x_0)%7D%7B(n+1)!%7D%20h%5E%7Bn+1%7D%20+%20o(h%5E%7Bn+1%7D)%0A"></p>
<p>移项整理得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctheta%20%5Ccdot%20%5Cfrac%7Bf%5E%7B(n)%7D(x_0+%5Ctheta%20h)-f%5E%7B(n)%7D(x_0)%7D%7B%5Ctheta%20h%7D%20=%20%5Cfrac%7Bf%5E%7B(n+1)%7D(x_0)%7D%7Bn+1%7D%20+%20n!%20%5Ccdot%20%5Cfrac%20%7Bo(h%5E%7Bn+1%7D)%7D%7Bh%5E%7Bn+1%7D%7D%0A"></p>
<p>两侧同时取 <img src="https://latex.codecogs.com/png.latex?h%20%5Cto%200"> 即得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bh%20%5Cto%200%7D%20%5Ctheta%20%5Ccdot%20f%5E%7B(n+1)%7D(x_0)%20=%20%5Cfrac%7Bf%5E%7B(n+1)%7D(x_0)%7D%7Bn+1%7D%0A"></p>
<p>于是由 <img src="https://latex.codecogs.com/png.latex?f%5E%7B(n+1)%7D(x_0)%20%5Cnot%20=%200">，我们有</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bh%20%5Cto%200%7D%20%5Ctheta%20=%20%5Cfrac%7B1%7D%7Bn+1%7D%0A"></p>
<p>得证。</p>
<hr>
<p>备考：</p>
<pre><code>Azpeitia A G. On the Lagrange remainder of the Taylor formula[J]. The American Mathematical Monthly, 1982, 89(5): 311-312.
Abel U. On the Lagrange remainder of the Taylor formula[J]. The American mathematical monthly, 2003, 110(7): 627-633.</code></pre>
<p>这两篇论文似乎对这种渐进性有更深入的讨论。</p>



 ]]></description>
  <category>数学</category>
  <category>题解</category>
  <guid>https://blog.sun123zxy.top/posts/20221110-taylor/index.html</guid>
  <pubDate>Tue, 01 Nov 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>关于 Python 的 import</title>
  <link>https://blog.sun123zxy.top/posts/20220714-import/index.html</link>
  <description><![CDATA[ 



<p>好久以前就被 Python 的相对与绝对导入所困扰。去年粗浅探究后自以为完全理解，近来又因 <code>sys.path[0]</code> 和 <code>os.getcwd()</code> 的不一致而刷新了认知…</p>
<p>Python 官方文档 <a href="https://docs.python.org/3/reference/import.html">5. The import system — Python 3.10.5 documentation</a> 当然是最好的学习指南，但全部看完对我来说还是有点难度。这里只选择一些要点讨论。</p>
<section id="from-import" class="level2">
<h2 class="anchored" data-anchor-id="from-import">from import</h2>
<p><code>import A</code>、<code>import A as B</code>、<code>from A import B</code> 结构中，<code>A</code> 最小只能到 module。因此，只有使用 <code>from import</code> 结构才可以单独获取 module 里的属性。另外，相对引用必须使用 <code>from import</code> 结构。</p>
<p><code>from module import *</code> 将导入 <code>module</code> 中的所有成员（有单双下划线前导的成员除外）。对于 package 可在 <code>__init__.py</code> 中定义 <code>__all__ = ["module", "module", ...]</code> 来手动控制的实际导入内容。</p>
</section>
<section id="package-与-__init__.py" class="level2">
<h2 class="anchored" data-anchor-id="package-与-__init__.py">Package 与 __init__.py</h2>
<p>Python 3.3 以后的 package 不再硬性需要 <code>__init__.py</code>，普通文件夹等同于 <code>__init__.py</code> 留空的 namespace package。（关于 regular package 和 namespace package 的区别，参见 <a href="https://docs.python.org/3/reference/import.html#regular-packages">5. The import system — Python 3.10.5 documentation</a>）</p>
<p><code>__init__.py</code> 的作用在于当我们直接导入一个 package 的时候，实际上是执行了 <code>__init__.py</code>。换句话说，直接导入一个 package 就是把它看做一个逻辑写在 <code>__init__.py</code> 里的 module。</p>
<p>需要注意的是，对于形如 <code>A.B.C</code> 的导入，<code>A</code>、<code>A.B</code>、<code>A.B.C</code> 对应的 <code>__init__.py</code> 都会被执行。也就是说，只要导入路径经过该 package，该 package 的 <code>__init__.py</code> 就会被执行。</p>
</section>
<section id="submodules" class="level2">
<h2 class="anchored" data-anchor-id="submodules">Submodules</h2>
<blockquote class="blockquote">
<p>When a submodule is loaded using any mechanism (e.g.&nbsp;<code>importlib</code> APIs, the <code>import</code> or <code>import-from</code> statements, or built-in <code>__import__()</code>) a binding is placed in the parent module’s namespace to the submodule object. For example, if package <code>spam</code> has a submodule <code>foo</code>, after importing <code>spam.foo</code>, <code>spam</code> will have an attribute <code>foo</code> which is bound to the submodule.</p>
<p>…</p>
<p>Given Python’s familiar name binding rules this might seem surprising, but it’s actually a fundamental feature of the import system. The invariant holding is that if you have <code>sys.modules['spam']</code> and <code>sys.modules['spam.foo']</code> (as you would after the above import), the latter must appear as the <code>foo</code> attribute of the former.</p>
<p>— <a href="https://docs.python.org/3/reference/import.html#submodules">5. The import system — Python 3.10.5 documentation</a></p>
</blockquote>
<p>这是说，import 进来的 module 会被挂载到本 module 上作为其属性。</p>
<p>这个性质可以弄出来很多看上去很奇怪的玩意儿，比如说自己导入自己后可以 <code>me.me.me.me...</code> 无限嵌套之类的…</p>
<hr>
<p>另外，对于形如 <code>import A.B.C</code> 的导入，<code>A</code>、<code>A.B</code>、<code>A.B.C</code> 都会被挂载到本 module 上。然而，<code>from A.B import C</code> 却只会挂载 <code>C</code>，而 <code>import A.B.C as D</code> 也只会挂载 <code>D</code> ，即使 <code>A</code>、<code>A.B</code> 都被执行且都在 <code>sys.modules</code> 里。</p>
</section>
<section id="sys.path" class="level2">
<h2 class="anchored" data-anchor-id="sys.path">sys.path</h2>
<blockquote class="blockquote">
<p>A list of strings that specifies the search path for modules. Initialized from the environment variable <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH"><code>PYTHONPATH</code></a>, plus an installation-dependent default.</p>
<p>As initialized upon program startup, the first item of this list, <code>path[0]</code>, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g.&nbsp;if the interpreter is invoked interactively or if the script is read from standard input), <code>path[0]</code> is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted <em>before</em> the entries inserted as a result of <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH"><code>PYTHONPATH</code></a>.</p>
<p>A program is free to modify this list for its own purposes. Only strings and bytes should be added to <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a>; all other data types are ignored during import.</p>
<p>— <a href="https://docs.python.org/3/library/sys.html#sys.path">sys — System-specific parameters and functions — Python 3.10.5 documentation</a></p>
</blockquote>
<p><code>sys.path</code> 是 Python 搜索 module 的基准目录（即绝对导入）。其由环境变量 <code>PYTHONPATH</code> 和一些默认路径（和安装环境有关，参见 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME">PYTHONHOME</a>）组成，而在运行 script 时，<strong>script 的所在目录会被临时加入 <code>sys.path[0]</code> 中</strong>。如果运行的并不是 script（例如是交互式运行或从 stdin 中读取脚本代码），<strong><code>sys.path[0]</code> 则被设置为空字符串，代表当前工作目录</strong>。</p>
<p><code>sys.path</code> 有优先级，排在前面的优先级高。</p>
<hr>
<p>需要特别注意的是，<strong>script 的所在目录不是当前工作目录</strong>。例如，在 <code>D:\test</code> 下执行</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> path/to/file.py</span></code></pre></div>
<p>时，<code>sys.path[0]</code> 为 <code>D:\test\path\to\file.py</code>，而当前工作目录则是 <code>D:\test</code>（也即 <code>os.getcwd()</code>）。</p>
<p>当前工作目录是 Python 寻找其他文件时的基准路径，而所有绝对导入操作都只与 <code>sys.path</code> 有关，两者是完全不同的。</p>
<p><code>python -m</code> 的情况稍有不同，参见后文。</p>
</section>
<section id="python--m" class="level2">
<h2 class="anchored" data-anchor-id="python--m">python -m</h2>
<blockquote class="blockquote">
<p>Search <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a> for the named module and execute its contents as the <a href="https://docs.python.org/3/library/__main__.html#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code>__main__</code></a> module.</p>
<p>Since the argument is a <em>module</em> name, you must not give a file extension (<code>.py</code>). The module name should be a valid absolute Python module name, but the implementation may not always enforce this (e.g.&nbsp;it may allow you to use a name that includes a hyphen).</p>
<p>Package names (including namespace packages) are also permitted. When a package name is supplied instead of a normal module, the interpreter will execute <code>&lt;pkg&gt;.__main__</code> as the main module. This behaviour is deliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script argument.</p>
<blockquote class="blockquote">
<p>Note</p>
<p>This option cannot be used with built-in modules and extension modules written in C, since they do not have Python module files. However, it can still be used for precompiled modules, even if the original source file is not available.</p>
</blockquote>
<p>If this option is given, the first element of <a href="https://docs.python.org/3/library/sys.html#sys.argv" title="sys.argv"><code>sys.argv</code></a> will be the full path to the module file (while the module file is being located, the first element will be set to <code>"-m"</code>). As with the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-c"><code>-c</code></a> option, the current directory will be added to the start of <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a>.</p>
<p><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-I"><code>-I</code></a> option can be used to run the script in isolated mode where <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a> contains neither the current directory nor the user’s site-packages directory. All <code>PYTHON*</code> environment variables are ignored, too.</p>
<p>Many standard library modules contain code that is invoked on their execution as a script. An example is the <a href="https://docs.python.org/3/library/timeit.html#module-timeit" title="timeit: Measure the execution time of small code snippets."><code>timeit</code></a> module:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> timeit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'setup here'</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'benchmarked code here'</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> timeit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for details</span></span></code></pre></div>
<p>Raises an <a href="https://docs.python.org/3/library/sys.html#auditing">auditing event</a> <code>cpython.run_module</code> with argument <code>module-name</code>.</p>
<blockquote class="blockquote">
<p>See also</p>
<p><a href="https://docs.python.org/3/library/runpy.html#runpy.run_module" title="runpy.run_module"><code>runpy.run_module()</code></a></p>
<p>Equivalent functionality directly available to Python code</p>
</blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0338">PEP 338</a> – Executing modules as scripts</p>
<p>Changed in version 3.1: Supply the package name to run a <code>__main__</code> submodule.</p>
<p>Changed in version 3.4: namespace packages are also supported</p>
<p>— <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m">1. Command line and environment — Python 3.10.5 documentation</a></p>
</blockquote>
<p>在 <code>sys.path</code> 指定的目录中寻找 module 并以 <code>__main__</code> module 的身份执行指定 module。</p>
<p>注意不要在名字后面加 <code>.py</code>，因为我们已经把执行的文件当作 module 来看待。</p>
<p>如果指定的是一个 Package name（即目录名），将会执行 <code>&lt;pkg&gt;.__main__</code>（即 <code>&lt;pkg&gt;/__main__.py</code>）。</p>
<p>另外，如果使用 <code>python -m a.b.module</code>，<code>sys.argv</code> 的首位将被设置为被执行 module 文件的<strong>完整路径</strong>（与之相对，<code>python a/b/module.py</code> 中 <code>sys.argv[0]</code> 将会是<strong>相对当前工作目录的路径</strong>，即 <code>a/b/module.py</code>）；同时，<strong>当前工作目录</strong>会被加入 <code>sys.path</code> 的首位。</p>
<hr>
<p><code>python -m A.B.module</code> 将顺次执行 <code>A</code>、<code>A.B</code> 的 <code>__init__.py</code>，即使该 module 没有任何导入行为。</p>
<p><code>python -m</code> 对于直接执行 package 内部的代码是必要的。若直接以 script 方式运行，一旦涉及到任何高于该 script 所在目录（含该目录）的相对导入，Python 就会抛出如下错误：</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">ImportError: attempted relative import with no known parent package</span></code></pre></div>
<p>而一个 module 也不能导入超过 <code>python -m</code> 参数指定的最顶层结构的 module，否则会抛出错误：</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">ImportError: attempted relative import beyond top-level package</span></code></pre></div>
</section>
<section id="sys.modules" class="level2">
<h2 class="anchored" data-anchor-id="sys.modules">sys.modules</h2>
<blockquote class="blockquote">
<p>The first place checked during import search is <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a>. This mapping serves as a cache of all modules that have been previously imported, including the intermediate paths. So if <code>foo.bar.baz</code> was previously imported, <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a> will contain entries for <code>foo</code>, <code>foo.bar</code>, and <code>foo.bar.baz</code>. Each key will have as its value the corresponding module object.</p>
<p>During import, the module name is looked up in <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a> and if present, the associated value is the module satisfying the import, and the process completes. However, if the value is <code>None</code>, then a <a href="https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError" title="ModuleNotFoundError"><code>ModuleNotFoundError</code></a> is raised. If the module name is missing, Python will continue searching for the module.</p>
<p><a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a> is writable. Deleting a key may not destroy the associated module (as other modules may hold references to it), but it will invalidate the cache entry for the named module, causing Python to search anew for the named module upon its next import. The key can also be assigned to <code>None</code>, forcing the next import of the module to result in a <a href="https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError" title="ModuleNotFoundError"><code>ModuleNotFoundError</code></a>.</p>
<p>Beware though, as if you keep a reference to the module object, invalidate its cache entry in <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a>, and then re-import the named module, the two module objects will <em>not</em> be the same. By contrast, <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" title="importlib.reload"><code>importlib.reload()</code></a> will reuse the <em>same</em> module object, and simply reinitialise the module contents by rerunning the module’s code.</p>
<p>— <a href="https://docs.python.org/3/reference/import.html#the-module-cache">5. The import system — Python 3.10.5 documentation</a></p>
</blockquote>
<p><code>sys.modules</code> 是一个 <code>dict</code>，Python 在导入之前会去检查 <code>sys.module</code> 里是否已经存有需要的 module 的 module object。如果有，就直接用这个；如果值为 <code>None</code>（意思是以前找过但没找到），就直接报错；如果该键值对不存在，就继续搜索过程。总之，<code>sys.modules</code> 扮演了一个类似 cache 的角色。</p>
<p>对于形如 <code>A.B.C</code> 的导入，Python 会顺次导入 <code>A</code>、<code>A.B</code> 和 <code>A.B.C</code> 并把他们加入 <code>sys.modules</code>。</p>
</section>
<section id="参考" class="level2">
<h2 class="anchored" data-anchor-id="参考">参考</h2>
<ul>
<li><p><a href="https://docs.python.org/3/reference/import.html">5. The import system — Python 3.10.5 documentation</a></p></li>
<li><p><a href="https://docs.python.org/3/tutorial/modules.html">6. Modules — Python 3.10.5 documentation</a></p></li>
<li><p><a href="https://www.pythonforthelab.com/blog/complete-guide-to-imports-in-python-absolute-relative-and-more/">Python for the Lab | Complete Guide to Imports in Python: Absolute, Relative, and More</a></p></li>
<li><p><a href="https://www.cnblogs.com/gaowengang/p/8543840.html">Python 包内的导入问题（绝对导入和相对导入） - Anonymous596 - 博客园</a></p></li>
</ul>


</section>

 ]]></description>
  <category>Python</category>
  <category>学习笔记</category>
  <guid>https://blog.sun123zxy.top/posts/20220714-import/index.html</guid>
  <pubDate>Wed, 13 Jul 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>从台体的体积公式谈起</title>
  <link>https://blog.sun123zxy.top/posts/20220327-frustum/index.html</link>
  <description><![CDATA[ 



<p>前些天做到一个猜圆台体两端电阻阻值公式的题，刚想积分乱搞时突然想起——台体不是有体积公式的吗…</p>
<p>于是就有下面的内容了。</p>
<p>台体本质上是锥体被一个平行与底面的平面所截而形成的几何体，所以可以把锥体补出来再研究。考虑从微积分的角度思考。设台体高度为 <img src="https://latex.codecogs.com/png.latex?h">，上、下底面面积分别为 <img src="https://latex.codecogs.com/png.latex?S_1,%20S_2">，上底面到锥体顶点的距离为 <img src="https://latex.codecogs.com/png.latex?x">。锥体的若干底面互相相似，而它们的的“半径”又与它们各自到锥体顶点的距离成正比，因此容易发现底面面积与该距离的平方成正比，即</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak%20=%20%5Cfrac%7BS_1%7D%7Bx%5E2%7D%20=%20%5Cfrac%7BS_2%7D%7B(x+h)%5E2%7D%0A"></p>
<p>这是在三维空间里的情况。可以类比的写出 <img src="https://latex.codecogs.com/png.latex?n"> 维台体的式子：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak%20=%20%5Cfrac%7BS_1%7D%7Bx%5E%7Bn-1%7D%7D%20=%20%5Cfrac%7BS_2%7D%7B(x+h)%5E%7Bn-1%7D%7D%0A"></p>
<p>（当然这里的 <img src="https://latex.codecogs.com/png.latex?S_1,S_2"> 就是“超面积”了）</p>
<p>进一步的，可以将超面积写成关于与顶点距离的函数形式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AS_1%20&amp;=%20S(x)%20=%20k%20x%5E%7Bn-1%7D%20%5C%5C%0AS_2%20&amp;=%20S(x+h)%20=%20k%20(x+h)%5E%7Bn-1%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>而我们要求的“超体积”，就可以顺理成章的表示为面积函数 <img src="https://latex.codecogs.com/png.latex?S(x)"> 在垂直轴线上的积分了</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV%20=%20%5Cint_%7Bx%7D%5E%7Bx+h%7D%20S(x)%20%5Cmathrm%20d%20x%20=%20k%20%5Cint_%7Bx%7D%5E%7Bx+h%7D%20x%5E%7Bn-1%7D%20%5Cmathrm%20d%20x%20=%20%5Cfrac%20k%20n%20%5Cleft(%20%5Cleft(x+h%20%5Cright)%5En%20-%20x%5En%20%5Cright)%0A"></p>
<p>这就是用微积分求到的台体体积公式。</p>
<p>那么问题来了——这种形式的台体体积公式和几何法得到的</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0AV%20=%20%5Cfrac%7B1%7D%7B3%7D%20h%20(S_1%20+%20%5Csqrt%7BS_1%20S_2%7D%20+%20S_2)%0A"></p>
</blockquote>
<p>有什么联系呢？</p>
<p>随便玩一下吧，<img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%203"> 毋庸置疑和三维有关，换成 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%20n"> 就好；后面那一坨挺对称的还蛮好看，写个求和符号让它更好看吧（</p>
<p>于是猜测台体体积公式的 <img src="https://latex.codecogs.com/png.latex?n"> 维扩展：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV%20=%20%5Cfrac%201%20n%20h%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20S_1%5E%7B%5Cfrac%7Bi%7D%7Bn-1%7D%7D%20S_2%5E%7B1-%5Cfrac%7Bi%7D%7Bn-1%7D%7D%0A"></p>
<p>用 <img src="https://latex.codecogs.com/png.latex?S(x)"> 函数的形式替换 <img src="https://latex.codecogs.com/png.latex?S_1,%20S_2">，得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV%20=%20%5Cfrac%20k%20h%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%0A"></p>
<p>哎！与前面积分得出的台体体积公式比较，发现只需证明</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x+h)%5En%20-%20x%5En%20=%20h%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%0A"></p>
<p>试着证明一下吧。观察发现 <img src="https://latex.codecogs.com/png.latex?h"> 可以拆成 <img src="https://latex.codecogs.com/png.latex?(x+h)-x">，故右式可以写成</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ah%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%20&amp;=%20((x+h)-x)%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%20%5C%5C%0A&amp;=%20(x+h)%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%20-%20x%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-i%7D%20-%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x%5Ei%20(x+h)%5E%7Bn-i%7D%20%5C%5C%0A&amp;=%20(x+h)%5En%20-%20x%5En%0A%5Cend%7Baligned%7D%0A"></p>
<p>得证。</p>
<p>暂时不知道这个定理有什么具体的名字，知道的大佬请告诉我（</p>
<p>所以这玩意有什么用呢？</p>
<p>首先当然是证明（超）台体体积公式，这个上面已经提到。</p>
<p>还有一个用途就是证明 <img src="https://latex.codecogs.com/png.latex?n%20%5Cin%20%5Cmathrm%7BN_+%7D"> 的幂函数 <img src="https://latex.codecogs.com/png.latex?x%5En"> 的导数公式。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cmathrm%20d%7D%7B%5Cmathrm%20d%20x%7D%20x%5En%20=%20%5Clim_%7Bh%20%5Cto%200%7D%20%5Cfrac%7B(x+h)%5En%20-%20x%5En%7D%7Bh%7D%20=%20%5Clim_%7Bh%20%5Cto%200%7D%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20x%5Ei%20(x+h)%5E%7Bn-1-i%7D%20=%20n%20x%5E%7Bn-1%7D%0A"></p>
<p>看上去很方便的来着呢。</p>



 ]]></description>
  <category>数学</category>
  <category>意识流</category>
  <guid>https://blog.sun123zxy.top/posts/20220327-frustum/index.html</guid>
  <pubDate>Sat, 26 Mar 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>原创生物必修一大题 - Creepus Explodus</title>
  <link>https://blog.sun123zxy.top/posts/20220224-creeper/index.html</link>
  <description><![CDATA[ 



<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>【必修一大题】假定你是李华，你的外国交换生朋友 Steve 正在水本科毕业论文，请根据高中生物所学内容，帮他完善以下论文选段。</p>
<p><strong>闪电苦力怕的 TNT 诱导及其生物发电技术实践</strong><br>
<strong>TNT-Induced Mutation of Charged Creepus Explodus and Its Bioelectricity Generating Technology</strong><br>
Steve Mahjong, Alex Macrohard. [J]MineNature Volume 817, Issue 1926. 2021. PP 9960-9961</p>
<p><strong>摘要：</strong>苦力怕（Creeper，学名 Creepus Explodus，另译爬行者）是主世界中常见的友好生物。本文回顾了前人对三硝基甲苯诱导苦力怕突变的研究成果，提出了利用闪电苦力怕实现生物发电的构想，并初步完成了闪电苦力怕发电机的建造、试运行和效率分析工作，为后续同类型研究提供借鉴。</p>
<p><img src="https://blog.sun123zxy.top/posts/20220224-creeper/tnt.jpg" style="height: 150px"> <img src="https://blog.sun123zxy.top/posts/20220224-creeper/breath.jpg" style="height: 150px"></p>
<p>（Fig 1：TNT 毒理）（Fig 2：气体含量曲线）</p>
<p><strong>引入 1：</strong>三硝基甲苯（TNT）具有相对较高的细胞毒性，其体外半数致死浓度 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BLC_%7B50%7D%7D%20%5Capprox%2025%20%5C%20%5Cmathrm%7B%5Cmu%20mol%20%5Ccdot%20L%5E%7B-1%7D%7D">​。氧化应激是被广泛认可的 TNT 中毒机制之一，其具体原理如 Fig1 所示。该理论认为，TNT 进入细胞后经过某些酶的催化，生成多种 <code>______</code>（图中 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BArNO_2%5E%7B%5Cfrac%7B%7D%7B%5Ccdot%7D%7D%7D">​、<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BO_2%5E%7B%5Cfrac%7B%7D%7B%5Ccdot%7D%7D%7D">​）攻击和破坏细胞内各种执行正常功能的生物分子（如攻击 DNA 可能引起 <code>________</code>），导致细胞衰老或损伤。为抵消 TNT 对生物体稳态的影响，生物体体内的超氧化物歧化酶（SOD）可催化有害物质歧化并最终由 <code>__________</code>（CAT）催化分解为无害物质。CAT 在动物 <code>____</code>（填器官）中含量丰富。</p>
<p><strong>引入 2：</strong>苦力怕体内的 CAT （简记为 CrpCAT）具有极其特殊的结构。Notch Persson 的实验表明，CrpCAT 的活性高于其它动物体内的 CAT，其具体实验步骤如下：</p>
<blockquote class="blockquote">
<p>步骤 1：取 3 支洁净的试管在适宜温度下保温，分别加入 <img src="https://latex.codecogs.com/png.latex?2%20%5Cmathrm%7BmL%7D">​​ SOD 催化产物溶液。</p>
<p>步骤 2：分别向 3 支试管中滴加 2 滴一定浓度的 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BFeCl_3%7D"> 溶液（A 组）、<code>__________</code>（B 组）、<code>__________</code>（C 组）。</p>
<p>步骤 3：一段时间后，精确测定各组反应速率，测得 <img src="https://latex.codecogs.com/png.latex?v(A)%20=%209.85%20%5Ctimes%2010%5E%7B-10%7D%20v(B)%20=%202.11%20%5Ctimes%2010%5E%7B-10%7D%20v(C)">​，从而证明了实验结论。</p>
</blockquote>
<p>该实验的 B 组与 C 组相较，可以说明 CrpCAT 的 <code>____</code>（选择：A. 高效性；B. 专一性；C. 温和性；D. 以上选项均不能说明）</p>
<p><strong>引入 3：</strong>苦力怕 CrpCAT 的高活性使其可以耐受较高浓度的 TNT。用 TNT 处理苦力怕可诱导其突变为罕见的闪电苦力怕（Charged Creeper）变种。Jeb Bergensten 的研究揭示了闪电苦力怕的发电原理。在闪电苦力怕的发电器官中，电细胞细胞膜上的钠钾泵消耗细胞呼吸产生的 <code>__________</code> （填物质名称）逆浓度梯度转运钠、钾离子建立起静息电位；而动作电位时，细胞后膜上大量电压门控钠离子通道以 <code>________</code> 的方式转运钠离子进入细胞，在前后膜之间形成 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B50%20%5C%20mV%7D"> 到 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B150%20%5C%20mV%7D">​ 的电位差。</p>
<p><strong>实验：</strong>研究小组初步探究了利用闪电苦力怕发电器官进行生物发电的可行性。将完整的发电器官浸泡在营养液中，在其背侧和腹侧插入电极并连接电流表，整个实验器材置于密闭气缸中，测定气缸中 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BO_2%7D">​ 和 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BCO_2%7D">​ 含量的变化曲线如 Fig2 所示。据图推测闪电苦力怕无氧呼吸的有机产物为 <code>________</code>，实验时间内有氧呼吸消耗葡萄糖 <code>______</code> <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bmol%7D">​。该发电机输出了 <img src="https://latex.codecogs.com/png.latex?b%20%5C%20%5Cmathrm%7BkJ%7D">​ 电能，计算其发电效率为 <code>____________</code>（<img src="https://latex.codecogs.com/png.latex?%E5%8F%91%E7%94%B5%E6%95%88%E7%8E%87%20=%20%5Cfrac%7B%E8%BE%93%E5%87%BA%E7%94%B5%E8%83%BD%7D%7B%E8%BE%93%E5%85%A5%E7%9A%84%E5%8C%96%E5%AD%A6%E8%83%BD%7D%20%5Ctimes%20100%20%5C%25">​，已知 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B1%20%5C%20mol%7D">​ 葡萄糖折合能量 <img src="https://latex.codecogs.com/png.latex?a%20%5C%20%5Cmathrm%7BkJ%7D">​​，只考虑葡萄糖的呼吸分解）。该发电机的发电效率不高，其主要原因为 <code>________________________________________</code>（从能量转化角度分析，答两点即可）</p>
<p><strong>参考文献：</strong><a href="http://www.energetic-materials.org.cn/hncl/article/html/CJEM2019068">魏桐,周阳,杨治林,等. 典型炸药的毒性效应及其作用机制研究进展[J]. 含能材料,2019,27(7):558-568.</a></p>
<p>其他参考：</p>
<ul>
<li><a href="https://www.zhihu.com/question/19901924/answer/1490619635">电鳗发电的原理是什么？ - 混乱博物馆的回答 - 知乎</a></li>
<li><a href="https://minecraft.fandom.com/zh/wiki/%E8%8B%A6%E5%8A%9B%E6%80%95">苦力怕 - Minecraft Wiki，最详细的我的世界百科</a></li>
</ul>
</section>
<section id="answer" class="level2">
<h2 class="anchored" data-anchor-id="answer">Answer</h2>
<pre><code>1) 自由基 基因突变 过氧化氢(H2O2) 肝脏
2) 2滴一定浓度的CAT溶液 2滴等浓度的CrpCAT溶液 D
3) 三磷酸腺苷 协助扩散
4) 酒精 0.5 b/a*100% 大量能量以热能的形式散失、大量能量存留在无氧呼吸产生的酒精中、呼吸作用产生的能量还需用于其它各项生命活动</code></pre>
</section>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<p>2 问选择题：不能说明高效性。一方面，B 组与 C 组反应速率差异仅数倍，比起酶与无机催化剂的 <img src="https://latex.codecogs.com/png.latex?10%5E7">​ - <img src="https://latex.codecogs.com/png.latex?10%5E%7B13%7D">​ 倍差异太小；另一方面，“高效性”一般只用于描述酶与无机催化剂的催化能力差异。</p>
<p>4 问，消耗 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BO_2%20%5C%203%20%5C%20mol%7D">，产生 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BCO_2%20%5C%204%20%5C%20mol%7D">，说明有氧呼吸与无氧呼吸均存在，且无氧呼吸生成酒精。根据有氧呼吸、酒精无氧呼吸方程式，有氧呼吸消耗葡萄糖 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B3%20%5C%20mol%20%5Ctimes%20%5Cfrac%7B1%7D%7B6%7D%20=%200.5%20%5C%20mol%7D">，无氧呼吸消耗葡萄糖 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B%5Cleft(%204%20%5C%20mol%20-%20%5Cleft(%200.5%20%5C%20mol%20%5Ctimes%206%20%5Cright)%20%5Cright)%20%5Ctimes%20%5Cfrac%7B1%7D%7B2%7D%20=%200.5%20%5C%20mol%7D">，共消耗葡萄糖 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B1%20%5C%20mol%7D">，据此计算即可。</p>


</section>

 ]]></description>
  <category>高考</category>
  <category>原创题目</category>
  <guid>https://blog.sun123zxy.top/posts/20220224-creeper/index.html</guid>
  <pubDate>Wed, 23 Feb 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>DockerCompose+VLESS+WS+TLS+Web 方式搭建 V2Ray 代理</title>
  <link>https://blog.sun123zxy.top/posts/20220204-vmagic/index.html</link>
  <description><![CDATA[ 



<p>全文参考：</p>
<ul>
<li><a href="https://guide.v2fly.org/advanced/wss_and_web.html">(VMESS) + WebSocket + TLS + Web | 新 V2Ray 白话文指南</a></li>
<li><a href="https://guide.v2fly.org/app/docker-deploy-v2ray.html">Docker 部署 V2Ray | 新 V2Ray 白话文指南</a></li>
<li><a href="https://www.v2fly.org/">V2Ray(V2Fly) 官方文档</a></li>
</ul>
<section id="原理" class="level2">
<h2 class="anchored" data-anchor-id="原理">原理</h2>
<p>VLESS 作为内部传输协议，使用 HTTP 的扩展 WebSocket 作为传输载体，外层使用 TLS 加密传输。服务器端用 Nginx 搭建正常 HTTPS 网站，收到向特定路径发送的 WebSocket 流量时充当反向代理转发至 Docker 容器内的 V2Ray 处理。</p>
<p>从外部看，服务器是货真价实的 HTTPS 服务器，客户端发出的请求也是货真价实的 HTTPS 流量；直接用浏览器访问入口路径将返回 <code>400 Bad Request</code>（由 V2Ray 返回）或 <code>404 Not Found</code>（可在 Nginx 中预检测 WebSocket 请求，增强隐蔽性）；安全性、抗干扰能力则完全由 TLS 保障，几乎无懈可击。</p>
<p>更强的技术还有 Xray 中使用的 XTLS，无缝拼接了内外两层 TLS 使得性能进一步提高。不过因为和 V2Ray 主社区分离了，还是决定先用 VLESS+WS+TLS+Web 配置。</p>
<ul>
<li><a href="https://tlanyan.pp.ua/xray-tutorial/">V2Ray V2Fly Xray 的历史</a></li>
</ul>
<p>结构上，使用 Docker 和 Docker Compose 容器化安装方便管理；而装在外层的 Nginx 可以作为所有网页服务的入口点，方便以后增加其它服务。</p>
</section>
<section id="流程" class="level2">
<h2 class="anchored" data-anchor-id="流程">流程</h2>
<p>以下所有操作在 Ubuntu 20.04 的 root 用户下进行。代码中部分需要自己填写的敏感信息会用如 <code>{[VARIABLE]}</code> 的记号标明，请自行替换。</p>
<section id="准备工作" class="level3">
<h3 class="anchored" data-anchor-id="准备工作">准备工作</h3>
<section id="安装-curl" class="level4">
<h4 class="anchored" data-anchor-id="安装-curl">安装 cURL</h4>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt</span> install curl</span></code></pre></div>
</section>
<section id="安装-docker" class="level4">
<h4 class="anchored" data-anchor-id="安装-docker">安装 Docker</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fsSL</span> https://get.docker.com/ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 获取脚本并交给 sh (shell) 执行</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start docker</span></code></pre></div>
</section>
<section id="安装-docker-compose" class="level4">
<h4 class="anchored" data-anchor-id="安装-docker-compose">安装 Docker Compose</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> https://github.com/docker/compose/releases/download/1.25.0/docker-compose-<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> /usr/local/bin/docker-compose</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker-compose --version</span></span></code></pre></div>
</section>
<section id="安装并运行-nginx" class="level4">
<h4 class="anchored" data-anchor-id="安装并运行-nginx">安装并运行 Nginx</h4>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt</span> install nginx</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start nginx</span></code></pre></div>
<p>此时通过浏览器访问服务器就能看到 Nginx 默认的欢迎界面了。</p>
</section>
<section id="调试技巧" class="level4">
<h4 class="anchored" data-anchor-id="调试技巧">调试技巧</h4>
<p>Nginx 的日志存储在 <code>/var/log/nginx</code> 目录下；V2Ray 的日志在 Docker 容器里，之后我们将把它映射到宿主机上方便操作和存储。</p>
<p>一些常用的调试命令：</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start nginx</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> status nginx</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> stop nginx</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and start containers（-d 表示后台运行）</span></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> down  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop and remove containers, networks, images, and volumes</span></span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> start <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start services</span></span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> stop  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop services</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> ps <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 查看各容器运行状态</span></span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> log {<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">CONTAINER_ID</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 查看某容器运行日志</span></span></code></pre></div>
</section>
</section>
<section id="安装-certbot-并以-webroot-方式获取-lets-encrypt-证书" class="level3">
<h3 class="anchored" data-anchor-id="安装-certbot-并以-webroot-方式获取-lets-encrypt-证书">安装 Certbot 并以 Webroot 方式获取 Let’s Encrypt 证书</h3>
<ul>
<li>Certbot 官方教程：<a href="https://eff-certbot.readthedocs.io/en/stable/using.html">User Guide — Certbot 1.22.0 documentation</a></li>
<li>Certbot 原理：<a href="https://www.jianshu.com/p/3ffd27b64847">HTTPS-使用Certbot自动配置Let’s Encrypt证书 - 简书</a></li>
</ul>
<p>Let’s Encrypt 是一个免费、自动化和开放的证书颁发机构，为网站提供免费的 SSL/TLS 证书。要从 Let’s Encrypt 获取某个域名的证书，需要证明拥有对该域名的控制权，而 Certbot 就是官方提供的自动化认证工具。</p>
<p>Webroot 是 Certbot 提供的一种认证方式，如果服务器上有网站运行且有能力修改其配置，就可以用该方式进行认证。使用这种方式获取证书时无需暂停网页服务端的运行。</p>
<blockquote class="blockquote">
<p>The webroot plugin works by creating a temporary file for each of your requested domains in <code>${webroot-path}/.well-known/acme-challenge</code>. Then the Let’s Encrypt validation server makes HTTP requests to validate that the DNS for each requested domain resolves to the server running certbot.</p>
</blockquote>
<p>首先安装 Certbot：</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt</span> install certbot python3-certbot</span></code></pre></div>
<p>因为之前安装的 Nginx 已经在 <code>/var/www/html</code> 下生成默认的欢迎页网站，故可直接利用该目录进行 Webroot 认证：</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">certbot</span> certonly <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--webroot</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> /var/www/html <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> {<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">YOUR_DOMAIN</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>}</span></code></pre></div>
<p>认证过程中 Certbot 的回显信息：</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span>
<span id="cb8-2">Plugins selected: Authenticator webroot, Installer None</span>
<span id="cb8-3">Obtaining a new certificate</span>
<span id="cb8-4">Performing the following challenges:</span>
<span id="cb8-5">http-01 challenge for {[YOUR_DOMAIN]}</span>
<span id="cb8-6">Using the webroot path /var/www/html for all unmatched domains.</span>
<span id="cb8-7">Waiting for verification...</span>
<span id="cb8-8">Cleaning up challenges</span>
<span id="cb8-9"></span>
<span id="cb8-10">IMPORTANT NOTES:</span>
<span id="cb8-11"> - Congratulations! Your certificate and chain have been saved at:</span>
<span id="cb8-12">   /etc/letsencrypt/live/{[YOUR_DOMAIN]}/fullchain.pem</span>
<span id="cb8-13">   Your key file has been saved at:</span>
<span id="cb8-14">   /etc/letsencrypt/live/{[YOUR_DOMAIN]}/privkey.pem</span>
<span id="cb8-15">   Your cert will expire on {[EXPIRE-DATE]}. To obtain a new or tweaked</span>
<span id="cb8-16">   version of this certificate in the future, simply run certbot</span>
<span id="cb8-17">   again. To non-interactively renew *all* of your certificates, run</span>
<span id="cb8-18">   "certbot renew"</span>
<span id="cb8-19"> - If you like Certbot, please consider supporting our work by:</span>
<span id="cb8-20"></span>
<span id="cb8-21">   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate</span>
<span id="cb8-22">   Donating to EFF:                    https://eff.org/donate-le</span></code></pre></div>
</section>
<section id="使用-docker-compose-安装并配置-v2ray" class="level3">
<h3 class="anchored" data-anchor-id="使用-docker-compose-安装并配置-v2ray">使用 Docker Compose 安装并配置 V2Ray</h3>
<p>上传 <code>docker-compose.json</code> 至适当位置（建议妥善储存该文件，以便后续管理使用）：</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3.4"</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">v2ray</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v2fly/v2fly-core</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v2ray</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 自动重启容器</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[YOUR_PORT_OUTER]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:{[YOUR_PORT_INNER]}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 端口映射，注意外左内右</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v2ray -config=/etc/v2ray/config.json</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 需要指定配置文件位置</span></span>
<span id="cb9-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/v2ray:/etc/v2ray</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 左边宿主目录，右边容器目录</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /var/log/v2ray:/var/log/v2ray</span></span></code></pre></div>
<p>利用 volume 技术，容器中 V2Ray 的配置文件被映射到宿主机的 <code>/etc/v2ray</code> 目录下，而日志信息被映射到 <code>/var/log/v2ray</code> 目录下。</p>
<p>故运行容器之前，我们在 <code>/etc/v2ray</code> 下放置 <code>config.json</code> 作为容器内 V2Ray 的配置文件：</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"log"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loglevel"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"access"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/var/log/v2ray/access.log"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"error"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/var/log/v2ray/error.log"</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inbounds"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"port"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_PORT_INNER]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">容器内的监听端口</span></span>
<span id="cb10-10">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"listen"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Caution!</span></span>
<span id="cb10-11">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"protocol"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vless"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"settings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-13">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"decryption"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-14">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"clients"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-15">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-16">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_UUID]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-17">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"email"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_EMAIL]}"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">作标识用，可以随便填</span></span>
<span id="cb10-18">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-19">                <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-20">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"streamSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-22">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"network"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ws"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-23">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"wsSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-24">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"path"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_PATH]}"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">希望设定的</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">V2Ray</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">入口路径，如</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/ray"</span></span>
<span id="cb10-25">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-26">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-28">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-29">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"outbounds"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-31">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"protocol"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"freedom"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-32">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"settings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb10-33">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-34">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<blockquote class="blockquote">
<p>有一个小坑点（见 <a href="https://github.com/v2ray/v2ray-core/issues/2221">Issue #2221</a>）：与白话文指南不同，如果用 Docker 搭建 V2Ray，容器外的 Nginx 需要向容器内的 V2Ray 发送数据，因此容器内的 V2Ray 必须监听本机 IP <code>0.0.0.0</code> 而不是本地回环 IP <code>127.0.0.1</code>。</p>
<p>常见的症状是客户端报 <code>502 Bad Gateway &gt; websocket: bad handshake</code> ，Nginx 报 <code>upstream prematurely closed connection</code>，而容器内 V2Ray 没有报警日志。</p>
</blockquote>
<p>最后，在之前放置 <code>docker-compose.yml</code> 的目录下执行：</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span></span></code></pre></div>
</section>
<section id="设置-nginx-反向代理" class="level3">
<h3 class="anchored" data-anchor-id="设置-nginx-反向代理">设置 Nginx 反向代理</h3>
<ul>
<li><a href="http://nginx.org/en/docs/http/configuring_https_servers.html">Nginx - Configuring HTTPS servers</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html">Nginx - Module ngx_http_ssl_module</a></li>
</ul>
<p>通常修改 Nginx 配置可以通过直接修改 <code>/etc/nginx/nginx.conf</code> 或在 <code>/etc/nginx/conf.d/</code> 目录下新建配置文件的方式进行，但根据推荐的目录结构（参见 <a href="https://wiki.debian.org/Nginx/DirectoryStructure">Nginx/DirectoryStructure - Debian Wiki</a>），这里选择在 <code>/etc/nginx/sites-available/</code> 放置配置文件后在 <code>/etc/nginx/sites-enabled/my-enabled.conf</code> 中动态引用。</p>
<p>故首先在 <code>/etc/nginx/sites-available/</code> 下新建 <code>{[YOUR_DOMAIN]}.conf</code>（文件名可自行调整）：</p>
<pre class="nginx"><code>server {
  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate       /etc/letsencrypt/live/{[YOUR_DOMAIN]}/fullchain.pem;
  ssl_certificate_key   /etc/letsencrypt/live/{[YOUR_DOMAIN]}/privkey.pem;
  # 利用缓存重用 session 提高性能
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;
  ssl_session_tickets off;

  ssl_protocols         TLSv1.2 TLSv1.3;
  # 设置加密方式，默认的已经不安全了
  ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off; # (?) Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols.

  server_name           {[YOUR_DOMAIN]};
  location {[YOUR_PATH]} { # 与 V2Ray 配置中的 path 保持一致
    if ($http_upgrade != "websocket") { # WebSocket 协商失败时返回 404
        return 404;
    }
    proxy_redirect off;
    proxy_pass http://127.0.0.1:{[YOUR_PORT_OUTER]}; # 设置反向代理转发至 V2Ray
    proxy_http_version 1.1;
    # 一些 WebSocket 需要的配置
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    # Show real IP in v2ray access.log
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
# modified from (2022/01/30) https://guide.v2fly.org/advanced/wss_and_web.html#nginx-%E9%85%8D%E7%BD%AE</code></pre>
<p>然后在 <code>/etc/nginx/sites-enabled/</code> 目录下，先删除原有的 <code>default</code> 文件，然后新建 <code>my-enabled.conf</code>（文件名可自行调整）：</p>
<pre class="nginx"><code>include /etc/nginx/sites-available/default; # 继续使用 Nginx 的默认站点配置文件
include /etc/nginx/sites-available/{[YOUR_DOMAIN]}.conf; # 引用刚刚新建的配置文件</code></pre>
<ul>
<li>Update: 实际上推荐的方式是用 <code>ln -s</code> 在 <code>/etc/nginx/sites-enabled/</code> 里创建 symbolic link，当时搞的时候还不太懂，是我 naive 了（</li>
</ul>
<p>最后重新加载配置文件：</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nginx</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> reload</span></code></pre></div>
</section>
<section id="客户端" class="level3">
<h3 class="anchored" data-anchor-id="客户端">客户端</h3>
<p><del>用的图形化界面还没研究配置文件</del>，不过 outbounds 部分大致应如下所示：</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb15-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"outbounds":</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"protocol"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vless"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"settings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"vnext"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-6">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-7">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_DOMAIN]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-8">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"port"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">443</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-9">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"users"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-10">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_UUID]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"email"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_EMAIL]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-11">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-12">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-13">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"streamSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"network"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ws"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-17">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"security"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-18">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"wsSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-19">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"path"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_PATH]}"</span></span>
<span id="cb15-20">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-23"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>web</category>
  <category>学习笔记</category>
  <guid>https://blog.sun123zxy.top/posts/20220204-vmagic/index.html</guid>
  <pubDate>Thu, 03 Feb 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>原创生物选修一大题 - 药水酿造</title>
  <link>https://blog.sun123zxy.top/posts/20211023-potion/index.html</link>
  <description><![CDATA[ 



<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>“夜视药水”常用于治疗误食夜雀所致的夜盲症。Steve 领导的研究小组正在探究 Minecraft Java Edition 1.13+ 夜视药水的各项理化“特性”。</p>
<p><img src="https://blog.sun123zxy.top/posts/20211023-potion/potion.jpg" style="height: 210px"> <img src="https://blog.sun123zxy.top/posts/20211023-potion/yeast.jpg" style="height: 210px"></p>
<p>（图1: 部分药水酿造系统）（图2：某品牌“下界疣”粉的包装袋）</p>
<ol type="1">
<li>小酌怡情，大饮伤身。为提高团队工作效率，Steve 称取 1g “下界疣”粉置于 50mL 玻璃瓶中，加入 10mL 蒸馏水，用玻璃棒搅拌均匀，静置 1h 后得到糊状“粗制的药水”。向“粗制的药水”中加入葡萄糖并在 20 摄氏度环境中培养数天，得到速度加成为 20% 的“迅捷药水”。使用酸性重铬酸钾溶液对产品进行检测，发现溶液由橙色变为灰绿色，由此推断“下界疣”粉中主要微生物的代谢类型为 <code>______________</code>。制备“粗制的药水”的实验过程也被称为 <code>__________</code>。组装仪器时，Steve 在玻璃瓶上额外加装一段长而弯曲的胶管，其目的是 <code>__________________</code>。</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta">​​​​​ - 胡萝卜素是“夜视药水”的主要有效成分，推测“夜视药水”治疗夜盲症的原理可能为 <code>____________________________</code>。“金胡萝卜”富含天然胡萝卜素，成本低廉，不仅是各大工业 MOD 中制取“夜视药水”的主要原料，也是代替“金苹果”治疗僵尸村民的不二之选。在最新研究中，小组成员向虚弱的僵尸村民喂食“金胡萝卜”，一段时间后取其细胞检测，发现癌胚抗原和甲胎蛋白的表达量明显减少，这说明“金胡萝卜”具有 <code>______________________</code> 的作用。</li>
<li>小组成员 Alex 在《探究“红石粉”对“夜视药水”作用时间的影响》的实验中，错将“蜘蛛眼”当作“红石粉”加入已制好的“夜视药水”，随后密封于泡菜坛，在燃烧的熔炉附近发酵 8d，意外的得到了粗制的“隐身药水”。但此方法制备的“隐身药水”常因亚硝酸盐含量过高而使人虚弱甚至中毒。Alex 计划通过改变发酵过程的各项参数来降低成品中亚硝酸盐的含量，请写出你的建议 <code>________________________________</code>（任写两点即可）。</li>
<li>更新至 Minecraft Java Edition 1.14.4 后，小组成员 Iron Golem 了解到使用“虞美人”（一种植物）制作的“迷之炖菜”同样具有极佳的夜视效果。“虞美人”精油易挥发、难水解，常使用水蒸气蒸馏法提取。提取过程中，需先后在油水混合物中加入 <code>____________</code> 两种盐。蒸馏过程中 <code>__________________</code>（从两方面作答），产品的质量就会下降。</li>
</ol>
</section>
<section id="answer" class="level2">
<h2 class="anchored" data-anchor-id="answer">Answer</h2>
<pre><code>(1) 异养兼性厌氧型 （酵母细胞的）活化 排气、防止杂菌污染
(2) （一分子）beta-胡萝卜素在体内被转化（氧化）为（两分子）维生素A 使癌变细胞恢复成正常细胞
(3) 适当降低温度、发酵前加入食盐（增加食盐用量）、加长腌制时间
(4) NaCl、（无水）Na2SO4 温度太高、时间太短</code></pre>


</section>

 ]]></description>
  <category>高考</category>
  <category>原创题目</category>
  <guid>https://blog.sun123zxy.top/posts/20211023-potion/index.html</guid>
  <pubDate>Fri, 22 Oct 2021 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Cnblogs 2 Jekyll：从寄人篱下到手撸全站</title>
  <link>https://blog.sun123zxy.top/posts/20210817-aboutblog/index.html</link>
  <description><![CDATA[ 



<section id="旅程开始" class="level2">
<h2 class="anchored" data-anchor-id="旅程开始">旅程开始</h2>
<p>很早就在考虑自建博客的事情了。</p>
<p>大概是 18 年吧，根据 OIer 传统，打算开个博客存点模板和学习笔记。博客园广告少，dalao 多，还能自定义 css/js 美化博客，<del>比隔壁 CSDN 不知道高到哪里去了</del>，虽然不是很懂前端，但一看就来劲了，开始折腾。于是一个暑假 OI 没啥进步，倒是写了一车 css/js 修改自带皮肤，整出来一套多主题切换系统。之后又经过了数次大改重构，适配了 markdown 编辑器，功能日趋完善。</p>
<p>然而改版越来越多，代码越来越乱，寄人篱下也总有这样那样的不方便之处。想来想去，改别人的东西总是有极限的，与其无数次推倒重构，还不如自己去搭个新的。</p>
<p>这么想着又咕了几个月（笑）</p>
<p>直到 20 年晚些时候才开始认真思考这个问题。一开始也是打算在 Hexo 或 Jekyll 上直接套个主题改改就好，毕竟是相当省事。只是某天在机房摸鱼学了波 Jekyll 后，突然一想——折腾博客也两三年了，懂的前端也不少了，又打算自己搭博客，要不干脆从零手撸个出来？</p>
<p>于是又摸了大半年，差不多可以用了。</p>
<p>以前用 markdown 写的文章都搬过来了，其他的回头再说吧。<del>好像也没啥保留价值</del></p>
<p>那么，之后就在这边安家了。博客园那边应该还会同步发布，但后续的更新和修改就不能保证了。</p>
<p>还有，话说正式启用博客的时间正好是 8 月 17 日，这个时间…</p>
<p><del>是妖妖梦、风神录正式版发售时间</del></p>
<p><del>给国家省点子弹吧（</del></p>
</section>
<section id="杂谈" class="level2">
<h2 class="anchored" data-anchor-id="杂谈">杂谈</h2>
<p>聊聊搭建过程中的一点心得。</p>
<p><a href="https://github.com/sun123zxy/blog-jekyll-code">博客源码</a></p>
<section id="技术-功能" class="level3">
<h3 class="anchored" data-anchor-id="技术-功能">技术 &amp; 功能</h3>
<ul>
<li>基于 <a href="https://jekyllrb.com/">Jekyll</a> 和 <a href="https://github.com/mfenner/jekyll-pandoc">jekyll-pandoc</a> 插件，配合自制小工具 <a href="https://github.com/sun123zxy/InlineMathSpaceKiller">InlineMathSpaceKiller</a> 的静态 markdown 博客。</li>
<li>全站 js 和主题切换动画效果使用 <a href="https://jquery.com/">JQuery</a>。</li>
<li>支持锚点跳转的目录系统。</li>
<li>数学公式使用 <a href="https://katex.org/">KaTeX</a> 渲染。</li>
<li>代码高亮使用 <a href="https://highlightjs.org/">highlight.js</a> 分析代码结构，配合魔改后的样式表实现。</li>
<li>评论系统使用 <a href="https://github.com/giscus/giscus">Giscus</a>，基于 Github Discussions 的静态博客评论系统。</li>
</ul>
</section>
<section id="环境配置" class="level3">
<h3 class="anchored" data-anchor-id="环境配置">环境配置</h3>
<p>看仓库的 <code>README.md</code> 吧，Jekyll 的官方文档也可以（其实是我有点忘了 :p）</p>
</section>
<section id="数学公式jekyll-pandoc-和-inlinemathspacekiller" class="level3">
<h3 class="anchored" data-anchor-id="数学公式jekyll-pandoc-和-inlinemathspacekiller">数学公式、jekyll-pandoc 和 InlineMathSpaceKiller</h3>
<p><del>用插件干啥啊好好用原生 Jekyll Github 自动帮你编译它不香吗</del></p>
<p><del>本地我用 Typora 编写 markdown</del>（最近 Typora 转付费了，现在用 MarkText），希望能在上传过程中尽可能少地改动源文件，这包括内嵌的 <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> 数学公式。但 Jekyll 自带的 markdown 解析器老是不好使，比如公式里的 <code>|</code> 被解析成表格了之类各种怪七怪八的问题…</p>
<p>于是想到了文档转换界的瑞士军刀——</p>
<blockquote class="blockquote">
<p>If you need to convert files from one markup format into another, pandoc is your swiss-army knife.</p>
</blockquote>
<p>Google 了一圈找到了 <a href="https://github.com/mfenner/jekyll-pandoc">jekyll-pandoc</a>，可以改用 <a href="https://www.pandoc.org/">Pandoc</a> 的文档解析来渲染 Markdown。</p>
<section id="jekyll-pandoc-的具体参数配置" class="level4">
<h4 class="anchored" data-anchor-id="jekyll-pandoc-的具体参数配置">jekyll-pandoc 的具体参数配置</h4>
<p>安装流程照着 README 里给的方法走就好了。这里主要谈一谈参数的配置。</p>
<p>jekyll-pandoc 文档里对 <code>_config.yml</code> 里面的参数设置给出了一个例子（已经过时了）——</p>
<blockquote class="blockquote">
<p>Additional pandoc options can be provided in the Jekyll <code>_config.yml</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pandoc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> normalize</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> smart</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mathjax</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csl</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> _styles/apa.csl</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bibliography</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bibliography/references.bib</span></span></code></pre></div>
</blockquote>
<p>这些参数等价于 Pandoc 的命令行参数，即上述代码等价于文件渲染时执行</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandoc</span> target.md <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> target.html <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--normalize</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--smart</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mathjax</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--csl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_styles/apa.csl <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bibliography</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bibliography/references.bib</span></code></pre></div>
<p>所以根据需求照着配就可以了。目前我用的配置是</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plugins</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jekyll-pandoc</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">markdown</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Pandoc</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pandoc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mathjax</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> no-highlight</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> markdown-smart</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # disable smart quotes</span></span></code></pre></div>
<ul>
<li><p>开启 <code>--mathjax</code> 可以自动把 <code>$</code> 和 <code>$$</code> 换成 <code>\(</code>、<code>\)</code> 和 <code>\[</code>、<code>\]</code>，可以直接被 KaTeX 提供的 <code>auto-render.min.js</code> 识别。</p></li>
<li><p><code>--no-highlight</code> 打算用 highlight.js 来做高亮，所以这里就不需要了。</p></li>
<li><p>Pandoc 在转换 Markdown 时默认开启智能标点功能（参见 <a href="https://pandoc.org/MANUAL.html#typography">Pandoc 文档 - Extensions - Typography</a>），会把 <code>""</code>、<code>''</code> 自动替换成 <code>“”</code>、<code>‘’</code>，所以用 <code>-smart</code> 关闭这个插件。</p></li>
</ul>
</section>
<section id="spacekiller" class="level4">
<h4 class="anchored" data-anchor-id="spacekiller">SpaceKiller</h4>
<p>还有一个小问题——Typora （MarkText 好像有这个问题）允许存在形如 <code>$ \gcd(a,b) $</code> 这样 <code>$</code> 旁边紧跟着空格的行内公式，但 Pandoc 解析不了。后来翻到这个 <a href="https://github.com/jgm/pandoc/issues/5672">issue</a>，官方似乎不打算修复这个问题，就写了个预处理工具删空格，新文章上传前 <code>spacekiller</code> 一下就可以了。</p>
</section>
</section>
<section id="文章存储结构" class="level3">
<h3 class="anchored" data-anchor-id="文章存储结构">文章存储结构</h3>
<p>没有使用 Jekyll 自带的 posts。</p>
<p>我不喜欢这种图文分离的组织格式。文本和图片本来就同属一篇文章，强行把图片拆开放到 <code>/assets/images/.../</code> 里面既不合逻辑，又丧失了可移植性，匪夷所思。</p>
<p>最后使用了打开 output 选项的 collection 来实现，每篇文章都有一个独立的文件夹，包含 <code>index.md</code> （文本）和所需图片、文件等所有内容。<code>index.md</code> 里面直接使用相对引用插入图片，和无博客状态下写作体验完全一致。</p>
</section>
<section id="页面设计" class="level3">
<h3 class="anchored" data-anchor-id="页面设计">页面设计</h3>
<p>白模写好后就开肝 css，一开始完全参考之前魔改的博客园 iMetro 主题整出来个高仿，后来有了一些更好的想法，比如把侧边栏做成 panel 样式之类的，就成现在这个样子了。</p>
</section>
<section id="图片预加载与缓存" class="level3">
<h3 class="anchored" data-anchor-id="图片预加载与缓存">图片预加载与缓存</h3>
<p>国内访问 github.io 很不稳定，背景图片加载特别慢，这几天在想怎么优化这个问题。</p>
<p>最终的方案是在切换主题时等背景图片加载完毕后再向页面引入主题 css 文件。这样在图片加载过程中，页面显示的 css 尚处于无主题的默认状态，避免了背景白屏的现象出现。</p>
<p>于是去学了波预加载技术，最开始用 Ajax 来做，结果写完发现 Firefox 和 Chrome 都好像没看到 Ajax 的缓存一样，又在加载主题 css 时重新请求了一次图片…</p>
<p>无奈，改用 <code>new Image()</code> 来预加载。这回 Firefox 好使了，但 Chrome 还是很顽固。想了想，这玩意居然与浏览器有关，是不是因为不同浏览器默认缓存过期时间不一样导致的呢？于是去看了响应头，终于发现原来是测试时 <code>jekyll serve</code> 出来的服务器根本没有设置响应的 <code>Expires</code>，然后某些浏览器就默认重新加载了…</p>
<p>那刚刚 Ajax 怕不是也是这个原因…</p>
<p>看了一下 github.io 的响应头，有 10min 的 <code>Expires</code>，应该部署上去就没问题了。</p>
<p>其实就是个 HTTP Cache 的问题吧，看来理解还不够深刻…</p>
<p>PS：Chrome 或 Firefox DevTool 的节流（throttling）功能可以方便的模拟真实网络的限速和延迟，本地测试时非常方便。</p>
</section>
<section id="背景的视差parallax效果" class="level3">
<h3 class="anchored" data-anchor-id="背景的视差parallax效果">背景的视差（Parallax）效果</h3>
<p>这个效果很早就做出来了，但现在才开始深入了解。</p>
<p>用 js 监听 <code>scroll</code> 事件动态更新背景图片的 <code>background-position</code>，以前只有 Firefox 可以实现平滑的滚动，而 Chrome 则会在滚动时白屏——这个问题在最近的版本才消失——总之，当时偷懒，把 Chrome 的这个效果给关了。<del>所以根本没人发现有这个效果对吧</del></p>
<p>监听 <code>scroll</code> 确实不是个好方法。Firefox 的 Console 在该效果启用时会弹出警告，文档里说会与异步平移有冲突：</p>
<ul>
<li><p><a href="https://firefox-source-docs.mozilla.org/performance/scroll-linked_effects.html">Scroll-linked effects — Firefox Source Docs documentation</a></p></li>
<li><p><a href="https://staktrace.com/spout/entry.php?id=834">Asynchronous scrolling in Firefox - staktrace.com</a></p></li>
</ul>
<p>——异步平移冲突的情况我没碰到，但不论是 Firefox 和 Chrome 偶尔都会白屏倒是真的。第二篇文章里提到一种纯 CSS 实现 Parallax 的方法，网上也有人说可以用 CSS 3D。</p>
<p>以后再研究吧…</p>
</section>
<section id="评论系统" class="level3">
<h3 class="anchored" data-anchor-id="评论系统">评论系统</h3>
<p>静态博客的评论要托管，之前感觉有点麻烦就没搞。后来想用基于 Github Issue 的现成轮子来做，但是不论是 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 还是 <a href="https://github.com/imsun/gitment">Gitment</a> 都得把 OAuth 的 Client Secret 写在前端，太不安全；后来发现有个叫 <a href="https://github.com/utterance/utterances">Utterances</a> 的基于 Github Apps 的小众项目好像还行，然后就咕咕咕了半年（</p>
<p>再后来就发现了 <a href="https://github.com/giscus/giscus">Giscus</a>，同样是基于 Github Apps，但和 Utterances 的不同之处在于其使用 Discussions 而不是 Issues 来存储数据。个人认为 Discussions 的设计更适合拿来做评论，总之就花了一个晚上实装了。</p>
<p>但是适配动态切换的主题成了大麻烦。后来找到 <a href="https://github.com/giscus/giscus/issues/336">Issue #336</a> 发现可以向 iframe 里 <code>postMessage</code> 改变参数。但需要注意的是 <code>postMessage</code> 之前需先保证 iframe 加载完毕，试图用<code>onload</code> 事件，但测试发现开新界面时还是有概率失败。然后又 Google 了一波发现正确的做法似乎是 iframe 自己发消息表明可以接受 <code>postMessage</code>，于是就修好了。</p>
</section>
</section>
<section id="画廊" class="level2">
<h2 class="anchored" data-anchor-id="画廊">画廊</h2>
<p>（最早的版本没截图找不到了）</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-aboutblog/cnblogs-19.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">博客园 - 第二次重构 - 基于 iMetro 皮肤的 mc01 和 youmu 主题 (2019)</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-aboutblog/cnblogs-20.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">博客园 - 第三次重构，本次重构后支持多皮肤 - 基于 simplememory 皮肤的 yay 主题和基于 iMetro 皮肤的 mc02 主题 (2020)</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-aboutblog/jekyll-pre.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">白模阶段 (2020/12)</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-aboutblog/jekyll-imitate.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">我高仿我自己.jpg (2021/02)</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-aboutblog/jekyll-cur.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">现在的样子 (2021/08, shooted in 2021/12)</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-aboutblog/jekyll-final.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">最终的样子（2022/12/15）</figcaption>
</figure>
</div>
</section>
<section id="尾声" class="level2">
<h2 class="anchored" data-anchor-id="尾声">尾声</h2>
<p>当年的 sun123zxy 还真是对多主题系统有着莫名的执念。最开始的他只是想给博客换个背景，现在似乎已经走的很远了。</p>
<p>博客上线后的 sun123zxy 迎来了充实的高三生活，学业紧张的他却从没有忘记劳逸结合，不停的做着小修小补，甚至在高考倒计时两只手就能数过来的时候他还在……</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">commit 7a2791ebdcc91415982add697a5b40c62044dabc</span>
<span id="cb4-2">Author: sun123zxy &lt;304244450@qq.com&gt;</span>
<span id="cb4-3">Date:   Wed Jun 1 16:23:16 2022 +0800</span>
<span id="cb4-4"></span>
<span id="cb4-5">    update article</span>
<span id="cb4-6"></span>
<span id="cb4-7">commit edc1e5a0c76f91f0e2ee8bd952550b10f53b3b3f</span>
<span id="cb4-8">Author: sun123zxy &lt;304244450@qq.com&gt;</span>
<span id="cb4-9">Date:   Wed Jun 1 12:09:19 2022 +0800</span>
<span id="cb4-10"></span>
<span id="cb4-11">    optimize punctuation, update article</span></code></pre></div>
<p>总之，到此为止，这位不务正业的 OIer 以自己满意的方式结束了高中生活。等待他和他博客的未来，又是怎样的呢？</p>
<p><a href="../../posts/20221226-quarto-fantasia/">博客搭建随想 Part II - Academic Writing’s not All About PDF</a></p>


</section>

 ]]></description>
  <category>站点相关</category>
  <category>web</category>
  <category>回忆</category>
  <guid>https://blog.sun123zxy.top/posts/20210817-aboutblog/index.html</guid>
  <pubDate>Mon, 16 Aug 2021 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Jekyll 测试</title>
  <link>https://blog.sun123zxy.top/posts/20210817-jekyll-test/index.html</link>
  <description><![CDATA[ 



<section id="s-1" class="level2">
<h2 class="anchored" data-anchor-id="s-1">1. Text</h2>
<p>A post model.</p>
<p><a href="../../">A link</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20210817-jekyll-test/baka.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">a baka</figcaption>
</figure>
</div>
<section id="s-1.1" class="level3">
<h3 class="anchored" data-anchor-id="s-1.1">1.1. Inline Math</h3>
<p>Math rendering is powered by <img src="https://latex.codecogs.com/png.latex?%5CKaTeX"></p>
</section>
<section id="s-1.2" class="level3">
<h3 class="anchored" data-anchor-id="s-1.2">1.2. Display Math</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CTeX%20%5CRightarrow%20%5CLaTeX%20%5CRightarrow%20%5CKaTeX%0A"></p>
</section>
</section>
<section id="s-2" class="level2">
<h2 class="anchored" data-anchor-id="s-2">2. Block</h2>
<section id="s-2.1" class="level3">
<h3 class="anchored" data-anchor-id="s-2.1">2.1. Blockquote</h3>
<blockquote class="blockquote">
<p>This is a blockquote.</p>
</blockquote>
</section>
<section id="s-2.2" class="level3">
<h3 class="anchored" data-anchor-id="s-2.2">2.2. Code</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// c++ code</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdio&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-6">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%lld</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <guid>https://blog.sun123zxy.top/posts/20210817-jekyll-test/index.html</guid>
  <pubDate>Mon, 16 Aug 2021 16:00:00 GMT</pubDate>
</item>
<item>
  <title>原创生物遗传大题 - 红白紫薇</title>
  <link>https://blog.sun123zxy.top/posts/20210530-reimu/index.html</link>
  <description><![CDATA[ 



<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>近日，由国家花卉工程技术研究中心与北京林业大学紫薇课题组培育的紫薇新品种“灵梦”通过现场审定。“灵梦”由 Dallas Red 与 Velma’s Royal Delight 两个紫薇品种的杂交后代选育得到，为直立株型，开复色花，红色为底、白色镶边。 现某研究小组对“紫薇”【注】的花色遗传展开研究。</p>
<p><img src="https://blog.sun123zxy.top/posts/20210530-reimu/reimu01.jpg" class="img-fluid" alt="reimu01"><img src="https://blog.sun123zxy.top/posts/20210530-reimu/reimu02.jpg" class="img-fluid" alt="reimu02"></p>
<p>研究小组选取红色纯合“紫薇”与白色纯合“紫薇”作为亲本杂交，<img src="https://latex.codecogs.com/png.latex?F_1"> 全为粉红色“紫薇”。令 <img src="https://latex.codecogs.com/png.latex?F_1"> 自交，<img src="https://latex.codecogs.com/png.latex?F_2"> 各表现型比例如表所示。</p>
<table class="table">
<thead>
<tr class="header">
<th>红色</th>
<th>粉红色</th>
<th>红底白边</th>
<th>粉红底白边</th>
<th>白色</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>3</td>
<td>6</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>已知“紫薇”的花色由两对独立遗传的等位基因（<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BA%7D"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Ba%7D">、<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BB%7D"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bb%7D">）控制，其中 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BA%7D"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Ba%7D"> 控制“紫薇”的底色。</p>
<ol type="1">
<li>“紫薇”花色遗传满足 <code>________</code> 定律， <code>______________</code> （填细胞周期阶段）体现了这一定律（不考虑交叉互换）。</li>
<li>已知一种白色“紫薇”基因型为 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Baabb%7D">，现将该“紫薇”与 <img src="https://latex.codecogs.com/png.latex?F_2">​ 粉红底白边“紫薇”杂交，子代表现型有 <code>____</code> 种。</li>
<li>实验中亲本基因型分别为 <code>______________</code> ；<img src="https://latex.codecogs.com/png.latex?F_2"> 所有表现型中性状可以稳定遗传的有 <code>______________</code> ；<img src="https://latex.codecogs.com/png.latex?F_2"> 白色“紫薇”中纯合子与杂合子的比例为 <code>______</code> 。</li>
<li>研究小组尝试让 <img src="https://latex.codecogs.com/png.latex?F_2"> 所有粉红色“紫薇”自由交配，得到类似“灵梦”的红底白边“紫薇”。推测红底白边“紫薇”在子代中的占比为 <code>____</code> 。</li>
</ol>
<p>【注】紫薇的遗传多样性非常丰富，题目中“紫薇”的花色遗传方式纯属虚构，还请周知。</p>
</section>
<section id="answer" class="level2">
<h2 class="anchored" data-anchor-id="answer">Answer</h2>
<pre><code>(1) 自由组合 第一次减数分裂后期
(2) 2
(3) AABB和aabb 红底白边“紫薇”和白色“紫薇” 1:1
(4) 1/36</code></pre>
</section>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<ol type="1">
<li><p>问送分。</p>
<p>由 <code>红色纯合“紫薇”与白色纯合“紫薇”作为亲本杂交， F_1 全为粉红色“紫薇”</code>，又由 <code>A 与 a 控制“紫薇”的底色</code>，可以判断 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAa%7D"> 表现为粉红色，而 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAA%7D"> 或 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Baa%7D"> 表现为红色或白色。</p>
<p>观察 <img src="https://latex.codecogs.com/png.latex?F_2">​ 表现型比例，初步发现其具有典型 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAaBb%7D"> 性状分离的特征，于是可以断定 <img src="https://latex.codecogs.com/png.latex?F_1">​ 粉红色“紫薇”的基因型为 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAaBb%7D">。</p>
<p>现尝试解释比例。因为 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BA%7D">​​​ 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Ba%7D">​​​ 控制的花色性状与是否杂合有关，故容易想到按“<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BA%7D">​​​ 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Ba%7D">​​ 是否杂合”的标准拆分 <img src="https://latex.codecogs.com/png.latex?9:3:3:1">​，得到 <img src="https://latex.codecogs.com/png.latex?(3+6):(1+2):3:1">​，几乎拿到 <img src="https://latex.codecogs.com/png.latex?F_2">​ 的性状比。推测 <img src="https://latex.codecogs.com/png.latex?F_2">​​​​​​ 白色“紫薇”比例 <img src="https://latex.codecogs.com/png.latex?4%20=%203+1%20=%20%5Cmathrm%7BaaB?%7D%20+%20%5Cmathrm%7Baabb%7D">，而根据 2 问题干 <code>已知一种白色“紫薇”基因型为 aabb</code> 也确认了该推测。进一步对照表格即可得到题眼：</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAA%7D"> 表现为红色，<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAa%7D"> 表现为粉红色，<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Baa%7D"> 表现为白色；</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BB?%7D"> 表现为纯色，<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bbb%7D"> 表现为有白边；</li>
<li>无法区分白色和“白底白边”。</li>
</ul></li>
<li><p>问，粉红底白边“紫薇”的基因型为 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAabb%7D">，与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Baabb%7D"> 测交得到粉红底白边 <img src="https://latex.codecogs.com/png.latex?(%5Cmathrm%7BAabb%7D)">、白色 <img src="https://latex.codecogs.com/png.latex?(%5Cmathrm%7Baabb%7D)"> 两种后代。</p></li>
<li><p>问，亲本基因型分别为 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAABB%7D">​ 和 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Baabb%7D">​； <img src="https://latex.codecogs.com/png.latex?F_2">​ 红色 <img src="https://latex.codecogs.com/png.latex?(%5Cmathrm%7BAABB%7D">​, <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BAABb%7D)">​、粉红色 <img src="https://latex.codecogs.com/png.latex?(%5Cmathrm%7BAaBB%7D,%20%5Cmathrm%7BAaBb%7D)">​、粉红底白边 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B(Aabb)%7D">​ 均可能发生性状分离，而红底白边 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B(AAbb)%7D">​ 和白色 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B(aaBB,%20aaBb,%20aabb)%7D">​ 可以稳定遗传；根据性状分离比，<img src="https://latex.codecogs.com/png.latex?F_2">​ 白色“紫薇”的基因型构成为 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BaaBB%7D:%5Cmathrm%7BaaBb%7D:%5Cmathrm%7Baabb%7D=1:2:1">​，易得纯杂比为 <img src="https://latex.codecogs.com/png.latex?1:1">​。</p></li>
<li><p>问，<img src="https://latex.codecogs.com/png.latex?F_2">​​​ 粉红色“紫薇” <img src="https://latex.codecogs.com/png.latex?(%20%5Cfrac%7B1%7D%7B3%7D%20%5Cmathrm%7BAaBB%7D,%20%5Cfrac%7B2%7D%7B3%7D%20%5Cmathrm%7BAaBb%7D)">​​ 自由交配，要求得到红底白边“紫薇” <img src="https://latex.codecogs.com/png.latex?(%5Cmathrm%7BAAbb%7D)">​​。单独考虑每对基因。对 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BA%7D">​​ 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Ba%7D">​​，根据性状分离比，红底概率为 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B4%7D">​​ 。对 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BB%7D">​​ 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bb%7D">​​，使用配子法，得 <img src="https://latex.codecogs.com/png.latex?(%20%5Cfrac%7B2%7D%7B3%7D%20%5Cmathrm%7BB%7D,%20%5Cfrac%7B1%7D%7B3%7D%20%5Cmathrm%7Bb%7D)">，于是白边概率为 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B3%7D%20%5Ctimes%20%5Cfrac%7B1%7D%7B3%7D%20=%20%5Cfrac%7B1%7D%7B9%7D"> ，综上得到红底白边“紫薇”的概率为 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B4%7D%20%5Ctimes%20%5Cfrac%7B1%7D%7B9%7D%20=%20%5Cfrac%7B1%7D%7B36%7D">​ 。</p></li>
</ol>


</section>

 ]]></description>
  <category>高考</category>
  <category>原创题目</category>
  <guid>https://blog.sun123zxy.top/posts/20210530-reimu/index.html</guid>
  <pubDate>Sat, 29 May 2021 16:00:00 GMT</pubDate>
</item>
<item>
  <title>从不定方程的非负整数解个数谈起</title>
  <link>https://blog.sun123zxy.top/posts/20210501-diophantine/index.html</link>
  <description><![CDATA[ 



<section id="序" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="序"><span class="header-section-number">1</span> 序</h2>
<div id="exm-diophantine" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>求将 <img src="https://latex.codecogs.com/png.latex?n"> 个无标号元素用 <img src="https://latex.codecogs.com/png.latex?m-1"> 个隔板分入 <img src="https://latex.codecogs.com/png.latex?m"> 个有标号可空集合的方案数。</p>
<p>此问题的另一个等价表述是，求不定方程 <img src="https://latex.codecogs.com/png.latex?%0Ax_1%20+%20x_2%20+%20%5Cdots%20+%20x_m%20=%20n%20%5Cquad%20(m,n%20%5Cin%20N_+,%20m%20%5Cle%20n)%0A"> 的非负整数解的个数。</p>
</div>
<p>是一个非常经典的组合问题，众所周知其答案为组合数 <img src="https://latex.codecogs.com/png.latex?%7Bn+m-1%20%5Cchoose%20m-1%7D"> ，这可以根据其组合意义结合隔板法容易的得到。</p>
<p>然而，笔者发现还有很多有趣的方法可以得到上式，值得探讨一番。</p>
</section>
<section id="组合意义" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="组合意义"><span class="header-section-number">2</span> 组合意义</h2>
<p>如上所述，组合意义可以结合隔板法容易的得到。考虑将 <img src="https://latex.codecogs.com/png.latex?n"> 个无标号元素用 <img src="https://latex.codecogs.com/png.latex?m-1"> 个隔板分入 <img src="https://latex.codecogs.com/png.latex?m"> 个有标号非空集合，其方案数为 <img src="https://latex.codecogs.com/png.latex?%7Bn-1%20%5Cchoose%20m-1%7D"> 。然而我们需要的是各集合可空情况下的方案数。考虑新增 <img src="https://latex.codecogs.com/png.latex?m"> 个元素，先给每个集合放一个元素垫底，再做各组可空的分配。这个小Trick让我们将问题转化为求 <img src="https://latex.codecogs.com/png.latex?n+m"> 个无标号元素分入 <img src="https://latex.codecogs.com/png.latex?m"> 个非空有标号集合的方案数。再用隔板法，得到答案 <img src="https://latex.codecogs.com/png.latex?%7Bn+m-1%20%5Cchoose%20m-1%7D"> 。</p>
<p>形式化的，我们令 <img src="https://latex.codecogs.com/png.latex?y_i%20=%20x_i%20+%201"> ，则我们现在只需求 <img src="https://latex.codecogs.com/png.latex?y_1%20+%20y_2%20+%20%5Cdots%20+%20y_m%20=%20n%20+%20m"> 的正整数解，隔板法得到答案 <img src="https://latex.codecogs.com/png.latex?%7Bn+m-1%20%5Cchoose%20m-1%7D"> 。</p>
</section>
<section id="枚举空位vandermonde-卷积公式" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="枚举空位vandermonde-卷积公式"><span class="header-section-number">3</span> 枚举空位——Vandermonde 卷积公式</h2>
<p>我们使用另一种方法将隔板法应用到可空集合上。</p>
<p>枚举 <img src="https://latex.codecogs.com/png.latex?m"> 个集合中有几个是空集，可以得到下式</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Csum_%7Bk=0%7D%5E%7Bm-1%7D%20%7Bm%20%5Cchoose%20k%7D%20%7Bn-1%20%5Cchoose%20m-k-1%7D%0A"></p>
<p>又由</p>
<div id="thm-vandermonde" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (Vandermonde 卷积公式) </strong></span><img src="https://latex.codecogs.com/png.latex?%0A%7Bn+m%20%5Cchoose%20k%7D%20=%20%5Csum_%7Bi=%5Cmax(0,k-m)%7D%5E%7B%5Cmin(n,k)%7D%20%7Bn%20%5Cchoose%20i%7D%20%7Bm%20%5Cchoose%20k-i%7D%0A"></p>
</div>
<p>（该定理易由 <img src="https://latex.codecogs.com/png.latex?(1+x)%5E%7Bn+m%7D%20=%20(1+x)%5En%20(1+%20x)%5Em"> 的二项式展开说明）</p>
<p>可直接得到（ <img src="https://latex.codecogs.com/png.latex?k'%20=%20m-1"> ， <img src="https://latex.codecogs.com/png.latex?n'%20=%20m"> ， <img src="https://latex.codecogs.com/png.latex?m'%20=%20n-1"> ）</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Csum_%7Bk=%5Cmax(0,(m-1)-(n-1))%7D%5E%7B%5Cmin(m,m-1)%7D%20%7Bm%20%5Cchoose%20k%7D%20%7Bn-1%20%5Cchoose%20m-k-1%7D%20=%20%7Bn+m-1%20%5Cchoose%20m-1%7D%0A"></p>
</section>
<section id="递推杨辉三角" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="递推杨辉三角"><span class="header-section-number">4</span> 递推——杨辉三角</h2>
<p>这固然很妙，但要是我想不到这些Trick怎么办？</p>
<p>作为完全不虚递推的 OIer，我们考虑 dp。</p>
<p>设状态 <img src="https://latex.codecogs.com/png.latex?f(n,m)"> 表示将 <img src="https://latex.codecogs.com/png.latex?n"> 个无标号元素放入 <img src="https://latex.codecogs.com/png.latex?m"> 个有标号可空集合的方案数。</p>
<p>考虑当前正在为第 <img src="https://latex.codecogs.com/png.latex?n"> 个元素确定所属集合。既然元素是无标号的，不妨按升序排列集合。于是放入新的元素时，只需决定要先跳过多少个集合再放入。易得下面的递推式</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(n,m)%20=%20%5Csum_%7Bk=1%7D%5Em%20f(n-1,k)%0A"></p>
<p>初始状态满足</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A&amp;f(0,m)=1%20%5C%5C%0A&amp;f(n,0)=%5Bn=0%5D%0A%5Cend%7Baligned%7D%0A%5Cquad%20(n,m%20%5Cin%20N)%0A"></p>
<p>（中括号是艾弗森括号）</p>
<p>不妨列出 <img src="https://latex.codecogs.com/png.latex?f"> 的前几项——</p>
<pre><code>    m0   m1   m2   m3   m4
n0  1    1    1    1    1
n1  0    1    2    3    4
n2  0    1    3    6    10
n3  0    1    4    10   20</code></pre>
<p>很熟悉…这是杨辉三角！</p>
<p>可以由递推式得到杨辉三角的特征——</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af(n,m)%20&amp;=%20f(n-1,%20m)%20+%20%5Csum_%7Bk=1%7D%5E%7Bm-1%7D%20f(n-1,k)%20%5C%5C%0A&amp;=%20f(n-1,%20m)%20+%20f(n,%20m-1)%0A%5Cend%7Baligned%7D%0A"></p>
<p>那么，只需观察并将表格的每一项映射到杨辉三角，我们就能得到 <img src="https://latex.codecogs.com/png.latex?f(n,m)%20=%20%7Bn+m+1%20%5Cchoose%20m-1%7D"> 。</p>
</section>
<section id="生成函数广义二项式定理" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="生成函数广义二项式定理"><span class="header-section-number">5</span> 生成函数——广义二项式定理</h2>
<p><del>要是我连杨辉三角都没看出来怎么办</del></p>
<p>方便起见，此处我们不研究 <img src="https://latex.codecogs.com/png.latex?m=0"> 的情况。不妨设</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(n,m)%20=%20f(n,m+1)%0A"></p>
<p>显然， <img src="https://latex.codecogs.com/png.latex?g"> 的递推式为</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(n,m)%20=%20%5Csum_%7Bk=0%7D%5Em%20g(n-1,k)%0A"></p>
<p>据此我们发现，每一排是其前一排的前缀和数组，或者换句话说，每一排是其后一排的向前差分数组。我们先拿出 <img src="https://latex.codecogs.com/png.latex?n=0"> 一排的OGF</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_0(x)%20=%20%5Cfrac%7B1%7D%7B1-x%7D%0A"></p>
<p>又根据差分</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_n(x)%20=%20g_%7Bn+1%7D(x)%20-%20x%20g_%7Bn+1%7D(x)%20%5Ciff%20g_%7Bn+1%7D(x)%20=%20%5Cfrac%7B1%7D%7B1-x%7D%20g_n(x)%0A"></p>
<p>得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_n(x)%20=%20(1-x)%5E%7B-(n+1)%7D%0A"></p>
<p>又由</p>
<div id="thm-binomial" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2 (广义二项式定理) </strong></span><img src="https://latex.codecogs.com/png.latex?%0A(x+y)%5E%5Calpha%20=%20%5Csum_%7Bk=0%7D%5E%7B%5Cinfty%7D%20%7B%5Calpha%20%5Cchoose%20k%7D%20x%5Ek%20y%5E%7B%5Calpha%20-%20k%7D%0A"></p>
<p>其中</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Calpha%20%5Cchoose%20k%7D%20=%20%5Cfrac%7B%5Calpha(%5Calpha-1)%5Cdots(%5Calpha-k+1)%7D%7Bk!%7D%0A"></p>
</div>
<p>展开，得到</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_n(x)%20=%20%5Csum_%7Bk=0%7D%5E%7B%5Cinfty%7D%20%7B-n-1%20%5Cchoose%20k%7D%20(-x)%5Ek%0A"></p>
<p>故</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ag_n(x)%5Bx%5Ek%5D%20&amp;=%20(-1)%5Ek%20%7B-n-1%20%5Cchoose%20k%7D%20%5C%5C%0A&amp;=%20(-1)%5Ek%20%5Cfrac%7B(-n-1)(-n-2)%5Cdots(-n-k)%7D%7Bk!%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B(n+1)(n+2)%5Cdots(n+k)%7D%7Bk!%7D%20%5C%5C%0A&amp;=%20%7Bn+k%20%5Cchoose%20k%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>即</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(n,k)%20=%20%7Bn+k%20%5Cchoose%20k%7D%0A"></p>
<p>换回 <img src="https://latex.codecogs.com/png.latex?f"> 表示就得到答案</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(n,m)%20=%20g(n,m-1)%20=%20%7Bn+m-1%20%5Cchoose%20m-1%7D%0A"></p>
<section id="update" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="update"><span class="header-section-number">5.1</span> 2023/03/10 update</h3>
<p>事实上，直接从组合意义思考就能直接得到该计数问题的生成函数形式</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(1%20+%20x%20+%20x%5E2%20+%20%5Cdots)%5Em%20=%20%5Cleft(%20%5Cfrac%201%20%7B1-x%7D%20%5Cright)%5Em%20=%20(1-x)%5E%7B-m%7D%0A"></p>
<p>按前述方法展开即可得到相同的结果。</p>
</section>
</section>
<section id="burnsidepolya第一类斯特林数" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="burnsidepolya第一类斯特林数"><span class="header-section-number">6</span> Burnside(Polya)——第一类斯特林数</h2>
<p>如果要分组的 <img src="https://latex.codecogs.com/png.latex?n"> 个元素是有标号的，问题将会简单很多——直接枚举每个元素的所属集合即可，显然方案数为 <img src="https://latex.codecogs.com/png.latex?m%5En"> 。</p>
<p>但关键是它们没有标号。</p>
<p>无标号的本质是认为任意置换标号前后是同构的。这启发我们将所有 <img src="https://latex.codecogs.com/png.latex?n"> 元置换（即置换群）作为变换集，使用等价类计数Burnside来解决该问题。</p>
<p>根据Burnside引理（或Polya定理）</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7B%7CG%7C%7D%20%5Csum_%7Bf%20%5Cin%20G%7D%20C(f)%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?G"> 是变换集， <img src="https://latex.codecogs.com/png.latex?C(f)"> 是变换 <img src="https://latex.codecogs.com/png.latex?f"> 的不动点。</p>
</blockquote>
<p>可以写出</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7Bn!%7D%20%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20m%5E%7B%5Cmathrm%7Bcyc%7D(p)%7D%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bperm%7D(n)"> 表示所有 <img src="https://latex.codecogs.com/png.latex?n"> 元置换的集合，而 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bcyc%7D(p)"> 指置换 <img src="https://latex.codecogs.com/png.latex?p"> 的形成的置换图中环的个数。</p>
<p>在外层枚举 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bcyc%7D(p)"> ，得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7Bn!%7D%20%5Csum_%7Bk=1%7D%5En%20m%5Ek%20%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D"> 是什么？</p>
<blockquote class="blockquote">
<p>第一类斯特林数 <img src="https://latex.codecogs.com/png.latex?%7Bn%20%5Cbrack%20k%7D"> 表示将 <img src="https://latex.codecogs.com/png.latex?n"> 个有标号元素分成 <img src="https://latex.codecogs.com/png.latex?k"> 个无标号圆排列的方案数。</p>
</blockquote>
<p>在置换图中， <img src="https://latex.codecogs.com/png.latex?p_i"> 表示节点 <img src="https://latex.codecogs.com/png.latex?i"> 的下一个节点是 <img src="https://latex.codecogs.com/png.latex?p_i"> 。而枚举置换的过程，正是枚举置换图的过程，也正是枚举圆排列的过程！而 <img src="https://latex.codecogs.com/png.latex?%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D"> 则为我们确定了环，或者说圆排列的个数。</p>
<p>惊讶的，我们发现</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7Bn%20%5Cbrack%20k%7D%20=%20%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D%0A"></p>
<p>带入其中，答案式变为</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7Bn!%7D%20%5Csum_%7Bk=1%7D%5En%20%7Bn%20%5Cbrack%20k%7D%20m%5Ek%0A"></p>
<p>于是，根据第一类斯特林数性质之一</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=1%7D%5En%20%7Bn%20%5Cbrack%20k%7D%20m%5Ek%20%20=%20m(m+1)%5Cdots(n+m-1)%0A"></p>
<p>（该性质可以结合第一类斯特林数的递推式做数学归纳得出）</p>
</blockquote>
<p>我们愉快的得到了答案</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7Bm(m+1)%5Cdots(n+m-1)%7D%7Bn!%7D%20=%20%7Bn+m-1%20%5Cchoose%20m-1%7D%0A"></p>
<p>用Burnside解决无标号问题的思路极具启发性，例如<a href="https://loj.ac/p/6538">烷基计数</a>问题的Burnside解法。</p>
</section>
<section id="后记致谢" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="后记致谢"><span class="header-section-number">7</span> 后记&amp;致谢</h2>
<p><del>同分异构体计数带我重回OI</del></p>
<p>感谢TbYangZ菊苣全程提供技术支持。</p>
<p>感谢神仙化学老师提供组合意义解释。</p>


</section>

 ]]></description>
  <category>OI</category>
  <category>数学</category>
  <category>意识流</category>
  <guid>https://blog.sun123zxy.top/posts/20210501-diophantine/index.html</guid>
  <pubDate>Fri, 30 Apr 2021 16:00:00 GMT</pubDate>
</item>
<item>
  <title>终末之章——CSP-S2020&amp;NOIP2020退役记</title>
  <link>https://blog.sun123zxy.top/posts/20201206-csps2020noip2020travel/index.html</link>
  <description><![CDATA[ 



<section id="序" class="level2">
<h2 class="anchored" data-anchor-id="序">序</h2>
<blockquote class="blockquote">
<p>走了，回来了。不管如何，这条路似乎已经延伸得很漫长了。从兴趣，变成兼修，变成接近专修，又变回兴趣，这中间的路太长，以至于虽然百味杂陈，却说不出什么感想。</p>
<p>——<a href="https://p9t6g.github.io/2020/10/27/NOIP%E5%A4%8D%E4%B9%A0/">《noip2020复习总结》 by p9t6g</a></p>
</blockquote>
<p>谨以此文，或是完全退役前的最后一点日记和随想，纪念即将结束的5年OI生涯。</p>
</section>
<section id="开始了" class="level2">
<h2 class="anchored" data-anchor-id="开始了">开始了？</h2>
<section id="section" class="level3">
<h3 class="anchored" data-anchor-id="section">2020/09/??</h3>
<p>大部分半退役选手调转枪头停晚自习了。</p>
<p>表示一点都不慌，学文化使我快乐 <del>这么早停干啥啊</del></p>
</section>
</section>
<section id="初赛" class="level2">
<h2 class="anchored" data-anchor-id="初赛">2020/10/11 初赛</h2>
<p>打开选择题…</p>
<p>就这？就这？毒瘤的组合计数和概率期望去哪里了？？？</p>
<p>话说考初赛前几天学校翻修科技楼时把几个计算机科学大佬挂在走廊上增加逼格，结果上面有个香农…</p>
<p>于是选择题就AK了。</p>
<p>有点小飘，一看程序题…这画风不太对劲…</p>
<p>于是差点没做完。<code>nth_element</code>看了半天当成快排了，字符串转圈算不来。二进制dp考场都硬是没看懂，被迫与ABCD斗智斗勇；对完答案发现前面又离奇错一堆，复杂度还算错，当场掉到70+，感觉凉凉。</p>
<p>Anyway，又没复习又没刷题，文化课选手也不指望考得好好，过线万岁吧。</p>
</section>
<section id="开始了-1" class="level2">
<h2 class="anchored" data-anchor-id="开始了-1">开始了。</h2>
<section id="section-1" class="level3">
<h3 class="anchored" data-anchor-id="section-1">2020/10/19</h3>
<p><del>复赛线只有40pt啊</del></p>
<p>申请了晚自习停课，回到了熟悉的小机房里。进门就被亲切的垃圾发酵气味欢迎…</p>
<p>坐到机房最后一个机位上，位置比去年还要摸鱼。清理了桌上堆成小山的垃圾，使用成吨的纸巾擦去了成吨的灰尘，托p9t6g装了个win10，终于坐到了位置上。</p>
<p>观察一下周围… <del>怎么你们比去年还颓啊</del></p>
</section>
<section id="section-2" class="level3">
<h3 class="anchored" data-anchor-id="section-2">2020/10/26</h3>
<p>模拟赛被各种虐爆，主席树sb题写了2h，被高一选手吊打。</p>
<p>感觉很菜，但心态良好（</p>
<p>颓废方面的话，只是隔几天打一小会妖妖梦或者随机绀而已。说实话有一段时间没碰东方了，以前收率拉满的反魂蝶现在都有点吃力。</p>
<p>记得初三高一的时候还时常能看到肝正作的同学（那时还有几个上一届的学长），不知不觉的就剩我一个了…</p>
<p>下一届学弟学妹不太了解，不知道东方的火炬能不能继续传下去。</p>
</section>
<section id="section-3" class="level3">
<h3 class="anchored" data-anchor-id="section-3">2020/11/04</h3>
<p>嗯，我知道过几天就CSP了，但突然有点学不进去…</p>
<p>于是在机房学了波Jekyll，装了Git开始手撸新博客前端…</p>
</section>
</section>
<section id="csp-s2020" class="level2">
<h2 class="anchored" data-anchor-id="csp-s2020">CSP-S2020</h2>
<section id="day-0" class="level3">
<h3 class="anchored" data-anchor-id="day-0">2020/11/06 Day 0</h3>
<p>试机日。</p>
<p>以前NOIP都在宇宙名校举行，地方都不用挪。这回换到了NK的一个奇远无比的校区，于是很新奇的有了一次集体旅行的经历。</p>
<p>坐上车才发现CCF早就给了一等分数线，emmm 70pt…那我尽量和六年级小朋友度长絜大一下吧（笑） flag x1</p>
<p><del>后来发现70pt是初赛一等奖线，白高兴一场</del></p>
<p>大巴一路东行。不知不觉，窗外已是高低起伏的绿色的海洋。明明是条正规的国家高速公路，居然到处坑坑洼洼。大巴前侧小一届的学弟们在棋牌娱乐，车后一众老年人却沉迷手游。 <del>好像不太符合社会规律？</del></p>
<p>PC玩家只能往窗外望。一路上又是架桥又是隧道的，让人不禁怀疑这是哪门子鬼地方。忍不住开始吐槽：</p>
<ul>
<li>试机 <img src="https://latex.codecogs.com/png.latex?%5Ciff"> 去郊游</li>
<li>前往LJNK中学为山区孩子送去温暖</li>
<li>…</li>
</ul>
<p>摇摇晃晃四十多分钟，到了。还没下车，只见一座巨型空心扁平圆柱建筑矗立校园中央…</p>
<p>“这是……土楼？”</p>
<p><del>山区少数民族聚居地学校</del></p>
<p>整个学校独占了一个极大的街区，旁边是一些附属建筑和一个标准体育场，在巨大的圆柱面前显得额外渺小。</p>
<p>说实话修的还是蛮好的，但确实太偏僻了，周围全都是些巨型吊车，没啥人烟。</p>
<p>考试场地——伯苓体育馆 <del>爆零体育馆</del></p>
<p>合了影就进去试机了。虽然停不下来吐槽，但还是得给考试场地点个赞。体育馆就是不一样，里面非常宽敞明亮，几百台电脑的大型阵列让人印象深刻。</p>
<p>随便写了个 <code>a+b problem</code> 就开始玩这里的局域网，差点搭了个FTP起来。</p>
<p>Waper爷和disangan233在我的怂恿之下开始快乐联机CS1.6（</p>
<p>总之试机日就这样过去了，堵车堵了快2h才到家，颓了会儿 Portal 2 就睡觉了。</p>
</section>
<section id="day-1" class="level3">
<h3 class="anchored" data-anchor-id="day-1">2020/11/07 Day 1</h3>
<p>睡了10个小时，早上9点以饱满的精神状态醒来<del>开始撸博客前端</del>，吃完午饭才感觉有点慌，去敲了个倍增LCA压压惊，然后慢摇摇的坐车到了考场。</p>
<p>开考后断局域网好评，分片区上厕所好评，发的三明治馅料十足好评（</p>
<p>T1瞪了2min直接跳了，30min切了T2（这回长记性了，开了<code>unsigned long long</code>），T3想了会儿感觉应该不会做，于是就开了T4。</p>
<p>一开始感觉直接就顺着for一道随便模拟+博弈一下就可以了，没怎么细想就开始敲代码。调了调然后发现过不了大样例，总有个 <img src="https://latex.codecogs.com/png.latex?%5Cpm%201"> 的误差。再次思考发现之前的做法有一点逻辑上的漏洞，正着for完一道还要回溯做博弈，于是又写又改，还是没过大样例。</p>
<p>此时已过2.5hour，有点小慌，回头去敲T1。时间紧张，忘记了开考时想到的更好写的前缀和+二分，直接糊了个一堆if的 <img src="https://latex.codecogs.com/png.latex?O(q)"> 上去结果半天没调过（赛后还发现以为能过的40pt部分都有锅），炸裂。</p>
<p>出考场交流了一下，似乎T4人均写错误解法然后观察大样例用奇偶性水过了，有点不爽。Waper爷讲了讲T3的做法，听了个大概，确实是我做不起的题，溜了溜了。</p>
<p>分数有点惨，丢人啊。真就和六年级小朋友度长絜大是吧…</p>
<p>暂时别想了，回去颓吧。于是晚上又是 Portal 2 和搭博客。</p>
<p>…</p>
</section>
<section id="赛后" class="level3">
<h3 class="anchored" data-anchor-id="赛后">2020/11/08 赛后</h3>
<p>个人认为考试时精神状态还可以，开题策略上也没啥问题，跳过码农T1和八成不会做的T3都是很正确的选择。但是应该先把跳了的题的各种idea记录下来的。</p>
<p>T4考场代码已经将近正解了，但是因为少发现了个关键性质没有搞出来。还是莽撞了，没多想就开始敲压轴题是大忌啊。不熟悉四道题的赛制、过分低估CSP-S的难度也是一个原因。 <del>谁叫教练考前一直奶我们人均AK</del></p>
<p>也不知道是否会计入省选成绩，不过作为一个月后就该退役的文化课选手也没啥好担心的对吧？</p>
<p>当给NOIP攒RP吧。</p>
<p>upd: 初评出来了，居然没有挂分（ <del>分也就那么一点</del></p>
</section>
</section>
<section id="要来了" class="level2">
<h2 class="anchored" data-anchor-id="要来了">要来了。</h2>
<section id="section-4" class="level3">
<h3 class="anchored" data-anchor-id="section-4">2020/11/23</h3>
<p>开始停课了。 <del>翘了期中考试</del></p>
<p>没有什么特别的感想，除了不用上早自习能多睡一会儿。</p>
<p>天天都考四道题，感觉还是做不完，而且考后也做不完…</p>
<p>教练让我们每个人出道题出来和别的学校换题，莫名感觉这次又要像之前的两次互测一样咕掉。</p>
<p>说实话搞了那么久OI一次校内互测都没有举行，真的感觉非常遗憾，好想把自己的idea分享给别人，好想在校内OJ上留下点自己的印记…</p>
<p>一年前准备投给互测的 <a href="../../posts/20201206-spring/">白银之春</a> 老std一堆bug，干脆重构了一遍。顺便一起给半退役后摸出来的 <a href="../../posts/20201206-gcdconv/">GCD卷积</a> 造了数据，挂Github上准备投题。</p>
<p>UPD: 真的咕了 <del>sb教练再次欺骗了我的感情</del> 。反正没机会了就挂在博客上了，希望有人看到了拿来玩（</p>
</section>
<section id="section-5" class="level3">
<h3 class="anchored" data-anchor-id="section-5">2020/11/29</h3>
<p>周五晚上和Waper、p9t6g在机房颓完CS1.6，回家时和Waper爷聊到我们长长的OI生涯。今天突然看到了他的 <a href="https://www.luogu.com.cn/blog/EnderManWaper/oi-hui-yi-lu">OI回忆录</a> ，有点小感伤。</p>
<p>我校最早接触OI的10个所谓“信息特长生”，最终也只剩下了Waper一个人孤军奋战。看到昔日的战友一个个离去，我不知道Waper内心的感受。</p>
<p>死人并没有什么悲伤，只有活着的人在承受离别的痛苦。</p>
<p>Waper爷平时看上去像个大老粗人，但他对五年OI生涯的感情是非常细腻的。平时和他交流不算太多，但作为离开的九位同学中坚持得还算长的，我也是看着Waper默默努力了5年，达到了现在的高度。初一初二的时候，总是他，一个人在机房后面学习更高更难的算法，横眉冷对初中竞赛教练的鄙夷和其他同学的不解。现在他又要和更多更强的选手竞争，承受文化课和竞赛成绩的双重压力…</p>
<p>也不知道Waper会不会看到这篇博客，在这里向你表达衷心的祝愿，希望能在明年NOI的Au榜上看到你的身影。</p>
</section>
<section id="section-6" class="level3">
<h3 class="anchored" data-anchor-id="section-6">2020/12/02</h3>
<p>又是 Day -2 ，又是考前信心赛，又是T2换根dp，又没调出来，又是倒数第一…</p>
<p><a href="../../posts/20191117-csps2019travel/#day--2">历史总是惊人的相似</a></p>
<p>自闭了，撸了一天的前端（</p>
</section>
</section>
<section id="noip2020" class="level2">
<h2 class="anchored" data-anchor-id="noip2020">NOIP2020</h2>
<section id="day-0-1" class="level3">
<h3 class="anchored" data-anchor-id="day-0-1">2020/12/04 Day 0</h3>
<p>因为考场和CSP一样就没去试机。</p>
<p>大清早刚到机房不久halfway就来打气，听了还是蛮开心的。<del>这回没有可乐和士力架差评</del></p>
<p>中午机房出现了6人联机CS1.6的空前盛况，玩的很开心。</p>
<p>觉得自己八成回不来了，于是给机房电脑擦除了数据，回家打了一小会CSGO，睡了。</p>
<p>争取明天给自己画上一个完美的句号吧。</p>
</section>
<section id="day-1-1" class="level3">
<h3 class="anchored" data-anchor-id="day-1-1">2020/12/05 Day 1</h3>
<p>早上6:15起来往考场赶，又在学校里晃了半个多小时才进考场。<del>LJNK的操场台阶很适合躺着睡觉啊 (?)</del></p>
<p>T1是个什么沙包题啊，封装一下分数吧，20min切了。</p>
<p>然后T2就把我最后一次NOIP埋葬了。</p>
<p>字符串？NOIP不是几百年没考字符串了吗？？</p>
<p>有点慌，看懂题意想了想，奇偶性随便预处理一下能解决，应该是要枚举字符串 <img src="https://latex.codecogs.com/png.latex?C"> 的，然后发现要判循环节大小。然后发现自己只会 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Csqrt%20n)"> 判，外面还要多乘上个 <img src="https://latex.codecogs.com/png.latex?O(n)"> ，不如暴力。然后想到KMP，但好久没做字符串了，不敢确定它真的能判，就丢了。上了个厕所想到哈希过后怎么dp搞搞，但从厕所回来就忘掉思路了，一直觉得没有比暴力更优的思路。呆呆了看了10min，回头再看吧，跳题了。</p>
<p>两种正确做法想到了都没打，不愧是我。</p>
<p>T3是几百年没出现过的乱搞+构造+SPJ。随便画了画出了个类似汉诺塔移法的东西，看到 <img src="https://latex.codecogs.com/png.latex?n"> 、 <img src="https://latex.codecogs.com/png.latex?m"> 不大就准备开写。脑中闪过爆炸的CSP-S T4，又仔细的把算法的细节完善了一下才开敲。</p>
<p>于是90分钟过去了，甚至还没有开始调试。慌张的一批，开T4了。嗯，30分是能暴力+二分判的，40分来点除法也是能骗的，后面的暂时别管吧，于是现在面临敲T4暴力、敲应该是正解的T3、回头看T2的选择。</p>
<p>我选择了敲T3。</p>
<p>又写了30min，前三个样例过了。又调了30min，还是过不了最大的样例。此时只剩40min，丢掉去敲T4的30分，过了。茫然的瞪了5分钟T2，比赛结束了。</p>
<p>1=不保，惨淡退役。</p>
<p>因为之前做过心理准备，所以情绪还算稳定。出考场听说T2人均KMP <img src="https://latex.codecogs.com/png.latex?O(26%20%5Ctimes%20n%20%5Cln%20n)">，但脑子已经不好使了，还是不太会做。坐在车上想起厕所里想到的hash，发现似乎直接暴力调和级数跳就可以处理循环节了，emmm…</p>
<p>又想起自己打了那么久的T3好像还是 <img src="https://latex.codecogs.com/png.latex?O(n%20m%5E2)"> 的，算法没假时间复杂度却假了，呵呵。</p>
<p>T1卡不卡高精、入度出度什么的，已经不重要了。</p>
<p>p9t6g说他30min切了T1、T2，惹不起打扰了。Waper爷T2、T4都拿了不少的分，不知道能不能上省队线。高三来划水的的Ag爷trrb倒是很低调的拿了个340，膜膜膜。</p>
<p>和Waper、trrb坐车回家了。</p>
<p>某一瞬间，似乎有点恍惚。</p>
<p>回过神来，发现自己正哼着《さくらさくら ～ Japanize Dream…》。</p>
<p><img src="https://blog.sun123zxy.top/posts/20201206-csps2020noip2020travel/p9t6g_chat.png" class="img-fluid"></p>
</section>
<section id="赛后-update-20201208" class="level3">
<h3 class="anchored" data-anchor-id="赛后-update-20201208">赛后 （Update 2020/12/08）</h3>
<p>初评出来了。T1居然卡了40分的通分 <code>a*b</code> 爆 <code>long long</code>，向出题人致以诚挚的问候。</p>
<p>去年和今年的CSP-S都设了坑，第一题考察数据范围细节也许会成为NOIP新常态吧。</p>
<p>无脑 <code>long long</code> 的时代结束了。</p>
<p>…</p>
<p>要是运气好一点，也许路上哼的就是《紅楼 ～ Eastern Dream…》了吧。</p>
<p>作为垃圾退役选手，考场降智秒不掉T2也算可以接受，当T3把锐气削减后，结局基本就没有悬念了。遗憾的是没有回头去看一眼T2，不仅没能切掉，白送的45分暴力也丢掉了。T3玩了那么长的时间也没调得出来。</p>
<p>其实这样的结局也不完全是运气所致。本来就只是抱着划水的心态，为竞赛生涯画个句号罢了，考前的那么多次模拟赛，似乎也并没有特别努力的去得分。本想着可以和去年一样轻松拿奖，怎料划着划着就翻船了呢。</p>
<p>也许真的是去年手感太顺了吧。</p>
</section>
</section>
<section id="结束了" class="level2">
<h2 class="anchored" data-anchor-id="结束了">结束了。</h2>
<p>名正言顺的退役了。</p>
<p>学了那么多年OI还是个小透明，要说给别人留下了什么印象，也就初三考省选时给保安讲哈希的神奇经历了吧。</p>
<p>很早以前就意识到自己和别的OIer不太一样了。别人的颓废是打游戏水知乎，而我喜欢瞎学点没用的东西。</p>
<p>OI是我的兴趣，但不是唯一的兴趣，而我也没有凭兴趣使然就有学上的天赋。本来想得就比别人慢，本来题量就没有别人大，本来就知道自己是不务正业的OIer，这也许就决定了我在OI上的高度了吧。学了那么几年撞到一次省一，我已经满足了。</p>
<p>五年的OI生涯已经不算短了，虽然没有碰到几个知心朋友，但是收获是不可估量的。OI保持并强化了我对计算机的兴趣，也让我对这个世界更加好奇了。我想若是没有OI的经历，或许我不会为了搭博客去学前端和网络原理，不会那样从容的在Unity里使用C#，不会用Python在Minecraft里造红石音乐，不会有支持所有前述整活的码力；也不会在学孟德尔的豌豆时想到FMT，学有机化学时想到Burnside和生成函数；更永远不会为了搞懂生成树计数独立证明行列式的几大定理，不会翻开《算法导论》惊叹于“没用的”数论在RSA加密里的美妙运用，永远不知道“理性愉悦”是多么的让人快乐……我甚至觉得OI间接的帮助我入坑了东方——我们享受解决问题带来的快感，我们分享题解为后人搭桥，我们把有趣的idea出成题目给大家分享，我们还用爱发电，建立并维护了洛谷、UOJ、LOJ、etc. 那么多规模可观的OI社区，这份热爱和同人精神的本质是一样的啊。</p>
<p>我相信这五年带给我的成长在更远的将来是有价值的。</p>
<p>完全投身文化课的学习，我知道这并不是条容易的路，但我会尽力在其中找到乐趣。还有战友在OI这条船里奋斗，祝愿你们在接下来的省选和NOI取得满意的分数，过一个轻松一点的高三。</p>
<p>退役不代表完全离开OI。还有几篇未完成的学习笔记（有一篇写了20多k了舍不得丢掉（笑）），咱尽量找时间填上。也许闲暇时也会继续学点东西理性愉悦一下。</p>
<p>我们在各自的道路上奋斗，我们都有光明的未来。</p>
<p style="text-align: right">
——NOIP2020赛后 记
</p>
</section>
<section id="section-7" class="level2">
<h2 class="anchored" data-anchor-id="section-7">???</h2>
<blockquote class="blockquote">
<p>惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭，是造物者之无尽藏也，而吾与子之所共适。</p>
<p>客喜而笑，洗盏更酌。肴核既尽，杯盘狼籍。相与枕藉乎舟中，不知东方之既白。</p>
<p style="text-align: right">
——《赤壁赋》
</p>
</blockquote>
<p><strong>Next Phantasm…</strong></p>


</section>

 ]]></description>
  <category>OI</category>
  <category>游记</category>
  <category>回忆</category>
  <guid>https://blog.sun123zxy.top/posts/20201206-csps2020noip2020travel/index.html</guid>
  <pubDate>Sat, 05 Dec 2020 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
