<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>sun123zxy&#39;s blog</title>
<link>https://blog.sun123zxy.top/listings/dedicated.html</link>
<atom:link href="https://blog.sun123zxy.top/listings/dedicated.xml" rel="self" type="application/rss+xml"/>
<description>Written with more care.</description>
<image>
<url>https://blog.sun123zxy.top/assets/images/pi.jpg</url>
<title>sun123zxy&#39;s blog</title>
<link>https://blog.sun123zxy.top/listings/dedicated.html</link>
</image>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sun, 22 Sep 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>原根、原根存在定理和模 m 剩余类环的乘法结构</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20240922-pr/</link>
  <description><![CDATA[ 




<section id="序" class="level2 page-columns page-full" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="序"><span class="header-section-number">1</span> 序</h2>
<p>这次来聊聊原根．何谓原根？本原单位根是也．何谓本原单位根？自乘若干次而归于一者，谓之单位根．若兼为乘法生成元，则称其本原，以示强调．原根有三定理，一是判定原根的方法，二是原根存在的条件，三是对原根的计数<sup>1</sup>．其中原根存在定理最难证明．固然有初等数论的证法，然而技巧性较强，或有碍阅读，亦难于记忆．使用代数方法研究原根，虽对基础有一定要求，证明亦不短，但胜在自然流畅，更具启发性．本文宗旨，应用代数工具，对模 <img src="https://latex.codecogs.com/png.latex?m"> 剩余类环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z%20/%20m%20%5Cmathbb%20Z"> 的乘法结构做出流畅的刻画，兼以部分随性的发散讨论，原根存在定理则作为推论导出．我们介绍的内容对有经验的读者或属“自证不难”，但完整证明的逻辑链条较长，需要了解原根的人群亦不一定有系统的代数基础（如 OI / XCPC 算法竞赛选手），故整理于此，供略知代数一二的同学按图索骥．</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;这三个定理的提法来自 <a href="https://oi-wiki.org/math/number-theory/primitive-root/">OI Wiki 的原根介绍</a>．</p></div></div><p>篇幅所限，无法完全做到 self-contained，故如下阅读建议供读者参考：</p>
<ul>
<li><p>完全没有抽象代数基础：</p>
<p>可能在阅读中遇到较大的困难。</p></li>
<li><p>有朴素的抽象代数基础：</p>
<ul>
<li>如数学基础不错的 OIer / XCPCer</li>
<li>如上过一学期计算机系离散数学课程</li>
<li>如会证 Polya 计数 / 理解群论的 Lagrange 定理 / 用抽代观点思考过初等数论问题</li>
</ul>
<p>小节&nbsp;2 讨论原根三定理，小节&nbsp;3 讨论中国剩余定理，小节&nbsp;4 介绍了看待模 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha"> 乘法的 <img src="https://latex.codecogs.com/png.latex?p"> 进制观点，小节&nbsp;5 用 Dirichlet 卷积和 Möbius 反演证明了很强的结果，小节&nbsp;6 讨论了二项式系数的含 <img src="https://latex.codecogs.com/png.latex?p"> 量，大部分内容基础要求不高，有料有用，亦可提升观点，敬请放心食用．其余涉及 Sylow 定理、直积识别等进阶知识的内容，请据个人基础、兴趣和胆识酌情阅读．</p></li>
<li><p>有抽象代数基础：</p>
<ul>
<li>如上过一学期抽象代数课程</li>
</ul>
<p>应可顺畅阅读全文．模 <img src="https://latex.codecogs.com/png.latex?m"> 剩余类环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z%20/%20m%20%5Cmathbb%20Z"> 有较简单的显式表达，其乘法结构却不甚平凡，是操练抽象代数的良好玩具．本文大部分内容整合改编自 <span class="citation" data-cites="dummit_abstract_2003">[1]</span>，有经验的读者可参考本文查漏补缺、按图索骥．</p></li>
</ul>
</section>
<section id="sec-prthm" class="level2 page-columns page-full" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="sec-prthm"><span class="header-section-number">2</span> 原根三定理：代数观点速通</h2>
<p>研究模 <img src="https://latex.codecogs.com/png.latex?m"> 加法和乘法的结构，便是研究模 <img src="https://latex.codecogs.com/png.latex?m"> 剩余类环 <img src="https://latex.codecogs.com/png.latex?Z_m%20:=%20%5Cmathbb%20Z%20/%20m%20%5Cmathbb%20Z"> 的性质．特别地，若仅关心其上乘法的结构，可取 <img src="https://latex.codecogs.com/png.latex?Z_m"> 全体乘法可逆元构成的乘法群（亦作简化剩余系） <img src="https://latex.codecogs.com/png.latex?%0AZ_m%5E%5Ctimes%20=%20%5C%7B%20a%20%5Cin%20Z_m%20:%20%5Cgcd(a,m)%20=%201%20%5C%7D%0A"> 做研究，事实上，<img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 恰由全体 <img src="https://latex.codecogs.com/png.latex?Z_m"> 作为加法群的生成元构成，而 Euler totient 函数 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)"> 恰为此群的大小——这些都是数论中经典的 Bézout 定理的简单推论．</p>
<div class="proof remark page-columns page-full">
<p><span class="proof-title"><em>注记</em>. </span>值得一提，我们现在虽专注于模 <img src="https://latex.codecogs.com/png.latex?m"> 乘法的研究，但 <img src="https://latex.codecogs.com/png.latex?Z_m"> 乘法与加法并非相互割裂．环上的每一乘法可逆元 <img src="https://latex.codecogs.com/png.latex?a"> 自然诱导出加法群的自同构 <img src="https://latex.codecogs.com/png.latex?x%20%5Cmapsto%20ax">，故有 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes%20%5Chookrightarrow%20%5Coperatorname%7BAut%7D(Z_m)"><sup>2</sup>．事实上，由于 <img src="https://latex.codecogs.com/png.latex?Z_m"> 作为 <img src="https://latex.codecogs.com/png.latex?m"> 阶加法循环群结构简单，仅乘法可逆元便可诱导出其加法群的全部自同构，因此上述单同态亦具有满性：<img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes%20%5Ccong%20%5Coperatorname%7BAut%7D(Z_m)"><sup>3</sup>．综上，<img src="https://latex.codecogs.com/png.latex?Z_m"> 上的可逆乘除操作，同 <img src="https://latex.codecogs.com/png.latex?Z_m"> 作为加法群的自同构存在一一对应关系；探明模 <img src="https://latex.codecogs.com/png.latex?m"> 乘法的结构，亦对研究模 <img src="https://latex.codecogs.com/png.latex?m"> 加法有所裨益．这种观点将立刻在 定理&nbsp;2（原根个数定理）的证明中发挥效用．</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;以后使用 <img src="https://latex.codecogs.com/png.latex?%5Chookrightarrow"> 表单同态，<img src="https://latex.codecogs.com/png.latex?%5Ctwoheadrightarrow"> 表满同态，<img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BAut%7D(Z_m)"> 为 <img src="https://latex.codecogs.com/png.latex?Z_m"> 作为加法群的全体自同构所构成的群．</p></div><div id="fn3"><p><sup>3</sup>&nbsp;读者自证不难．亦可参见 <span class="citation" data-cites="dummit_abstract_2003">[1, section 4.4, proposition 16, p.&nbsp;135]</span></p></div></div></div>
<p>柿子挑软的捏，我们自然关心那些较为简单的模 <img src="https://latex.codecogs.com/png.latex?m"> 乘法的结构．何谓简单？<img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 是循环群便是简单——因其只需一个元素便可生成——而这一元素，即（定义）为原根．译为白话，模 <img src="https://latex.codecogs.com/png.latex?m"> 意义下的原根 <img src="https://latex.codecogs.com/png.latex?g"> 定义为满足 <img src="https://latex.codecogs.com/png.latex?%0Ag%5E%7Bk%7D%20=%201%20%5Cpmod%20m%20%5Ciff%20%5Cvarphi(m)%20%5Cmid%20k%0A"> 的某一非零整数．</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BP%7D%20%5Csubseteq%20%5Cmathrm%7BNP%7D">，故在寻找原根前先讨论如何判定原根．原根判定定理给出了判定某一 <img src="https://latex.codecogs.com/png.latex?g%20%5Cin%20Z_m%5E%5Ctimes"> 是否为原根的简易方法：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-pr-test" class="theorem">
<p><span class="theorem-title"><strong>定理 1 (原根判定定理)</strong></span> <img src="https://latex.codecogs.com/png.latex?g"> 是乘法群 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的生成元当且仅当对每个 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)"> 的素因子 <img src="https://latex.codecogs.com/png.latex?p">，都有 <img src="https://latex.codecogs.com/png.latex?g%5E%7B%5Cvarphi(m)/p%7D%20%5Cneq%201">．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>读者自证不难．</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>这一定理可以认为是有限循环群上的 Lagrange 定理的一个应用：对任意 <img src="https://latex.codecogs.com/png.latex?d%20%5Cmid%20n">，任意 <img src="https://latex.codecogs.com/png.latex?n"> 阶循环群都保有一个 <img src="https://latex.codecogs.com/png.latex?d"> 阶子群；反之，任意子群的阶一定是 <img src="https://latex.codecogs.com/png.latex?n"> 的因子．</p>
</div>
<p>假定已知模数 <img src="https://latex.codecogs.com/png.latex?m"> 保有一原根，我们进而关心其所有原根之间的相互结构．特别地，我们关心原根有多少个：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-pr-number" class="theorem">
<p><span class="theorem-title"><strong>定理 2 (原根个数定理)</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 是循环群，则其恰有 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(%5Cvarphi(m))"> 个生成元．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>在我们的叙述下，原根个数定理成为一句废话．根据条件，作为乘法群的 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 与加法群 <img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cvarphi(m)%7D"> 同构，而 <img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cvarphi(m)%7D"> 当然可以根据其上的加法定义出乘法，进而升级为环．正如前文提到的，<img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cvarphi(m)%7D"> 全体（加法）生成元恰为 <img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cvarphi(m)%7D%5E%5Ctimes"> ．再通过上述同构关系，我们便得到 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 中的所有生成元的数量及其相互关系．</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>从计算原根的角度来看，上述结果并未给出显式给出 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的生成元，这是因为 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 与 <img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cvarphi(m)%7D"> 之间同构的具体形式尚不明确．但我们可以利用原根判定定理（和快速幂）从小到大逐一验证．由于原根数量高达 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(%5Cvarphi(m))"> 个，一般很快就能找到．事实上当模数为质数 <img src="https://latex.codecogs.com/png.latex?p"> 时，最小原根有渐进上界估计 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B1/4%20+%20%5Cvarepsilon%7D)"> 和下界估计 <img src="https://latex.codecogs.com/png.latex?%5COmega(%5Clog%20p)">．<a href="https://oi-wiki.org/math/number-theory/primitive-root/">OI Wiki</a> 给出了上述结果的一些参考文献．</p>
</div>
<p>当然，并非每个 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 都是循环群，因此不是所有模数 <img src="https://latex.codecogs.com/png.latex?m"> 都保有原根．原根存在定理给出了使得 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 确为循环群的所有 <img src="https://latex.codecogs.com/png.latex?m">：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-pr-exist" class="theorem">
<p><span class="theorem-title"><strong>定理 3 (原根存在定理)</strong></span> 使得 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 成为循环群的正整数 <img src="https://latex.codecogs.com/png.latex?m"> 有且只有 <img src="https://latex.codecogs.com/png.latex?2,4,%20p%5E%5Calpha,%202%20p%5E%5Calpha">，这里 <img src="https://latex.codecogs.com/png.latex?p"> 是奇质数，<img src="https://latex.codecogs.com/png.latex?%5Calpha"> 是正整数．</p>
</div>
</div>
</div>
</div>
<p>这一定理不如前两个定理显然，需要我们对环 <img src="https://latex.codecogs.com/png.latex?Z_m"> 的结构做更深的探讨．事实上，与其只关心 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 是不是循环群，不如更进一步，看看 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 究竟同构于哪些循环群的直积；与其只关心 <img src="https://latex.codecogs.com/png.latex?Z_m"> 的乘法结构，不如将本来就与乘法紧密相关的加法结构一并纳入考虑．在之后的讨论中，我们将先解剖出模 <img src="https://latex.codecogs.com/png.latex?m"> 剩余类环 <img src="https://latex.codecogs.com/png.latex?Z_m"> 的结构，随后具体讨论 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的结构，顺带产生关于原根存在性的结果．</p>
</section>
<section id="sec-crt" class="level2 page-columns page-full" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="sec-crt"><span class="header-section-number">3</span> <img src="https://latex.codecogs.com/png.latex?Z_m"> 的结构：中国剩余定理</h2>
<p>既然是研究环与同余的结构，就必然要提到中国剩余定理．回忆数论中最常见的中国剩余定理：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-crt-number-theory" class="theorem">
<p><span class="theorem-title"><strong>定理 4 (中国剩余定理：数论)</strong></span> 给定 <img src="https://latex.codecogs.com/png.latex?n"> 个同余方程 <img src="https://latex.codecogs.com/png.latex?%0Ax%20%5Cequiv%20a_i%20%5Cpmod%7Bm_i%7D%0A"></p>
<p>其中各 <img src="https://latex.codecogs.com/png.latex?m_i"> 两两互质，<img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Cdots,%20n">．记 <img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta_i%20=%20%5Cprod_%7Bj%20%5Cneq%20i%7D%20m_j%20%5Coperatorname%7Binv%7D_%7Bm_i%7D(m_j)%0A"> 则上述方程组等价于 <img src="https://latex.codecogs.com/png.latex?%0Ax%20%5Cequiv%20%5Csum_%7Bi=1%7D%5En%20a_i%20%5Cdelta_i%20%5Cpmod%7B%5Cprod_%7Bi=1%7D%5En%20m_i%7D%0A"> 这里 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Binv%7D_%7Bm_i%7D(m_j)"> 代表 <img src="https://latex.codecogs.com/png.latex?m_j"> 在模 <img src="https://latex.codecogs.com/png.latex?m_i"> 意义下的逆元．</p>
</div>
</div>
</div>
</div>
<p>注意到<sup>4</sup> <img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta_i%20%5Cbmod%20m_k%20=%20%5Cdelta%20(i=k)%0A"> 这是中国剩余定理的神髓所在：构造一组强力的“基底”，其中每一元素在其对应模数下的表现恰似单位元，而在其它模数下全无效力．我们指出，这一构造在中国剩余定理的环论版本中同样管用．先将数论中的中国剩余定理用环论的语言重述：</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;这里我们记 <img src="https://latex.codecogs.com/png.latex?%5Cdelta(P)%20=%20%5Cbegin%7Bcases%7D1%20&amp;%20P%20%5Ctext%7B%20is%20true%7D%20%5C%5C%200%20&amp;%20%5Ctext%7Botherwise%7D%5Cend%7Bcases%7D"></p></div></div><div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-crt-ringish-number-theory" class="theorem">
<p><span class="theorem-title"><strong>定理 5 (中国剩余定理：数论，但环论语言)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?m_1%20%5Cmathbb%20Z,%20m_2%20%5Cmathbb%20Z,%20%5Cdots,%20m_n%20%5Cmathbb%20Z"> 是环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z"> 的若干（双边）理想，且 <img src="https://latex.codecogs.com/png.latex?m_1,m_2,%5Cdots,m_n"> 两两互素．由 Bézout 定理，可设对任意互异的 <img src="https://latex.codecogs.com/png.latex?i,j">，存在 <img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D%20%5Cin%20m_i%20%5Cmathbb%20Z"> 和 <img src="https://latex.codecogs.com/png.latex?y_%7Bi,j%7D%20%5Cin%20m_j%20%5Cmathbb%20Z"> 满足 <img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D%20+%20y_%7Bi,j%7D%20=%201">．我们声称如下环同态 <img src="https://latex.codecogs.com/png.latex?%0A%5Cpi:%20%5Cbegin%7Baligned%7D%0A%5Cmathbb%20Z%20&amp;%5Cto%20%5Cmathbb%20Z%20/%20m_1%20%5Cmathbb%20Z%20%5Ctimes%20%5Cmathbb%20Z%20/%20m_2%20%5Cmathbb%20Z%20%5Ctimes%20%5Cdots%20%5Ctimes%20%5Cmathbb%20Z%20/%20m_n%20%5Cmathbb%20Z%20%5C%5C%0Aa%20&amp;%5Cmapsto%20(a+m_1%20%5Cmathbb%20Z,a+m_2%20%5Cmathbb%20Z,%5Cdots,a+m_n%20%5Cmathbb%20Z)%0A%5Cend%7Baligned%7D%0A"> 具有满性，这一满性由如下构造给出： <img src="https://latex.codecogs.com/png.latex?%0Aa%20:=%20%5Csum_%7Bi=1%7D%5En%20a_i%20%5Cdelta_i%0A"> 是使得 <img src="https://latex.codecogs.com/png.latex?%5Cpi(a)%20=%20(a_1,a_2,%5Cdots,a_n)"> 成立的一个解，这里 <img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta_i%20:=%20%5Cprod_%7Bj%20%5Cneq%20i%7D%20y_%7Bi,j%7D%0A"> 经由上述环同态，我们有（由环的第一同构定理） <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathbb%20Z%20/%20(%5Cprod_%7Bi=1%7D%5En%20m_i)%20%5Cmathbb%20Z%20=%20%5Cmathbb%20Z%20/%20(%5Cbigcap_%7Bi=1%7D%5En%20m_i%20%5Cmathbb%20Z)%20%5Ccong%20%5Cprod_%7Bi=1%7D%5En%20(%5Cmathbb%20Z%20/m_i%20%5Cmathbb%20Z)%0A%5Cend%7Baligned%7D%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>仅需对构造中使用的“基底” <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> 作一点说明．请读者关注以下等式 <img src="https://latex.codecogs.com/png.latex?%0A1%20=%20%5Cprod_%7Bj%20%5Cneq%20i%7D%20(x_%7Bi,j%7D%20+%20y_%7Bi,j%7D)%0A"> 注意到右侧乘积展开后，除 <img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bj%20%5Cneq%20i%7D%20y_%7Bi,j%7D"> 一项外，其余各项均至少含有一个 <img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D%20%5Cin%20m_i%20%5Cmathbb%20Z">，故 <img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bj%20%5Cneq%20i%7D%20y_%7Bi,j%7D%20=%201%20%5Cpmod%7Bm_i%20%5Cmathbb%20Z%7D">．同时，由于 <img src="https://latex.codecogs.com/png.latex?y_%7Bi,j%7D%20%5Cin%20m_j%20%5Cmathbb%20Z">，亦有 <img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bj%20%5Cneq%20i%7D%20y_%7Bi,j%7D%20=%200%20%5Cpmod%7Bm_k%20%5Cmathbb%20Z%7D"> 对所有 <img src="https://latex.codecogs.com/png.latex?k%20%5Cneq%20i"> 成立．综上知 <img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta_i%20=%20%5Cdelta(i=k)%20%5Cpmod%7Bm_k%20%5Cmathbb%20Z%7D%0A"></p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-crt-ring-theory" class="theorem">
<p><span class="theorem-title"><strong>定理 6 (中国剩余定理：环论)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?R"> 是任意有单位元的环，<img src="https://latex.codecogs.com/png.latex?I_1,I_2,%5Cdots,I_n"> 是 <img src="https://latex.codecogs.com/png.latex?R"> 的若干（双边）理想，且 <img src="https://latex.codecogs.com/png.latex?I_1,I_2,%5Cdots,I_n"> 两两“互素”（comaximal，即 <img src="https://latex.codecogs.com/png.latex?i%20%5Cneq%20j%20%5Cimplies%20I_i%20+%20I_j%20=%20R">），此时可设对任意互异的 <img src="https://latex.codecogs.com/png.latex?i,j">，存在 <img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D%20%5Cin%20I_i"> 和 <img src="https://latex.codecogs.com/png.latex?y_%7Bi,j%7D%20%5Cin%20I_j"> 满足 <img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D%20+%20y_%7Bi,j%7D%20=%201">．则如下环同态 <img src="https://latex.codecogs.com/png.latex?%0A%5Cpi:%20%5Cbegin%7Baligned%7D%0AR%20&amp;%5Cto%20R/I_1%20%5Ctimes%20R/I_2%20%5Ctimes%20%5Cdots%20%5Ctimes%20R/I_n%20%5C%5C%0Ar%20&amp;%5Cmapsto%20(r+I_1,r+I_2,%5Cdots,r+I_n)%0A%5Cend%7Baligned%7D%0A"> 具有满性，这一满性由如下构造给出： <img src="https://latex.codecogs.com/png.latex?%0Aa%20:=%20%5Csum_%7Bi=1%7D%5En%20a_i%20%5Cdelta_i%0A"> 是使得 <img src="https://latex.codecogs.com/png.latex?%5Cpi(a)%20=%20(a_1,a_2,%5Cdots,a_n)"> 成立的一个解，这里 <img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta_i%20:=%20%5Cprod_%7Bj%20%5Cneq%20i%7D%20y_%7Bi,j%7D%0A"> 经由上述环同态，我们有（由环的第一同构定理） <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AR/(%5Cbigcap_%7Bi=1%7D%5En%20I_i)%20%5Ccong%20%5Cprod_%7Bi=1%7D%5En%20(R/I_i)%0A%5Cend%7Baligned%7D%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>请读者仿照上例练习．</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>这里得到的环论版本的中国剩余定理的证明将是构造式的．常见的代数书目在叙述证明时一般诉诸数学归纳法——固然是严谨的选择，但牺牲了一点神韵．我们给出两个参考：</p>
<ul>
<li><p><span class="citation" data-cites="dummit_abstract_2003">[1, section 7.17, theorem 17, p.&nbsp;265]</span>：是本文主要参考的证明，但是有单位元的交换环上的特化版本．环上的交换性并不是中国剩余定理的本质要求，其作用仅为使得环上理想 <img src="https://latex.codecogs.com/png.latex?I,J"> 满足 <img src="https://latex.codecogs.com/png.latex?I%20J%20=%20I%20%5Ccap%20J">．特别地，这使得应用在整数环上的中国剩余定理的在计算上更为简洁： <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20Z%20/%20(%5Cprod_%7Bi=1%7D%5En%20m_i)%20%5Cmathbb%20Z%20=%20%5Cmathbb%20Z%20/%20(%5Cbigcap_%7Bi=1%7D%5En%20m_i%20%5Cmathbb%20Z)%0A"></p></li>
<li><p><span class="citation" data-cites="hungerford_algebra_1980">[2, theorem 2.25, p.&nbsp;131]</span>：给出了不要求环上单位元存在的更加一般的中国剩余定理．</p></li>
</ul>
<p>环论版本的中国剩余定理功用强大．除了在数论领域的经典应用，在多项式环上，中国剩余定理将多项式多点求值与多点插值联系起来，某种程度上为离散 Fourier 变换提供了同构视角下的理解．感兴趣的读者敬请移步<a href="../../posts/20240513-isodft/">此处</a>．最强大的中国剩余定理可以扩展到模上：</p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-module-theory" class="theorem">
<p><span class="theorem-title"><strong>定理 7 (中国剩余定理：模论)</strong></span> 设环 <img src="https://latex.codecogs.com/png.latex?R">、理想 <img src="https://latex.codecogs.com/png.latex?I_1,I_2,%5Cdots,I_n">、元素 <img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D%20%5Cin%20I_i"> 和 <img src="https://latex.codecogs.com/png.latex?y_%7Bi,j%7D%20%5Cin%20I_j"> 的要求与 定理&nbsp;6 中一致．设 <img src="https://latex.codecogs.com/png.latex?M"> 为一 <img src="https://latex.codecogs.com/png.latex?R">-模，则如下模同态 <img src="https://latex.codecogs.com/png.latex?%0A%5Cpi:%20%5Cbegin%7Baligned%7D%0AM%20&amp;%5Cto%20M%20/%20I_1%20M%20%5Coplus%20M/I_2%20M%20%5Coplus%20%5Cdots%20%5Coplus%20M%20/%20I_n%20M%20%5C%5C%0Ar%20&amp;%5Cmapsto%20(r+I_1%20M,r+I_2%20M,%5Cdots,r+I_n%20M)%0A%5Cend%7Baligned%7D%0A"> 具有满性，这一满性由如下构造给出： <img src="https://latex.codecogs.com/png.latex?%0Aa%20:=%20%5Csum_%7Bi=1%7D%5En%20%5Cdelta_i%20a_i%0A"> 是使得 <img src="https://latex.codecogs.com/png.latex?%5Cpi(a)%20=%20(a_1,a_2,%5Cdots,a_n)"> 成立的一个解，这里 <img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta_i%20:=%20%5Cprod_%7Bj%20%5Cneq%20i%7D%20y_%7Bi,j%7D%20%5Cin%20R%0A"> 经由上述模同态，我们有（由模的第一同构定理） <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AM/(%5Cbigcap_%7Bi=1%7D%5En%20I_i%20M)%20%5Ccong%20%5Cbigoplus_%7Bi=1%7D%5En%20(M/I_i%20M)%0A%5Cend%7Baligned%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>回到正题．我们在研究环 <img src="https://latex.codecogs.com/png.latex?Z_m%20=%20%5Cmathbb%20Z%20/%20m%5Cmathbb%20Z"> 的结构，而 定理&nbsp;5 已经做出了巨大的贡献：设 <img src="https://latex.codecogs.com/png.latex?m"> 有质因子分解 <img src="https://latex.codecogs.com/png.latex?m%20=%20p_1%5E%7B%5Calpha_1%7D%20p_2%5E%7B%5Calpha_2%7D%20%5Cdots%20p_k%5E%7B%5Calpha_k%7D">，则环 <img src="https://latex.codecogs.com/png.latex?Z_m"> 便可被拆分成若干大小互素的环的直积： <img src="https://latex.codecogs.com/png.latex?%0AZ_m%20%5Ccong%20Z_%7Bp_1%5E%7B%5Calpha_1%7D%7D%20%5Ctimes%20Z_%7Bp_2%5E%7B%5Calpha_2%7D%7D%20%5Ctimes%20%5Cdots%20%5Ctimes%20Z_%7Bp_k%5E%7B%5Calpha_k%7D%7D%0A"> 作为环的附属结构，<img src="https://latex.codecogs.com/png.latex?Z_m"> 的乘法群也得到自然的拆解： <img src="https://latex.codecogs.com/png.latex?%0AZ_m%5E%5Ctimes%0A%5Ccong%20%5Cleft(%20Z_%7Bp_1%5E%7B%5Calpha_1%7D%7D%20%5Ctimes%20Z_%7Bp_2%5E%7B%5Calpha_2%7D%7D%20%5Ctimes%20%5Cdots%20%5Ctimes%20Z_%7Bp_k%5E%7B%5Calpha_k%7D%7D%20%5Cright)%5E%5Ctimes%0A=%20Z_%7Bp_1%5E%7B%5Calpha_1%7D%7D%5E%5Ctimes%20%5Ctimes%20Z_%7Bp_2%5E%7B%5Calpha_2%7D%7D%5E%5Ctimes%20%5Ctimes%20%5Cdots%20%5Ctimes%20Z_%7Bp_k%5E%7B%5Calpha_k%7D%7D%5E%5Ctimes%0A"> 余下的工作，是解剖环 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%7B%5Calpha%7D%7D"> 的乘法群 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%7B%5Calpha%7D%7D%5E%5Ctimes"> 的结构．</p>
</section>
<section id="sec-zpat" class="level2 page-columns page-full" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="sec-zpat"><span class="header-section-number">4</span> <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 的结构：分裂的商同态</h2>
<p>加法和乘法运算，但对 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha"> 取模，似乎不太熟悉？事实上，将 <img src="https://latex.codecogs.com/png.latex?0"> 到 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha%20-1"> 间的所有整数写为 <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=0%7D%5E%7B%5Calpha%20-%201%7D%20a_i%20p%5Ei"> 的 <img src="https://latex.codecogs.com/png.latex?p"> 进制形式，是刻画该剩余类环的一种良好方法，其实质为以 <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20Z_%7Bp%5E%5Calpha%7D"> 带入整系数多项式环得到的一个 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z%5Bx%5D%20%5Cto%20Z_%7Bp%5E%5Calpha%7D"> 的环同态．读者可在接下来的探究中借其指导直觉．</p>
<p>首先，粗略地看看哪些环 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D"> 元素（在乘法意义下）可逆——自然是与 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha"> 互素——即不被 <img src="https://latex.codecogs.com/png.latex?p"> 整除——即 <img src="https://latex.codecogs.com/png.latex?p"> 进制表示下 <img src="https://latex.codecogs.com/png.latex?a_0%20%5Cneq%200"> 的那些数——即 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20=%20Z_%7Bp%5E%5Calpha%7D%20%5Csetminus%20p%20Z_%7Bp%5E%5Calpha%7D">．简单的计数就得到其大小为 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(p%5E%5Calpha)%20=%20p%5E%5Calpha%20-%20p%5E%7B%5Calpha%20-%201%7D%20=%20p%5E%7B%5Calpha%20-%201%7D%20(p%20-%201)">．一个受此启发的想法是，如果仅在模 <img src="https://latex.codecogs.com/png.latex?p"> 意义下考虑 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D"> 中的运算——即只看 <img src="https://latex.codecogs.com/png.latex?p"> 进制表示下 <img src="https://latex.codecogs.com/png.latex?a_0"> 的变化情况，自然得到商同态 <img src="https://latex.codecogs.com/png.latex?%5Cpi">： <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AZ_%7Bp%5E%5Calpha%7D%20&amp;%5Ctwoheadrightarrow%20Z_%7Bp%5E%5Calpha%7D%20/%20p%20Z_%7Bp%5E%5Calpha%7D%20%5Ccong%20Z_p%20%5C%5C%0Aa%20%5Cbmod%20p%5E%5Calpha%20&amp;%5Cmapsto%20a%20%5Cbmod%20p%0A%5Cend%7Baligned%7D%0A"> 注意环同态保持可逆元，故若只考虑乘法结构，<img src="https://latex.codecogs.com/png.latex?%5Cpi"> 也给出了交换群 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ctwoheadrightarrow%20Z_p%5E%5Ctimes"> 的一个满同态，其核 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi"> 为模 <img src="https://latex.codecogs.com/png.latex?p"> 余 <img src="https://latex.codecogs.com/png.latex?1">——即 <img src="https://latex.codecogs.com/png.latex?p"> 进制表示下 <img src="https://latex.codecogs.com/png.latex?a_0%20=%201">，其余位置任取——的那些数构成的 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha-1%7D"> 阶乘法子群．此外我们还有 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20/%20%5Cker%20%5Cpi%20%5Ccong%20Z_p%5E%5Ctimes">．</p>
<p>使用商同态研究交换群的结构，最好的情况是这个同态分裂<sup>5</sup>——在这里即希望 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20/%20%5Cker%20%5Cpi"> 或者说 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 在 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 中有一个同构的拷贝．此时由子群直积的识别定理 <span class="citation" data-cites="dummit_abstract_2003">[1, section 5.4, theorem 9, p.&nbsp;171]</span> 我们有 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ccong%20%5Cker%20%5Cpi%20%5Ctimes%20Z_p%5E%5Ctimes">．但真的可以吗？我们另从 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 的大小——<img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha%20-%201%7D%20(p%20-%201)">——的角度下手试试．固然 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha"> 与 <img src="https://latex.codecogs.com/png.latex?p-1"> 互素，故</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;关于正合列，见 <span class="citation" data-cites="dummit_abstract_2003">[1, section 10.5]</span></p></div></div><ul>
<li><p>如果你了解有限交换群的基本结构：由有限交换群基本定理 <span class="citation" data-cites="dummit_abstract_2003">[1, section 5.2]</span></p></li>
<li><p>如果你学过有限群的 Sylow 定理 <span class="citation" data-cites="dummit_abstract_2003">[1, section 4.5]</span>：考虑到 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 是交换群，其所有子群均为正规子群，熟记如下结果 <span class="citation" data-cites="dummit_abstract_2003">[1, section 6.1, theorem 3, p.&nbsp;191]</span></p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-sylow-normal" class="theorem">
<p><span class="theorem-title"><strong>定理 8 (有限幂零群的部分等价条件)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?G"> 是一有限群，则如下条件等价：</p>
<ul>
<li><p>对任意质数 <img src="https://latex.codecogs.com/png.latex?p%20%5Cmid%20%7CG%7C">，<img src="https://latex.codecogs.com/png.latex?G"> 的 Sylow <img src="https://latex.codecogs.com/png.latex?p">-子群存在且唯一．</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?G"> 的 Sylow 子群均为正规子群．</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?G"> 是其全体 Sylow 子群的（内）直积．</p></li>
</ul>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>考虑 Sylow 定理关于 Sylow <img src="https://latex.codecogs.com/png.latex?p">-子群共轭性的结果和子群直积的识别定理，有经验的读者应不难证明，此处略去．</p>
</div></li>
<li><p>如果你了解主理想整环上模的基本结构：考虑将交换群 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 视为 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z">-模，则其被 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha-1%7D%20(p-1)%20%5Cin%20%5Cmathbb%20Z"> 消灭，由于 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(p%5E%7B%5Calpha-1%7D,%20p-1)%20=%201">，根据核分解定理，<img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20=%20%5Cker%20p%5E%7B%5Calpha-1%7D%20%5Coplus%20%5Cker%20(p-1)"></p></li>
</ul>
<p>便知道 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 是其两个大小分别为 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha%20-%201%7D"> 和 <img src="https://latex.codecogs.com/png.latex?p-1"> 的子群（记为 <img src="https://latex.codecogs.com/png.latex?Q"> 和 <img src="https://latex.codecogs.com/png.latex?S">）的（内）直积．现在结合上一段构造的乘法群商同态 <img src="https://latex.codecogs.com/png.latex?%5Cpi:%20Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Cto%20Z_p%5E%5Ctimes"> 对 <img src="https://latex.codecogs.com/png.latex?Q"> 和 <img src="https://latex.codecogs.com/png.latex?S"> 作考察：</p>
<ul>
<li>考虑到 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ccong%20Q%20%5Ctimes%20S">，故 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D"> 的 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha-1%7D"> 阶子群只有 <img src="https://latex.codecogs.com/png.latex?Q"> 唯一一个．而已经知道 <img src="https://latex.codecogs.com/png.latex?%7C%5Cker%20%5Cpi%7C%20=%20p%5E%7B%5Calpha-1%7D%20=%20%7CQ%7C">，故立得 <img src="https://latex.codecogs.com/png.latex?Q%20=%20%5Cker%20%5Cpi">．</li>
<li>将 <img src="https://latex.codecogs.com/png.latex?%5Cpi"> 限制在 <img src="https://latex.codecogs.com/png.latex?S"> 上得到新同态 <img src="https://latex.codecogs.com/png.latex?%5Cpi%20%5Cvert_S%20:%20S%20%5Cto%20Z_p%5E%5Ctimes">，其核为 <img src="https://latex.codecogs.com/png.latex?S%20%5Ccap%20%5Cker%20%5Cpi">．注意 <img src="https://latex.codecogs.com/png.latex?%7CS%7C%20=%20p-1"> 且 <img src="https://latex.codecogs.com/png.latex?%7C%5Cker%20%5Cpi%7C%20=%20p%5E%5Calpha">，故这个核只能是平凡的，即 <img src="https://latex.codecogs.com/png.latex?%5Cpi%20%5Cvert_S"> 是单同态．再考虑到 <img src="https://latex.codecogs.com/png.latex?%7CZ_p%5E%5Ctimes%7C%20=%20p%20-%201%20=%20%7CS%7C">，我们得到 <img src="https://latex.codecogs.com/png.latex?S%20%5Ccong%20Z_p%5E%5Ctimes">．</li>
</ul>
<p>故真的有 <img src="https://latex.codecogs.com/png.latex?%0AZ_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ccong%20%5Cker%20%5Cpi%20%5Ctimes%20Z_p%5E%5Ctimes%0A"> 接下来的工作是分别研究 <img src="https://latex.codecogs.com/png.latex?%5Cker%5Cpi"> 和 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes">．</p>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>现在已经清楚 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 的子群 <img src="https://latex.codecogs.com/png.latex?Q%20=%20%5Cker%20%5Cpi"> 的具体表达——它恰是全体模 <img src="https://latex.codecogs.com/png.latex?p"> 余 <img src="https://latex.codecogs.com/png.latex?1"> 的数——即 <img src="https://latex.codecogs.com/png.latex?p"> 进制表示下 <img src="https://latex.codecogs.com/png.latex?a_0%20=%201">，其余位置任取的数．但受到构造手段的限制，<img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 在 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 中的像 <img src="https://latex.codecogs.com/png.latex?S"> 的具体表达目前尚不明确——且似乎结果也并不平凡【TODO】．</p>
<p>本节内容，另可参考 <span class="citation" data-cites="dummit_abstract_2003">[1, section 9.5, corollary 20, p.&nbsp;314]</span>．</p>
</div>
</section>
<section id="sec-zpt" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="sec-zpt"><span class="header-section-number">5</span> <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 的结构：域的有限乘法子群</h2>
<p>因为 <img src="https://latex.codecogs.com/png.latex?Z_2%5E%5Ctimes"> 是平凡群，故只需研究 <img src="https://latex.codecogs.com/png.latex?p%20%5Cge%203"> 的情况．事实上我们已经比较清楚环 <img src="https://latex.codecogs.com/png.latex?Z_p"> 的结构——它是一个域．<span class="citation" data-cites="dummit_abstract_2003">[1, section 9.5, pp.&nbsp;313–314]</span> 给出了一种利用域上多项式环性质证明 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 是循环群的神奇做法．我们知道，域上的 <img src="https://latex.codecogs.com/png.latex?n"> 阶多项式至多只能有 <img src="https://latex.codecogs.com/png.latex?n"> 个根（数论中又名 Lagrange 定理），而 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 内满足 <img src="https://latex.codecogs.com/png.latex?x%5Ed%20=%201"> 的元素（即 <img src="https://latex.codecogs.com/png.latex?d"> 次单位根）都是多项式 <img src="https://latex.codecogs.com/png.latex?x%5Ed%20-%201"> 的根，故 <img src="https://latex.codecogs.com/png.latex?d"> 次单位根的个数至多为 <img src="https://latex.codecogs.com/png.latex?d"> 个．令人惊奇的是，如此松弛的估计足以确定 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 的结构．请看如下定理 <span class="citation" data-cites="dummit_abstract_2003">[1, section 6.1, proposition 5, p.&nbsp;192]</span>．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-zpt-cyclic" class="theorem">
<p><span class="theorem-title"><strong>定理 9 (循环群判定：基于单位根数量上限)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?G"> 是一有限群，满足对任意正整数 <img src="https://latex.codecogs.com/png.latex?n">，<img src="https://latex.codecogs.com/png.latex?n"> 次单位根的个数至多为 <img src="https://latex.codecogs.com/png.latex?n"> 个，则 <img src="https://latex.codecogs.com/png.latex?G"> 是循环群．</p>
</div>
</div>
</div>
</div>
<p>我们提供 2.5 种不同的证明．</p>
<div class="proof">
<p><span class="proof-title"><em>证明</em> (Sylow 定理向). </span>首先注意到对任意正整数 <img src="https://latex.codecogs.com/png.latex?n">，<img src="https://latex.codecogs.com/png.latex?G"> 中若存在 <img src="https://latex.codecogs.com/png.latex?n"> 阶子群则必定唯一，且恰为 <img src="https://latex.codecogs.com/png.latex?G_n%20:=%20%5C%7B%20g%20%5Cin%20G:%20g%5En%20=%201%20%5C%7D">．这是因为任何 <img src="https://latex.codecogs.com/png.latex?n"> 阶子群内的元素均为 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根，数量已达到条件中给出的 <img src="https://latex.codecogs.com/png.latex?n"> 个的上限，故无法再支撑另一 <img src="https://latex.codecogs.com/png.latex?n"> 阶子群的存在．特别地，<img src="https://latex.codecogs.com/png.latex?G"> 的 Sylow <img src="https://latex.codecogs.com/png.latex?p">-子群 <img src="https://latex.codecogs.com/png.latex?S_p"> 存在且唯一．由 定理&nbsp;8，<img src="https://latex.codecogs.com/png.latex?G"> 为 <img src="https://latex.codecogs.com/png.latex?G"> 的各个 Sylow <img src="https://latex.codecogs.com/png.latex?p">-子群 <img src="https://latex.codecogs.com/png.latex?S_p"> 的（内）直积．于是只需证每个 <img src="https://latex.codecogs.com/png.latex?S_p"> 都是循环群．记 <img src="https://latex.codecogs.com/png.latex?%5Calpha"> 是 <img src="https://latex.codecogs.com/png.latex?p"> 在 <img src="https://latex.codecogs.com/png.latex?n"> 中的指数．由 Sylow 定理，<img src="https://latex.codecogs.com/png.latex?S_p"> 有一个 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha%20-%201%7D"> 阶子群 <img src="https://latex.codecogs.com/png.latex?H_p">，据前述观察 <img src="https://latex.codecogs.com/png.latex?%0AH_p%20=%20%5C%7B%20g%20%5Cin%20G%20:%20g%5E%7Bp%5E%7B%5Calpha-1%7D%7D%20=%201%5C%7D%20%3C%20%5C%7Bg%20%5Cin%20G%20:%20g%5E%7Bp%5E%5Calpha%7D%20=%201%5C%7D%20=%20S_p%0A"> 故任取 <img src="https://latex.codecogs.com/png.latex?g%20%5Cin%20S_p%20%5Csetminus%20H_p"> 就得到一个 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha%7D"> 阶元，故 <img src="https://latex.codecogs.com/png.latex?S_p"> 是循环群．</p>
</div>
<p>下面是一个使用 Dirichlet 卷积 / Möbius 反演的数论风格的证明 <span class="citation" data-cites="dummit_abstract_2003">[1, section 9.5, exercise 6, p.&nbsp;315]</span>．</p>
<div class="proof">
<p><span class="proof-title"><em>证明</em> (数论向). </span>记 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ag(n)%20&amp;:=%20%5C#%5C%7B%20x%20%5Cin%20G:%20x%5En%20=%201%20%5C%7D%20%5C%5C%0Ah(n)%20&amp;:=%20%5C#%5C%7B%20x%20%5Cin%20G:%20%5Coperatorname%7Bord%7D(x)%20=%20n%20%5C%7D%0A%5Cend%7Baligned%7D%0A"> 则 <img src="https://latex.codecogs.com/png.latex?%0Ag(n)%20=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20h(n)%0A"> 依次应用 Möbius 反演、条件假设和 Dirichlet 卷积 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi%20=%20%5Cmu%20*%20%5Cmathrm%7Bid%7D"> 得 <img src="https://latex.codecogs.com/png.latex?%0Ah(n)%20=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20%5Cmu(%5Cfrac%20n%20d)g(d)%20%5Cleq%20%5Csum_%7Bd%20%5Cmid%20n%7D%20%5Cmu(%5Cfrac%20n%20d)%20d%20=%20%5Cvarphi(n)%0A"> 但根据 <img src="https://latex.codecogs.com/png.latex?h"> 的定义和 Dirichlet 卷积 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi%20*%20I%20=%20%5Cmathrm%7Bid%7D"> 有 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bn%20%5Cmid%20%7CG%7C%7D%20h(n)%20=%20%7CG%7C%20=%20%5Csum_%7Bn%20%5Cmid%20%7CG%7C%7D%20%5Cvarphi(n)%0A"> 这逼迫 <img src="https://latex.codecogs.com/png.latex?h(n)=%5Cvarphi(n)"> 对所有 <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20%7CG%7C"> 成立．特别地，<img src="https://latex.codecogs.com/png.latex?h(%7CG%7C)%20=%20%5Cvarphi(%7CG%7C)%20%5Cgeq%201">，故 <img src="https://latex.codecogs.com/png.latex?G"> 是循环群．</p>
</div>
<p>最后半种证明方法相对简明，但需增加群 <img src="https://latex.codecogs.com/png.latex?G"> 交换的条件．</p>
<div class="proof">
<p><span class="proof-title"><em>证明</em> (交换群的特例). </span>由有限交换群基本定理，<img src="https://latex.codecogs.com/png.latex?G"> 内存在阶为群 <img src="https://latex.codecogs.com/png.latex?G"> 的<em>指数（exponent）</em> <img src="https://latex.codecogs.com/png.latex?%0A%5Cexp%20G%20:=%20%5Cmin%20%5C%7Bn%20%5Cin%20%5Cmathbb%20N_+%20:%20g%5En%20=%201,%5C,%20%5Cforall%20g%20%5Cin%20G%20%5C%7D%0A"> 的元素．故只需证 <img src="https://latex.codecogs.com/png.latex?%5Cexp%20G%20=%20%7CG%7C">．根据定义，<img src="https://latex.codecogs.com/png.latex?G"> 中所有元素都是 <img src="https://latex.codecogs.com/png.latex?%5Cexp%20G"> 次单位根，故由关于单位根数量上限的假设，<img src="https://latex.codecogs.com/png.latex?%7CG%7C%20%5Cleq%20%5Cexp%20G%20%5Cleq%20G">，故 <img src="https://latex.codecogs.com/png.latex?%5Cexp%20G%20=%20%7CG%7C">，得证．</p>
</div>
<p>结合前述讨论，我们已经证明 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 是循环群，并事实上导出了如下广为人知的结果 <span class="citation" data-cites="dummit_abstract_2003">[1, section 9.5, proposition 18, p.&nbsp;314]</span></p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-field-mul-subgroup" class="theorem corollary">
<p><span class="theorem-title"><strong>推论 1</strong></span> 域 <img src="https://latex.codecogs.com/png.latex?F"> 的任意有限乘法子群 <img src="https://latex.codecogs.com/png.latex?G%20%5Cleq%20F%5E%5Ctimes"> 均为循环群．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>与本节开始的讨论相仿．考察 <img src="https://latex.codecogs.com/png.latex?G"> 中所有 <img src="https://latex.codecogs.com/png.latex?d"> 次单位根，它们均为 <img src="https://latex.codecogs.com/png.latex?F%5Bx%5D"> 中多项式 <img src="https://latex.codecogs.com/png.latex?x%5Ed%20-%201"> 的根，但域上的 <img src="https://latex.codecogs.com/png.latex?d"> 次多项式至多只有 <img src="https://latex.codecogs.com/png.latex?d"> 个根，故 定理&nbsp;9 的条件得到满足．</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>对 <img src="https://latex.codecogs.com/png.latex?F"> 的要求甚至还可进一步减弱为整环 <img src="https://latex.codecogs.com/png.latex?R">——这是因为在关于多项式根数量上限的 Lagrange 定理的证明中，带余除一个首一多项式并不需要可逆元的参与．这一结果亦可通过取 <img src="https://latex.codecogs.com/png.latex?R"> 的分式域直接弱化得到．</p>
<p>设整环 <img src="https://latex.codecogs.com/png.latex?R"> 的 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根子群 <img src="https://latex.codecogs.com/png.latex?U_n%20:=%20%5C%7B%20x%20%5Cin%20R:%20x%5En%20=%201%20%5C%7D%20%5Cleq%20%5Coperatorname%7BTor%7DR%5E%5Ctimes%20%5Cleq%20R%5E%5Ctimes">，它们的并构成了 <img src="https://latex.codecogs.com/png.latex?R"> 的乘法群 <img src="https://latex.codecogs.com/png.latex?R%5E%5Ctimes"> 的挠子群（torsion subgroup）<img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BTor%7DR%5E%5Ctimes">．我们的推导实际上说明：</p>
<ul>
<li><p>每个 <img src="https://latex.codecogs.com/png.latex?U_n"> 都是循环群，也是乘法群 <img src="https://latex.codecogs.com/png.latex?R%5E%5Ctimes"> 唯一的 <img src="https://latex.codecogs.com/png.latex?n"> 阶子群．</p></li>
<li><p>若 <img src="https://latex.codecogs.com/png.latex?d%20%5Cmid%20n">，则 <img src="https://latex.codecogs.com/png.latex?U_d%20%5Cleq%20U_n">．特别地，阶数互素的两群之交平凡．</p></li>
<li><p>使用 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z">-模风格的记号， <img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BTor%7DR%5E%5Ctimes%20=%20%5Cbigoplus_%7Bp%20%5Cin%20%5Ctext%7Bprime%7D%7D%20%5Cbigcup_%7B%5Calpha=1%7D%5E%7B+%5Cinfty%7D%20U_%7Bp%5E%5Calpha%7D%0A"> 故 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BTor%7DR%5E%5Ctimes"> 的结构似乎和 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Q/%5Cmathbb%20Z"> 和 <img src="https://latex.codecogs.com/png.latex?p"> 进数 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 有一定联系．笔者能力有限，有机会再填坑．</p></li>
</ul>
</div>
</section>
<section id="sec-nup" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="sec-nup"><span class="header-section-number">6</span> <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi"> 的结构：二项式定理与含 <img src="https://latex.codecogs.com/png.latex?p"> 量估计</h2>
<p>这里处理 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi"> 的结构的办法相当暴力 <span class="citation" data-cites="dummit_abstract_2003">[1, section 2.4, exercises 21–23, p.&nbsp;60]</span>：</p>
<ul>
<li>当 <img src="https://latex.codecogs.com/png.latex?p"> 是奇质数时，我们将直接找到一个 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi%20%5Cle%20Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 中的一个 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha-1%7D"> 阶元，据此得到 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi%20%5Ccong%20Z_%7Bp%5E%7B%5Calpha%20-%201%7D%7D">；</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?p%20=%202"> 时（此时 <img src="https://latex.codecogs.com/png.latex?Z_p%5E%5Ctimes"> 是平凡群，故 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi%20=%20Z_%7B2%5E%5Calpha%7D%5E%5Ctimes">），我们将直接找到一个 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi"> 中的 <img src="https://latex.codecogs.com/png.latex?2%5E%7B%5Calpha-2%7D"> 阶元，再找到两个不同的 <img src="https://latex.codecogs.com/png.latex?2"> 阶元，据此证明 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi%20%5Ccong%20Z_2%20%5Ctimes%20Z_%7B2%5E%7B%5Calpha%20-%202%7D%7D">．</li>
</ul>
<p>先介绍一个关于二项式含 <img src="https://latex.codecogs.com/png.latex?p"> 量的有趣结果．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-kummer-special" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 1 (Kummer 定理的一个特例)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?p"> 是质数，<img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%200"> 是非负整数，<img src="https://latex.codecogs.com/png.latex?1%20%5Cle%20k%5Cle%20p%5E%5Calpha">，则 <img src="https://latex.codecogs.com/png.latex?%0A%5Cnu_p%20(%5Cbinom%7Bp%5E%5Calpha%7D%7Bk%7D)%20=%20%5Calpha%20-%20%5Cnu_p%20(k)%0A"> 这里 <img src="https://latex.codecogs.com/png.latex?%5Cnu_p"> 是所谓的 <em><img src="https://latex.codecogs.com/png.latex?p">-adic valuation</em> 函数，其返回因子分解中素因子 <img src="https://latex.codecogs.com/png.latex?p"> 对应的指数，以后简称含 <img src="https://latex.codecogs.com/png.latex?p"> 量．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>基本的想法是将二项式系数展开写为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbinom%7Bp%5E%5Calpha%7D%7Bk%7D%20=%20%5Cfrac%7Bp%5E%5Calpha%20(p%5E%5Calpha%20-1)%20%5Cdots%20(p%5E%5Calpha%20-k+1)%7D%7B1%20%5Ctimes%202%5Ctimes%20%20%5Cdots%20%5Ctimes%20k%7D%0A"> 并观察从 <img src="https://latex.codecogs.com/png.latex?%5Cnu_p"> 从 <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bp%5E%5Calpha%7D%7Bk-1%7D"> 到 <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bp%5E%5Calpha%7D%7Bk%7D"> 取值的变化．注意到 <img src="https://latex.codecogs.com/png.latex?%5Cnu_p(k)%20=%20%5Cnu_p%20(p%5E%5Calpha%20-%20k)"> 对 <img src="https://latex.codecogs.com/png.latex?1%20%5Cle%20k%20%5Cle%20p%5E%5Calpha%20-%201"> 成立，故 <img src="https://latex.codecogs.com/png.latex?%0A%5Cnu_p%20(%5Cbinom%7Bp%5E%5Calpha%7D%7Bk%7D)%20-%20%5Cnu_p%20(%5Cbinom%7Bp%5E%5Calpha%7D%7Bk-1%7D)%20=%20%5Cnu_p%20(p%5E%5Calpha%20-k+1)%20-%20%5Cnu_p(k)%20=%20%5Cnu_p(k-1)%20-%20%5Cnu_p(k)%0A"> 连同初值 <img src="https://latex.codecogs.com/png.latex?%5Cnu_p%20(%5Cbinom%7Bp%5E%5Calpha%7D%7B0%7D)%20=%20%5Calpha">，命题得证．</p>
</div>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> nu(p,x):</span>
<span id="cb1-5">  cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> p</span>
<span id="cb1-8">    cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cnt</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-13">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">npk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-17">  npk.append(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nu(p,k))</span>
<span id="cb1-18"></span>
<span id="cb1-19">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb1-20">ax.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),npk)</span>
<span id="cb1-21">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-22">ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb1-23">ax.set_xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-24">ax.set_yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-25">ax.set_xlim((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>))</span>
<span id="cb1-26">ax.set_ylim((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-27">plt.show()  </span></code></pre></div>
</details>
<div id="fig-kummer" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-kummer-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="ff727280" class="cell" data-execution_count="1">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20240922-pr/index_files/figure-html/cell-2-output-1.png" width="566" height="104" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-kummer-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;1: <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha%20=%203%5E3"> 时 <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bp%5E%5Calpha%7D%7Bk%7D"> 的含 <img src="https://latex.codecogs.com/png.latex?p"> 量
</figcaption>
</figure>
</div>
<p>继续证明前我们再做一些观察：</p>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">lim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb2-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,lim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-4">ax.plot(x,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> k: nu(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,k), x)), label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">nu_3(k)$"</span>)</span>
<span id="cb2-5">ax.plot(x,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> k: nu(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,k), x)), label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">nu_2(k)$"</span>)</span>
<span id="cb2-6">ax.plot(x,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$k-1$"</span>)</span>
<span id="cb2-7">ax.plot(x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$2k-2$"</span>)</span>
<span id="cb2-8">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-9">ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb2-10">ax.set_xticks(x)</span>
<span id="cb2-11">ax.set_yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb2-12">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,lim)</span>
<span id="cb2-13">ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-14">ax.legend()</span>
<span id="cb2-15">plt.show()</span></code></pre></div>
</details>
<div id="fig-compare" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-compare-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="5d4ae3dd" class="cell" data-execution_count="2">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20240922-pr/index_files/figure-html/cell-3-output-1.png" width="578" height="206" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-compare-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;2: 若干含 <img src="https://latex.codecogs.com/png.latex?p"> 量比较
</figcaption>
</figure>
</div>
<p>受 图&nbsp;2 启发，容易证明：</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?k-1%20%5Cge%20%5Cnu_p%20(k)"> 对所有质数 <img src="https://latex.codecogs.com/png.latex?p"> 和 <img src="https://latex.codecogs.com/png.latex?k%20%5Cge%201"> 成立；</li>
<li><img src="https://latex.codecogs.com/png.latex?k-2%20%5Cge%20%5Cnu_p%20(k)"> 对所有奇质数 <img src="https://latex.codecogs.com/png.latex?p%20%5Cge%203"> 和 <img src="https://latex.codecogs.com/png.latex?k%20%5Cge%202"> 成立；</li>
<li><img src="https://latex.codecogs.com/png.latex?2k-2%20%5Cge%20%5Cnu_2%20(k)"> 对所有 <img src="https://latex.codecogs.com/png.latex?k%20%5Cge%201"> 成立．</li>
<li><img src="https://latex.codecogs.com/png.latex?2k-3%20%5Cge%20%5Cnu_2%20(k)"> 对所有 <img src="https://latex.codecogs.com/png.latex?k%20%5Cge%202"> 成立．</li>
</ul>
<p>这四个不等式的微妙区别是导致奇质数和 <img src="https://latex.codecogs.com/png.latex?2"> 需要分别讨论的罪魁祸首之一．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-kerphi-oddp" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 2</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?p"> 是奇质数，<img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%201"> 是正整数，则元素 <img src="https://latex.codecogs.com/png.latex?1+p%20%5Cin%20%5Cker%20%5Cpi%20%5Cle%20Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> 的阶为 <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Calpha-1%7D">．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>首先考察 <img src="https://latex.codecogs.com/png.latex?%0A(1+p)%5E%7Bp%5E%7B%5Calpha-1%7D%7D%20=%201%20+%20%5Csum_%7Bk=1%7D%5E%7Bp%5E%7B%5Calpha-1%7D%7D%20%5Cbinom%7Bp%5E%7B%5Calpha-1%7D%7D%7Bk%7D%20p%5Ek%0A"> 应用 命题&nbsp;1 大力考察求和每一项的含 <img src="https://latex.codecogs.com/png.latex?p"> 量，得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cnu_p(%5Cbinom%7Bp%5E%7B%5Calpha-1%7D%7D%7Bk%7D%20p%5Ek)%20=%20%5Calpha%20-%201%20-%20%5Cnu_p%20(k)%20+%20k%0A"> 注意 <img src="https://latex.codecogs.com/png.latex?k-1%20%5Cge%20%5Cnu_p%20(k)"> 对 <img src="https://latex.codecogs.com/png.latex?k%20%5Cge%201"> 永远成立，故求和每一项的含 <img src="https://latex.codecogs.com/png.latex?p"> 量均至少为 <img src="https://latex.codecogs.com/png.latex?%5Calpha">，故 <img src="https://latex.codecogs.com/png.latex?%0A(1+p)%5E%7Bp%5E%7B%5Calpha-1%7D%7D%20%5Cequiv%201%20%5Cpmod%7Bp%5E%5Calpha%7D%0A"> 若 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%201">，则命题已经得证．下面来看为什么 <img src="https://latex.codecogs.com/png.latex?p%20%5Cge%203">, <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%202"> 时会有 <img src="https://latex.codecogs.com/png.latex?%0A1%20+%20%5Csum_%7Bk=1%7D%5E%7Bp%5E%7B%5Calpha-2%7D%7D%20%5Cbinom%7Bp%5E%7B%5Calpha-2%7D%7D%7Bk%7D%20p%5Ek%20=%20(1+p)%5E%7Bp%5E%7B%5Calpha-2%7D%7D%20%5Cnot%20%5Cequiv%201%20%5Cpmod%7Bp%5E%5Calpha%7D%0A"> 同样的方法计算含 <img src="https://latex.codecogs.com/png.latex?p"> 量 <img src="https://latex.codecogs.com/png.latex?%0A%5Cnu_p(%5Cbinom%7Bp%5E%7B%5Calpha-2%7D%7D%7Bk%7D%20p%5Ek)%20=%20%5Calpha%20-%202%20-%20%5Cnu_p%20(k)%20+%20k%0A"> 由上述不等式关系，右式仅在 <img src="https://latex.codecogs.com/png.latex?k=1"> 时小于 <img src="https://latex.codecogs.com/png.latex?%5Calpha">，因此和式中只有 <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bp%5E%7B%5Calpha-2%7D%7D%7B1%7D%20p%20=%20p%5E%7B%5Calpha%20-%201%7D"> 一项在模 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha"> 意义下产生了额外贡献——当然 <img src="https://latex.codecogs.com/png.latex?1%20+%20p%5E%7B%5Calpha-1%7D%20%5Cnot%20%5Cequiv%201%20%5Cpmod%7Bp%5E%5Calpha%7D">，得证．</p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-kerphi-oddp" class="theorem corollary">
<p><span class="theorem-title"><strong>推论 2</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?p"> 是奇质数，<img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%201"> 是正整数，则 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi%20%5Ccong%20Z_%7Bp%5E%7B%5Calpha-1%7D%7D">．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-kerphi-evenp" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 3</strong></span> 设正整数 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%202">．元素 <img src="https://latex.codecogs.com/png.latex?5%20=%201+%202%5E2%20%5Cin%20%5Cker%20%5Cpi%20=%20Z_%7B2%5E%5Calpha%7D%5E%5Ctimes"> 的阶为 <img src="https://latex.codecogs.com/png.latex?2%5E%7B%5Calpha-2%7D">．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>请读者仿照上例练习．考虑利用二项式定理展开 <img src="https://latex.codecogs.com/png.latex?(1+2%5E2)%5E%7B2%5E%7B%5Calpha-2%7D%7D"> 和 <img src="https://latex.codecogs.com/png.latex?(1+2%5E2)%5E%7B2%5E%7B%5Calpha-3%7D%7D"> 并利用 图&nbsp;2 下方的后两个不等式．</p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-kerphi-notcyc" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 4</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%202"> 是正整数，则元素 <img src="https://latex.codecogs.com/png.latex?-1"> 和 <img src="https://latex.codecogs.com/png.latex?1+2%5E%7B%5Calpha-1%7D"> 在 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi%20=%20Z_%7B2%5E%5Calpha%7D%5E%5Ctimes"> 的阶为 <img src="https://latex.codecogs.com/png.latex?2">．当 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%203"> 时两者互异．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>显然 <img src="https://latex.codecogs.com/png.latex?-1"> 阶为 <img src="https://latex.codecogs.com/png.latex?2">．而 <img src="https://latex.codecogs.com/png.latex?%0A(1+2%5E%7B%5Calpha-1%7D)%5E2%20%5Cequiv%201%20+%202%20%5Ctimes%202%5E%7B%5Calpha-1%7D%20+%202%5E%7B2(%5Calpha-1)%7D%20%5Cequiv%201%20%5Cpmod%7B2%5E%5Calpha%7D%0A"></p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-kerphi-notcyc" class="theorem corollary">
<p><span class="theorem-title"><strong>推论 3</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%202"> 是正整数，则 <img src="https://latex.codecogs.com/png.latex?Z_%7B2%5E%5Calpha%7D%5E%5Ctimes%20=%20%5Cker%20%5Cpi%20%5Ccong%20Z_2%20%5Ctimes%20Z_%7B2%5E%7B%5Calpha-2%7D%7D">．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>当 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%202">，<img src="https://latex.codecogs.com/png.latex?%7C%5Cker%20%5Cpi%7C%20=%202">，平凡．当 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cge%203">，命题&nbsp;4 给出了两个无交且生成整个 <img src="https://latex.codecogs.com/png.latex?%5Cker%20%5Cpi"> 的循环群，使用子群直积的识别定理即可．</p>
</div>
</section>
<section id="结论" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="结论"><span class="header-section-number">7</span> 结论</h2>
<p>综合 小节&nbsp;5 和 小节&nbsp;6 的结果，我们将结果总结如下 <span class="citation" data-cites="dummit_abstract_2003">[1, section 9.5, corollary 20, p.&nbsp;314]</span>：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-zm-final" class="theorem">
<p><span class="theorem-title"><strong>定理 10 (模 <img src="https://latex.codecogs.com/png.latex?m"> 剩余类乘法群 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的结构性定理)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%202"> 为一正整数，其质因子分解为 <img src="https://latex.codecogs.com/png.latex?n%20=%20%5Cprod_%7Bi=1%7D%5Ek%20p_i%5E%7B%5Calpha_i%7D">，则有如下群同构 <img src="https://latex.codecogs.com/png.latex?%0AZ_m%5E%5Ctimes%20%5Ccong%20%5Cprod_%7Bi=1%7D%5Ek%20Z_%7Bp_i%5E%7B%5Calpha_i%7D%7D%5E%5Ctimes%20%5C%5C%0A"> 对分解中满足 <img src="https://latex.codecogs.com/png.latex?p%20%5Cgeq%203"> 的 <img src="https://latex.codecogs.com/png.latex?Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes"> ，有 <img src="https://latex.codecogs.com/png.latex?%0AZ_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ccong%20Z_%7Bp-1%7D%20%5Ctimes%20Z_%7Bp%5E%7B%5Calpha-1%7D%7D%20%5Ccong%20Z_%7Bp%5E%7B%5Calpha-1%7D(p-1)%7D%0A"> 对分解中的 <img src="https://latex.codecogs.com/png.latex?Z_%7B2%5E%5Calpha%7D%5E%5Ctimes">，有 <img src="https://latex.codecogs.com/png.latex?%0AZ_%7B2%5E%5Calpha%7D%5E%5Ctimes%20%5Ccong%20Z_2%20%5Ctimes%20Z_%7B2%5E%7B%5Calpha-2%7D%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>据此，原根存在定理成为简单的推论．</p>
<div class="proof">
<p><span class="proof-title"><em>证明</em> (定理&nbsp;3). </span>注意群同构 <img src="https://latex.codecogs.com/png.latex?Z_a%20%5Ctimes%20Z_b%20%5Ccong%20Z_%7Bab%7D"> 当且仅当 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,b)%20=%201">，这将组成证明各项讨论的核心．</p>
<p>对奇质数 <img src="https://latex.codecogs.com/png.latex?p%20%5Cgeq%203"> 和正整数 <img src="https://latex.codecogs.com/png.latex?%5Calpha">，有如下群同构关系 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AZ_2%5E%5Ctimes%20&amp;%5Ccong%20Z_1%20%5C%5C%0AZ_4%5E%5Ctimes%20&amp;%5Ccong%20Z_2%20%5C%5C%0AZ_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20&amp;%5Ccong%20Z_%7Bp%5E%7B%5Calpha-1%7D(p-1)%7D%20%5C%5C%0AZ_%7B2p%5E%5Calpha%7D%5E%5Ctimes%20&amp;%5Ccong%20Z_2%5E%5Ctimes%20%5Ctimes%20Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ccong%20Z_1%20%5Ctimes%20Z_%7Bp%5E%7B%5Calpha-1%7D(p-1)%7D%20%5Ccong%20Z_%7Bp%5E%7B%5Calpha-1%7D(p-1)%7D%0A%5Cend%7Baligned%7D%0A"> 故 <img src="https://latex.codecogs.com/png.latex?m%20=%202,4,p%5E%5Calpha,2p%5E%5Calpha"> 时 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 为循环群．</p>
<p>对任意互异的奇质数 <img src="https://latex.codecogs.com/png.latex?p,q%20%5Cge%203"> 和正整数 <img src="https://latex.codecogs.com/png.latex?%5Calpha,%20%5Cbeta">，有 <img src="https://latex.codecogs.com/png.latex?%0AZ_%7Bp%5E%5Calpha%20q%5E%5Cbeta%7D%5E%5Ctimes%20%5Ccong%20Z_%7Bp%5E%5Calpha%7D%5E%5Ctimes%20%5Ctimes%20Z_%7Bq%5E%5Cbeta%7D%5E%5Ctimes%20%5Ccong%20Z_%7Bp-1%7D%20%5Ctimes%20Z_%7Bp%5E%7B%5Calpha-1%7D%7D%20%5Ctimes%20Z_%7Bq-1%7D%20%5Ctimes%20Z_%7Bq%5E%7B%5Calpha-1%7D%7D%0A"> 但 <img src="https://latex.codecogs.com/png.latex?p-1"> 和 <img src="https://latex.codecogs.com/png.latex?q-1"> 均为偶数，故含有两个互异奇质因子的 <img src="https://latex.codecogs.com/png.latex?m"> 对应的 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 都不是循环群．</p>
<p>对奇质数 <img src="https://latex.codecogs.com/png.latex?p%20%5Cgeq%203">、正整数 <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cgeq%203"> 和正整数 <img src="https://latex.codecogs.com/png.latex?%5Cbeta">，有如下群同构关系 <img src="https://latex.codecogs.com/png.latex?%0AZ_%7B2%5E%5Calpha%20p%5E%5Cbeta%7D%5E%5Ctimes%0A%5Ccong%20Z_%7B2%5E%5Calpha%7D%5E%5Ctimes%20%5Ctimes%20Z_%7Bp%5E%5Cbeta%7D%5E%5Ctimes%0A%5Ccong%20Z_2%20%5Ctimes%20Z_%7B2%5E%7B%5Calpha-2%7D%7D%5E%5Ctimes%20%5Ctimes%20Z_%7Bp-1%7D%20%5Ctimes%20Z_%7Bp%5E%7B%5Cbeta-1%7D%7D%0A"> 但 <img src="https://latex.codecogs.com/png.latex?p-1"> 和 <img src="https://latex.codecogs.com/png.latex?2"> 均为偶数，故含有一个奇质因子和质因子 <img src="https://latex.codecogs.com/png.latex?2"> 的 <img src="https://latex.codecogs.com/png.latex?m"> 对应的 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 也不是循环群．</p>
<p>综上，仅当 <img src="https://latex.codecogs.com/png.latex?m%20=%202,4,p%5E%5Calpha,2p%5E%5Calpha"> 时 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 为循环群．</p>
</div>
</section>
<section id="番外z_mtimes-的特殊子群们" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="番外z_mtimes-的特殊子群们"><span class="header-section-number">8</span> 番外：<img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的特殊子群们</h2>
<p><img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 结构的完全解决，对处理有关模 <img src="https://latex.codecogs.com/png.latex?m"> 乘法性质的数论问题大有裨益．需要指出的是，这些问题的完全解决需要跳出乘法群考虑整个 <img src="https://latex.codecogs.com/png.latex?Z_m"> 的结构，考虑到与正文关联不大且笔者能力有限，下面主要在 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 中考虑问题．</p>
<section id="fermat-骗子群-mathcal-l_mtimes" class="level3" data-number="8.1">
<h3 data-number="8.1" class="anchored" data-anchor-id="fermat-骗子群-mathcal-l_mtimes"><span class="header-section-number">8.1</span> Fermat 骗子群 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L_m%5E%5Ctimes"></h3>
<p>模 <img src="https://latex.codecogs.com/png.latex?m"> 的 <em>Fermat 骗子（Fermat liar）群</em> <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L_m%5E%5Ctimes"> 定义为所有使得 <img src="https://latex.codecogs.com/png.latex?m"> 通过 Fermat 素性测试 <img src="https://latex.codecogs.com/png.latex?a%5E%7Bm%7D%20%5Cequiv%20a%20%5Cpmod%20m"> 的模 <img src="https://latex.codecogs.com/png.latex?m"> 乘法群 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 中的元素，即 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathcal%20L_m%5E%5Ctimes%20:&amp;=%20%5C%7B%20a%20%5Cin%20Z_m%5E%5Ctimes%20:%20%5Coperatorname%7Bord%7D(a)%20%5Cmid%20m-1%20%5C%7D%20%5C%5C%0A&amp;=%20%5C%7B%20a%20%5Cin%20Z_m%5E%5Ctimes%20:%20%5Coperatorname%7Bord%7D(a)%20%5Cmid%20%5Cgcd(%5Cvarphi(m),m-1)%20%5C%7D%20%5C%5C%0A&amp;=%20%5C%7B%20a%20%5Cin%20Z_m%5E%5Ctimes%20:%20a%5E%7B%5Cgcd(%5Cvarphi(m),m-1)%7D%20=%201%20%5C%7D%0A%5Cend%7Baligned%7D%0A"> 容易验证 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L_m%5E%5Ctimes%20%5Cleq%20Z_m%5E%5Ctimes"> 确为群．</p>
<p><em>Carmichael 函数</em> <img src="https://latex.codecogs.com/png.latex?%5Clambda(m)"> 定义为交换群 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的指数（exponent），也即其各元素阶的最小公倍数： <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(m)%20:=%20%5Coperatorname%7Blcm%7D_%7Ba%20%5Cin%20Z_m%5E%5Ctimes%7D%20%5Coperatorname%7Bord%7D(a)%20=%20%5Cexp%20Z_m%5E%5Ctimes%0A"> 显然 <img src="https://latex.codecogs.com/png.latex?%5Clambda(m)%20%5Cmid%20%5Cvarphi(m)">．下面的习题给出了计算 Carmichael 函数的方法．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-carmichael-lcm-comm" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 1</strong></span> 证明 Carmichael 函数和 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Blcm%7D"> 交换．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-carmichael-power" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 2</strong></span> 利用 <img src="https://latex.codecogs.com/png.latex?Z_m%5E%5Ctimes"> 的结构证明 Carmichael 函数在奇素数幂 <img src="https://latex.codecogs.com/png.latex?p%5E%5Calpha"> 处的取值为</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(p%5E%5Calpha)%20=%20p%5E%5Calpha%20-%20p%5E%7B%5Calpha-1%7D%20=%20%5Cvarphi(p%5E%5Calpha)%0A"> 在 <img src="https://latex.codecogs.com/png.latex?2%5E%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cgeq%203"> 处的取值为 <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(2%5E%5Calpha)%20=%202%5E%7B%5Calpha-2%7D%20=%20%5Cvarphi(2%5E%5Calpha)/2%0A"> 并且 <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(2)%20=%20%5Clambda(4)%20=%202%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>Carmichael 函数在公钥系统 RSA 中有应用．</p>
</div>
<p><em>Carmichael 数</em>定义为使得 <img src="https://latex.codecogs.com/png.latex?%5Clambda(m)%20%5Cmid%20m%20-%201"> 的合数 <img src="https://latex.codecogs.com/png.latex?m">．此时所有乘法群内的元素都是 Fermat 骗子，即 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L_m%5E%5Ctimes%20=%20Z_m%5E%5Ctimes">．我们指出（因为证明似乎不甚轻松，例如需要使用下面的 Korselt’s criterion），合数 <img src="https://latex.codecogs.com/png.latex?m"> 成为 Carmichael 数的充分必要条件是，<img src="https://latex.codecogs.com/png.latex?m"> 通过了所有整数 <img src="https://latex.codecogs.com/png.latex?a"> 的 Fermat 素性测试（即 <img src="https://latex.codecogs.com/png.latex?a%5Em%20%5Cequiv%20a%20%5Cpmod%7Bm%7D"> 对所有 <img src="https://latex.codecogs.com/png.latex?a"> 成立，或所有 <img src="https://latex.codecogs.com/png.latex?a"> 都是模 <img src="https://latex.codecogs.com/png.latex?m"> 的 Fermat 骗子）．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-korselt" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 3 (Korselt’s criterion)</strong></span> 合数 <img src="https://latex.codecogs.com/png.latex?m"> 是 Carmichael 数当且仅当其无平方因子，且 <img src="https://latex.codecogs.com/png.latex?p-1%20%5Cmid%20m-1"> 对所有 <img src="https://latex.codecogs.com/png.latex?m"> 的素因子 <img src="https://latex.codecogs.com/png.latex?p"> 成立．</p>
</div>
</div>
</div>
</div>
</section>
<section id="二次剩余todo" class="level3" data-number="8.2">
<h3 data-number="8.2" class="anchored" data-anchor-id="二次剩余todo"><span class="header-section-number">8.2</span> 二次剩余【TODO】</h3>
<p>模 <img src="https://latex.codecogs.com/png.latex?m"> 的<em>二次剩余</em>构成集合 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%20R_m%20:=%20%5C%7B%20a%5E2%20:%20a%20%5Cin%20Z_m%20%5C%7D%20%5Csubseteq%20Z_m%0A"> <img src="https://latex.codecogs.com/png.latex?Z_m"> 中全体可逆二次剩余构成集合 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20R_m%5E%5Ctimes%20=%20Z_m%5E%5Ctimes%20%5Ccap%20%5Cmathcal%20R_m">．注意到 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20R_m%5E%5Ctimes"> 恰为交换群同态 <img src="https://latex.codecogs.com/png.latex?a%20%5Cmapsto%20a%5E2"> 的像，故 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20R_m%5E%5Ctimes%20%5Cleq%20Z_m%5E%5Ctimes"> 是子群．</p>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-dummit_abstract_2003" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">D. S. Dummit 和 R. M. Foote, <em>Abstract Algebra</em>, 3rd edition. New York: Wiley, 2003.</div>
</div>
<div id="ref-hungerford_algebra_1980" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">T. W. Hungerford, <em>Algebra</em>, 8th edition. New York: Springer, 1980.</div>
</div>
</div></section></div> ]]></description>
  <category>math</category>
  <category>algebra</category>
  <category>number theory</category>
  <guid>https://blog.sun123zxy.top/posts/20240922-pr/</guid>
  <pubDate>Sun, 22 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>代数同构视角下的离散 Fourier 变换</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20240513-isodft/</link>
  <description><![CDATA[ 




<section id="从-fourier-变换到-dft" class="level1 page-columns page-full" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 从 Fourier 变换到 DFT</h1>
<section id="fourier-变换及其卷积性质" class="level3">
<h3 class="anchored" data-anchor-id="fourier-变换及其卷积性质">Fourier 变换及其卷积性质</h3>
<ul>
<li><p>Fourier 变换：将给定函数 <img src="https://latex.codecogs.com/png.latex?f"> 映为函数 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20F%5Bf%5D">： <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%20F%5Bf%5D(%5Clambda)%20:=%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(t)%20e%5E%7B-%20%5Cmathrm%7Bi%7D%5Clambda%20t%7D%20%5Coperatorname%7Bd%7D%5C!t%0A"></p></li>
<li><p>定义函数 <img src="https://latex.codecogs.com/png.latex?f"> 和 <img src="https://latex.codecogs.com/png.latex?g"> 的卷积 <img src="https://latex.codecogs.com/png.latex?%0A(f*g)(%5Clambda)%20:=%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(%5Clambda-x)%20g(x)%20%5Coperatorname%7Bd%7D%5C!x%0A"> 则 Fourier 变换将两个函数的卷积化为逐点乘积，即 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%20F%5Bf*g%5D%20=%20%5Cmathcal%20F%5Bf%5D%20%5Cmathcal%20F%5Bg%5D%0A"></p></li>
</ul>
</section>
<section id="复数域上的-dft-及其卷积性质" class="level3">
<h3 class="anchored" data-anchor-id="复数域上的-dft-及其卷积性质">复数域上的 DFT 及其卷积性质</h3>
<ul>
<li><p><em>离散 Fourier 变换</em>（Discrete Fourier Transform, DFT）：线性空间 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En%20%5Cto%20%5Cmathbb%20C%5En"> 上的线性变换 <img src="https://latex.codecogs.com/png.latex?F">，将向量 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a%20%20=%20(a_0,a_1,%5Cdots,a_%7Bn-1%7D)%5E%5Cmathrm%7BT%7D%5Cin%20%5Cmathbb%20C%5En"> 映为 <img src="https://latex.codecogs.com/png.latex?F%20%5Cboldsymbol%20a">，其第 <img src="https://latex.codecogs.com/png.latex?i"> 个分量如下所示 <img src="https://latex.codecogs.com/png.latex?%0A(F%20%5Cboldsymbol%20a)_i%20:=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bik%7D%20a_i%0A"> 这里分量下标从 <img src="https://latex.codecogs.com/png.latex?0"> 开始计数，<img src="https://latex.codecogs.com/png.latex?%5Comega_n%20:=%20e%5E%7B2%20%5Cpi%20%5Cmathrm%7Bi%7D/%20n%7D"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 上的一个 <img src="https://latex.codecogs.com/png.latex?n"> 次本原单位根．</p></li>
<li><p>相仿的卷积性：两个向量 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a,%20%5Cboldsymbol%20b%20%5Cin%20%5Cmathbb%20C%5En"> 的<em>循环卷积</em>定义为 <img src="https://latex.codecogs.com/png.latex?%0A(%5Cboldsymbol%20a%20*%20%5Cboldsymbol%20b)_k%20:=%20%5Csum_%7Bi%20+%20j%20=%20k%20%5Cpmod%7Bn%7D%7D%20a_i%20b_j%0A"> 则 DFT 将两个向量的循环卷积化为<em>逐项乘积</em> <img src="https://latex.codecogs.com/png.latex?%5Ctimes">，即 <img src="https://latex.codecogs.com/png.latex?%0AF(%5Cboldsymbol%20a%20*%20%5Cboldsymbol%20b)%20=%20(F%20%5Cboldsymbol%20a)%20%5Ctimes%20(F%20%5Cboldsymbol%20b)%0A"></p></li>
</ul>
</section>
<section id="矩阵表示" class="level3">
<h3 class="anchored" data-anchor-id="矩阵表示">矩阵表示</h3>
<p>在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 的自然基下，变换 <img src="https://latex.codecogs.com/png.latex?F"> 有矩阵表示 <img src="https://latex.codecogs.com/png.latex?%0AF%20=%20%5Cbegin%7Bpmatrix%7D%20%5Comega_n%5E%7Bij%7D%20%5Cend%7Bpmatrix%7D_%7B(i,j)%5Cin%20n%20%5Ctimes%20n%7D%20=%20%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A1%20&amp;%20%5Comega_n%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A1%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B(n-1)(n-1)%7D%0A%5Cend%7Bpmatrix%7D%0A"></p>
<ul>
<li>卷积性：系数为全体复平面 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根的可逆 Vandermonde 矩阵</li>
<li>正交性：适当单位化后为酉矩阵</li>
</ul>
</section>
<section id="问题" class="level3">
<h3 class="anchored" data-anchor-id="问题">问题<sup>1</sup></h3>
<ul>
<li><p>DFT 化卷为乘的本质？</p>
<ul>
<li>我们给出一大类具备卷积性的线性映射的构造，DFT 将作为特例推出．</li>
</ul></li>
<li><p>如何从代数角度理解 DFT？</p>
<ul>
<li>两个视角：多项式环、矩阵代数</li>
<li>两种表现：求值插值、相似对角化</li>
<li>一致观点：保加法、保数乘、保乘法的代数同构</li>
</ul></li>
<li><p>DFT 是否是唯一一类化卷为乘的变换？作为底层结构的 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 是否可以放宽？</p>
<ul>
<li><p>工程上复数乘法运算较慢且具有浮点误差，更换底层代数结构具有实际意义．例如，被称为数论变换（number theoretic transforms, NTT）的 DFT 变种就将 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 替换为有限域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20F_p"> 而同时保留了其卷积性质．</p></li>
<li><p>我们将其 DFT 扩展至任意整环并证明特定含义下的唯一性．</p></li>
</ul></li>
</ul>
</section>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<span class="citation" data-cites="agarwal_number_1975">[1]</span>; <span class="citation" data-cites="nicholson_algebraic_1971">[2]</span>; <span class="citation" data-cites="furer_faster_2009">[3]</span>; <span class="citation" data-cites="amiot_music_2016">[4]</span>; <span class="citation" data-cites="baraquin_uniqueness_2023">[5]</span></p></div></div></section>
<section id="dft-与多项式环" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> DFT 与多项式环</h1>
<section id="引例mathbb-cx求值插值与复数域-dft" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="引例mathbb-cx求值插值与复数域-dft"><span class="header-section-number">2.1</span> 引例：<img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D">、求值插值与复数域 DFT</h2>
<section id="mathbb-cx-与循环卷积" class="level3">
<h3 class="anchored" data-anchor-id="mathbb-cx-与循环卷积"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D"> 与循环卷积</h3>
<p>设不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式 <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20x%5Ek">，<img src="https://latex.codecogs.com/png.latex?g(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20b_k%20x%5Ek">．二者的多项式乘积由 <em>Cauchy 乘积</em>给出 <img src="https://latex.codecogs.com/png.latex?%0Af(x)%20g(x)%20=%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20a_i%20x%5Ei%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20b_j%20x%5Ej%20=%20%5Csum_%7Bk=0%7D%5E%7B2n-2%7D%20x%5Ek%20%5Csum_%7Bi+j%20=%20k%7D%20a_i%20b_j%0A"> 令 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a%20:=%20(a_0,a_1,%5Cdots,a_%7Bn-1%7D)%5E%5Cmathrm%7BT%7D">，<img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20b%20:=%20(b_0,b_1,%5Cdots,b_%7Bn-1%7D)%5E%5Cmathrm%7BT%7D">，回顾循环卷积定义 <img src="https://latex.codecogs.com/png.latex?%0A(%5Cboldsymbol%20a%20*%20%5Cboldsymbol%20b)_k%20:=%20%5Csum_%7Bi%20+%20j%20=%20k%20%5Cpmod%7Bn%7D%7D%20a_i%20b_j%0A"> 可见 Cauchy 乘积与循环卷积尚有区别．稍加改动，若在模 <img src="https://latex.codecogs.com/png.latex?x%5En%20-%201"> 的意义下——即商环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D/(x%5En-1)"> 中计算，则二者相合： <img src="https://latex.codecogs.com/png.latex?%0Af(x)%20g(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20x%5Ek%20%5Csum_%7Bi%20+%20j%20=%20k%20%5Cpmod%7Bn%7D%7D%20a_i%20b_j%20%5Cpmod%7Bx%5En%20-%201%7D%0A"></p>
</section>
<section id="mathbb-cx-与复数域-dft" class="level3">
<h3 class="anchored" data-anchor-id="mathbb-cx-与复数域-dft"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D"> 与复数域 DFT</h3>
<p>DFT 亦有在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D"> 上的表示．给定 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a%20:=%20(a_0,a_1,%5Cdots,a_%7Bn-1%7D)%5E%5Cmathrm%7BT%7D%5Cin%20%5Cmathbb%20C%5En">，其对应多项式 <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20x%5Ek"> 次数不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次，则 <img src="https://latex.codecogs.com/png.latex?%0A(F%20%5Cboldsymbol%20a)_i%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bik%7D%20%5Cboldsymbol%20a_i%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Cboldsymbol%20a_i%20(%5Comega_n%5Ei)%5Ek%20=%20f(%5Comega_n%5Ei)%0A"> 恰为 <img src="https://latex.codecogs.com/png.latex?f(x)"> 分别在 <img src="https://latex.codecogs.com/png.latex?n"> 个 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 上 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根处<em>多点求值</em>的结果．</p>
<ul>
<li>可逆性：<img src="https://latex.codecogs.com/png.latex?n"> 点唯一确定一个不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式（<em>Lagrange 插值</em>）</li>
<li>线性性：<img src="https://latex.codecogs.com/png.latex?(af+bg)%20(%5Comega_n%5Ei)%20=%20a%20f(%5Comega_n%5Ei)%20+%20b%20g(%5Comega_n%5Ei)"></li>
<li>卷积性：将取模乘法化为点值逐项相乘，再次与 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 上的表现相合 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AF(%5Cboldsymbol%20a%20*%20%5Cboldsymbol%20b)%20&amp;=%20(F%20%5Cboldsymbol%20a)%20%5Ctimes%20(F%20%5Cboldsymbol%20b)%20%5C%5C%0A(fg)(%5Comega_n%5Ei)%20&amp;=%20f(%5Comega_n%5Ei)%20g(%5Comega_n%5Ei)%0A%5Cend%7Baligned%7D%0A"></li>
</ul>
</section>
<section id="小结" class="level3">
<h3 class="anchored" data-anchor-id="小结">小结</h3>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D"> 视角下的 DFT：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En">：作为以单位根为参数的 Vandermonde 矩阵，DFT 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 上的可逆线性变换，将向量间的循环卷积 <img src="https://latex.codecogs.com/png.latex?*"> 化为逐项乘积 <img src="https://latex.codecogs.com/png.latex?%5Ctimes">．</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D">：作为单位根处的多点求值插值，DFT 在全体不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式和 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 间建立起线性同构关系，将多项式乘积化为函数值逐点乘积．</p></li>
</ul></li>
<li><p>化卷为乘，就是把多项式环上的取模乘法变为 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 上的逐项乘积，DFT 保持了两个代数结构间的乘法．</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D"> 作为环结构乘法自然，在多项式环上刻画 DFT 较在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 上强行定义循环卷积具有优越性．</li>
</ul></li>
</ul>
</section>
</section>
<section id="整环上的推广" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="整环上的推广"><span class="header-section-number">2.2</span> 整环上的推广</h2>
<section id="代数代数同构与直积" class="level3">
<h3 class="anchored" data-anchor-id="代数代数同构与直积">代数、代数同构与直积</h3>
<ul>
<li><p>整环：无零因子交换幺环</p></li>
<li><p>设 <img src="https://latex.codecogs.com/png.latex?R"> 是一整环，若 <img src="https://latex.codecogs.com/png.latex?(A,+,%5Ctimes)"> 为一环且配备了与乘法 <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> 相容的 <img src="https://latex.codecogs.com/png.latex?R">-数乘 <img src="https://latex.codecogs.com/png.latex?%5Ccdot">，则称 <img src="https://latex.codecogs.com/png.latex?A"> 是一 <img src="https://latex.codecogs.com/png.latex?R">-代数，不至混淆时简称代数．</p>
<ul>
<li>整环 <img src="https://latex.codecogs.com/png.latex?R"> 自身也可视为一个代数．</li>
</ul></li>
<li><p>我们将 <img src="https://latex.codecogs.com/png.latex?R%5En"> 理解为作为代数的 <img src="https://latex.codecogs.com/png.latex?R"> 的直积，即 <img src="https://latex.codecogs.com/png.latex?R%5En%20=%20R%20%5Ctimes%20R%20%5Ctimes%20%5Cdots%20%5Ctimes%20R">．直积的加法、数乘和乘法均在逐项意义下定义．</p></li>
<li><p>保持代数间加法、数乘和乘法的双射被称为代数同构．</p></li>
</ul>
</section>
<section id="几个观察与整环的优势" class="level3">
<h3 class="anchored" data-anchor-id="几个观察与整环的优势">几个观察与整环的优势</h3>
<ul>
<li><p>关于引例的若干观察：</p>
<ul>
<li><p>DFT 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D%20/%20(x%5En-1)%20%5Cto%20R%5En"> 的一个代数同构，具体做法是在单位根处多点求值插值</p></li>
<li><p>求值插值在任意 <img src="https://latex.codecogs.com/png.latex?n"> 个不同位置进行即可，单位根不是本质要求</p></li>
<li><p>商环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D%20/%20(x%5En-1)"> 带来了与循环卷积对应的多项式取模乘法，还蕴含着“不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次”为求值插值带来的单与满</p></li>
<li><p><em>第一同构定理</em>：设 <img src="https://latex.codecogs.com/png.latex?f:%20R%20%5Cto%20S"> 是环同态，则 <img src="https://latex.codecogs.com/png.latex?f"> 诱导出环同构 <img src="https://latex.codecogs.com/png.latex?R%20/%20%5Coperatorname%7BKer%7Df%20%5Ccong%20%5Coperatorname%7BIm%7Df"></p></li>
</ul></li>
<li><p>选取整环作为底层代数结构的理由：</p>
<ul>
<li>交换：确保求值操作是同态</li>
<li>保留环上整除的结构和多项式根与因子的关系（带余除法、余式定理）</li>
<li>在唯一性证明中发挥作用</li>
</ul></li>
</ul>
</section>
<section id="商环到直积的代数同构" class="level3 fragile">
<h3 class="fragile anchored" data-anchor-id="商环到直积的代数同构">商环到直积的代数同构</h3>
<p>下面固定 <img src="https://latex.codecogs.com/png.latex?R"> 是一整环．令 <img src="https://latex.codecogs.com/png.latex?C"> 是 <img src="https://latex.codecogs.com/png.latex?R"> 的一有限子集，由若干不同一次多项式乘积 <img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bc%20%5Cin%20C%7D%20(x-c)"> 生成的 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"> 上的理想记为 <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cprod_%7Bc%20%5Cin%20C%7D%20(x-c)%20%5Cright)">．</p>
<p>用记号 <img src="https://latex.codecogs.com/png.latex?R%5EC"> 代表全体 <img src="https://latex.codecogs.com/png.latex?C"> 上的 <img src="https://latex.codecogs.com/png.latex?R"> 值函数构成的集合．<img src="https://latex.codecogs.com/png.latex?R%5EC"> 与其上定义的函数逐点加法、数乘和乘法构成一个代数，自然也与 <img src="https://latex.codecogs.com/png.latex?R%5En"> 代数同构．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-dft-exist" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 1</strong></span> 多项式商环 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D%20/%20%5Cleft(%20%5Cprod_%7Bc%20%5Cin%20C%7D%20(x-c)%20%5Cright)"> 与代数直积 <img src="https://latex.codecogs.com/png.latex?R%5EC"> 代数同构．</p>
</div>
</div>
</div>
</div>
<div id="fig-dft-exist" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-dft-exist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="253.425pt" height="83.085pt" viewbox="0 0 168.95 55.39">
<style type="text/css">
@font-face{font-family:PCNCSM-CMSY10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAHQAAoAAAAAA4gAAAGGAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAo0RwsGAAE2AiQDCAQgBYJoByAb5AIAngV2kzOEbbZFpfCkxuwxiK+L5/85ZPf91hhaxzPIpy+QTrZwk2VxFIVFy9ZP9/O38AO5a7BfVImxTpDpQCY8/0yXxpQ8TfGl/e7YGZ+Hgb4WJR5g4lnt+Xhgo4FMcAjD56UwwAluILObuY+XRELyWK39dkBDneaMTV3V0x++muddOBtpQ2sGb9Gk7YPHUnPm+6Oa4z9rtIbxhmcEgH8FCg0YZApEyyxNYz/M9yvFz3hZABRoRNCJbkAjIJ073d+fPAz1nN8d316/rU/NZDPRf5oGQfjIpz19tzY0gtfqpwU36jHDNK0KhKXUSbW6CKIpFa/oKJ0CwrTtDgE9NiaNuvSQJh0mSbMuK/PtxkmmNLaJaTGRRuN2pMmwD2k27te12/Q/LvYzzNOpG7tFhNyo6Bi9ho4ZprnB42Kc2WN9fSz3IDDHXHMd7Z3c3cxdgMjRDGEHKVfMVYggrkihw1B11Vev1o4OAIPRHgjdoc/102AWMngDMw9rVw9Le0DAuGcmGAEAAAA=) format('woff2');}
@font-face{font-family:PALCNJ-CMR7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAGoAAoAAAAAA2QAAAFfAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAocNwsGAAE2AiQDCAQgBYJcByAbyAIALgps9xSFGgpytDH2FTP1/sw2Hp4//J173/2NOUHG9DygaWEeQSKfKKHiouwPyxt7RSu39x/iB5tNVW0mKEmoBCW5Njcv+UMhkznazCs2l8QsZq+qXLMdPwy0gHaVhZr4zgMLLAkosTjyQNLAo8QiytMbtrxLJMql5DOh5WFcHfIzvwZLjsaYFo2IGkEnvtf3p9Uc3QOaIZqAAGA4BImGJSSwJNjjlBLoDofsDR/o/VBuoHgIKEDU21RM/145BQSCn6g+e/c/1gp8643KjpSPNGMSBM0Qea9Sxx8PAMisuKIjlQDBpAkfwKzEXCbNokMbGKHjOCEzZiRqXNhRwGXFQoc2RujlCWf+eMjzy6OY+DR0kQUpXjrbBEZ1SPw18+nPp51BIRBnVrPN7aIcQLWSlMMiRviokAsxgRTWKIdTb7UACXA9crlQDqwL5MrwA9Ojd3q0ZkCBeEMQBAAAAA==) format('woff2');}
@font-face{font-family:HXNLCB-CMR10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAJ8AAoAAAAABLQAAAIwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqCNIIACw4AATYCJAMWBCAFgmIHIBu9AwCO0SdjKE9ViDlwhAkm4uH5Y7znvh/dXg2SHAmWtaDk2chmo2Hy1wXY3vyvuX+YamhTtYgmMQuNtEfUu0mjlCX4v5v8Re6ApvoJnq3SKLA8TDCzto2NYQn2Ak2zXuauk6WUtFxufJeHCQribXxQRPqYvv5vsTn9+D04y1EJKgYHj3J07NODMqOkBTIKhK41Z5BQgEbb16jENKBcqSQZM09MmjNG+e38K8P5Lt8K6hHFoBJFWAVcAqAQELh6a0ddRel+YiXDy2SGv2f52exqSwsMc+E8t3NL/Q3mwPAK1JLN8pIZ3tR2+84qwkUQc2B35Lpruzt8MH7VuaUsL6tQXlyxW1EeFSXlsVkob1YpF2QT/O67Gisdp6OcBZVW01b9tr2H//M6LtDQjvp32Him2NJa87GlJP7Hy0+sf2RK4zBU2XROI/ica31ON/YNNkIMUg0K85o3Y+pntfOMM8YAgEBw/yU9u1s/X6goKATP3P8S9g1ZUgClEggKZCRatMc7iIsXJcRbR/0VMwmYjh4Q1A5CsVYQCCUsd6eAGsVJoUo1pEiFDlKs0nB7uXZLikVhmdCNAlKolYkUaZYixVrtRuXGvWYD6rOvWoKARkGjZtFU1uJCkp1anFvYSrycZml8RrdPbx1YnlvyswGanZWDl4eWywAqOw3/ezYEAjQUaCiz0KhYFi3g0XJxM7KzGbBozkIE4LUtSitvAk2gElyJGj5G7jI9qwHL5iw1yWIAAAAA) format('woff2');}
@font-face{font-family:AGLKCZ-CMMI10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAPIAAoAAAAABjgAAAN8AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAARAqFSIQtCwoAATYCJAMQBCAFgmgHIBviBCiOwrZtE8MZYvJ1lqAq4uH5w9+57/092tSmKZIuCzfnESSSwhS8w7+nvTQlBinrSaOcHtleO4oH/xvzfzP+L+t58ZggISW4pibwA2sLBRhgtrGNCaUBdYOOmG53suSx1iRprSXOnZLXDrWYQXcBjvKJWf8vBu6QD71FHuAGCcBa4MFPeXzPjAJ4N7IrSFShnMwEBRWLRCxgnT3p6Ci4ESY7s6/Lr6zMGyCMNjidWP0DYi5fmyLE1A7xifOmPHqk2/oIOrDVWDA354t86veVUSmlMiBqp9RvcoWS4gJxVE+qzZx/pEFjxJMnq1haCZXOeJK9pQT9iyhfwtNd4qEETyg+3yobxCMfqSu3o+3ve+y570WVrJD79vS69gA6fVhgJbnqJRQXoKf4amvuBwfQI69W3Ude89vyojHy9RYZXqlka5S7kgig7fOPvIQUcQFAjURSY+4DGzJ8rTbz6xsKpZ2aN+rRJjWBuPrgruKjR1DFiFrDnjtfYo+/A26p7qRX4z5Sunu0cVleNDTQAvFaNRskNOb0xNqK0k0paebAfV/9lYy7HGyKWN4w2Xpz77bOZfMjOpLHYhBpKlNKydOS0uNiQqT5bC/yu4vVZC7B55jW7a6XaXLr5lCuKV2ZanFBfiGZh0ExySYExsHW3R2Hm8dYci4zcgcfVSNBzh1kCttbcC2NgeBiH0e2yu7ozWrZLFXDyY895Xtdp8xjnaulnqxIi4JgJ8gj1BoTcs4Zq2xnEYBJ/tgcYSQZzhi8+5gL8LhSuTF3iCkrPO9yTMaRQgs2IYpt1X68bQJvJZZLd3Rx1O6ySK+TqXd0xlR/fVJmak/KxcikSsjYgmrno3JOslXBJnix7RpmkQmcbCJ/7oJnz9Q/DfrJYDWa2KQb8Q3C8baxBQACwdv1c78gxqlvxIoF8H3/t02R/K84zBgAToQEbhZ3wR644kCoaBfN8mmMAJ1iAxRAaHiYU8Cw5wMEYIwEbBgaD5imvh2mZehoumfLIbBokEDY4xiYhi3xTNPKZaZlS1nYc2XgXJK/oY2bWNnbmfnqmzk42CBGd0gZMTASM8/lpvDMmLTMqAQlroFxPQzMJEmQLEO6CKmUOEgSDucSmbBiz44ZX/rMOHBgA2HEU/etaWIkSaQEYcDIBKysRKMVsg6EB6FyWmG4TDHS+qIkUMJlwDhLhAEAAAA=) format('woff2');}
@font-face{font-family:IYPIPC-CMMI7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAANgAAoAAAAABYwAAAMXAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAARAqEIINJCwoAATYCJAMQBCAFgmIHIBt4BAAeibGtgn2LoSxx4KPz4fOy95NU0szKUyJtSmoJD1Y4CjeE+G/X9l8QakAJJFnjmR2YXL2eT1xTP9q+gVL9BdIqFrTHRelutJvQAB9wnAW2m2mS4kzPNBGx4KheWQz88HeArkkyCjmgPur+f12M1Ih8RhWETQkQ5EFsA5rIfNU5BC1RbtDgaRpxGoyTPA8AKAAN0KX9ShfDE6BIEQUQycgNntfm8Rf4jX+XggCK4StKeSeAr9bHAgRBTQ8v9YbYyUll/Wl9AxOpNKZfHC5mZw3FRpJoCSeTcTMqelOr52PxvJbIOGxKluqd1zMascjZc0PXJ3K9lLe3PvaZ8nO4GTUzNYXWYNt7bAAIsdfhxpMSq3WnlPv3GLcdTGPXzW7btsN42oKjDLfJRDMzelN4ha7YUneT3mZJtJDbyh30eMpdVwsxu8uxNGPmyjiD+J9qe+IrZc+J5/68ugzuV3VzhKKpKrhTHE8Cx1fFB8UacJUC9TB9utpX6C1gkepwtXW+heZYmpZr9vGwFT12WwbI3vWkheriSub7hQrqwkaoePpJ1JHEgNDzaU9wqYfNv2Qf6CjJMWtV9lqe+uOuLm/Npb3y6oYbZRV0CpWU50On+YRSFhHeudQlzt6GKtJRb2W02iEaBt0Nx+s1BxlqzGMqXT89z9fGsXXX2xM/IhTp3oW+/5w+6xim+bMqhgZ+3x18ox8lRjKH/EPhUwVhbO22VJ96StcHLYlc9il4JQlxygsPg+92N0sHAIAACOwSvOhJ0VjyRzEMAOBj9F+F8UreOqnUEwCKKE8fx6y5sPzPKIEAIGNKVP6ljOVx/VgNxvJVpkBPWTPCADVg0mOo0tAlOSpMJHmq7E8rMyZAI10JhLngIDEM5Uty9LVL8gzN9pXNcegi4/ynbGVAXHhAuMhNFBISMP99MOPl7mma+Oj7nMzqvIrqnCJLobvAXQCREkVKVamUpZylECUyZbRYgDjhAnpaxG08RIgA88VwXq1CnhLFLHlx5+kB+rnFXm7aTmBmPV3dSJupWp6KRTmKWBJyJ0g6aQAA) format('woff2');}
@font-face{font-family:FQIZYU-CMEX10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAKcAAoAAAAABLwAAAJSAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAPAqCVIIcCwoAATYCJAMQBCAFgmgHIBvJAwiOwnGvhIjJ0G42lB3Bw7H33o+oZWIlQaSO5uMBzzRxlDzB/J/9vffhAxoon+4qJicqL6lt+puvTXoe2FgcUoJRG0u7x02KugTDMLGNY1r9ofbPv/3Oj4Iiha7numQ0G/72d0gmEmIE0iTu0Ms/vuHmxFflMA8KoDJIAwfg0uV1VTYQzU+yMNHvAkh2aXcs4ND/P0ggiRZMeD5uHsikQ8LCJEvQ5l3l//PldxeQInP1M+CW+D4hxJiaSu2EcEpvSuh0+xh99xQ9fSWaFkzyr++h5Sby5sZxMvf6PmJCZ5FPu6KDu5yNar2Nur11mkLKHd1JgePNQy0dubuXkuaPoxAOXB9KiDNHkWBpdPR1acWsQdv3S4ZlfWqHswgtthLHDDo86P1sM2Cvxqclq534sKbZnqr1MQNu5mC9wyGsyNrl5eeINHTUhnYqcjWnkQXv5bxKTdRARARROrK3GUQpWF/wR3Bdui4+Qt1wXT+E+GlWtm+buJWYfgcgEFxd7I4msxz+chgO8BX5T5ovfcdhA7AM5CRAcDX5M30GyQEIgJYKmXg1i9zQp3VbEqZMEoraGKDgBgVVQVIpZVV0WtEwnVE2N10wYAETKQqEUUGIThkooNM6uuiMgYWgYMX6W6D++zXuFeobFxtp6B7oGWNq8m6XTY1M7MInalNGVW55VXahirmRWXcY3BUrVKJShUxlVAQqloH+3yJeQvmKEyuSIXeBPMUwZSJKpjLlchUrosKUERMN9daLVD31IJrhpamd+Bmq5Crvy1ZIhTkjZlEhBgA=) format('woff2');}
@font-face{font-family:ZTOBBB-CMSY7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAIoAAoAAAAAA8wAAAHdAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAp8gQkLBgABNgIkAwgEIAWCYgcgGyADAC4LeCp5sRtCwVqtlgZhRMPGDj/0mc4y8RTxH/e+e25KL965gQfog4VKs0yAGscrSAQSDEU8b/6P2Y9VgH5eNmWUpu5se76zKOEKorN1wJZ5e92cYBBtYYgpCoaQDNrS03l4wrHn58Wjbl9Ba5ebOBfPhwMtXIsPcGJN1VbnUTSa4FTjGyuI/s1bNqKYrLbdRET6NUNb3cMr0EE9o5f/cYduJ8HYicLpBDoAcK3TeQPQVhkVXrlsA/IwfBAAmgYU2jAOC8ZRLAPatQur3VgNPfx3ABRoR7AJ2AdAOyCbA87PT4x9vL59mbR3IqjpH0dF9eb3O8q19r1YHN2Z+/eH9fn6vKtixhIZtEebeDc3wak9R+PXM1ABfq/vaW2BIHz4Bb7pv7utHfzVRcw3at7rjIIEdCsQtoU9BgYGdQYBCQriJxBlEwShkl7X9O0hBLTrNySgQ585EHTqtwmCXrMUsLT3iEVeG243rQ13mLSGO007Fb12PRw45TvNaToaMHNPfOyLpLT32MkWPDR6nDxPa96azBs9soNAkMVAz9DMVM0Y4TNQ5WFfWlSAWdtieKpPRIpW/N8mWgb6CDkJWQbg0PpZWmkloHpK2QpRNdcyMdfQQyhJKEYUAy8AAAAA) format('woff2');}

</style>
<g id="page1">
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="61.56093" y="-80.475992" transform="matrix(.999739 0 0 .999739 -21.911999 92.53)">R</text>
<text font-family="HXNLCB-CMR10" font-size="9.96" x="69.200935" y="-80.475992" transform="matrix(.999739 0 0 .999739 -21.911999 92.53)">[</text>
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="71.967213" y="-80.475992" transform="matrix(.999739 0 0 .999739 -21.911999 92.53)">x</text>
<text font-family="HXNLCB-CMR10" font-size="9.96" x="77.659727" y="-80.475992" transform="matrix(.999739 0 0 .999739 -21.911999 92.53)">]</text>
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="169.919643" y="-80.475992" transform="matrix(.999739 0 0 .999739 -19.648005 92.53)">R</text>
<text font-family="IYPIPC-CMMI7" font-size="6.97" x="177.508234" y="-84.067167" transform="matrix(.999455 0 0 .999455 -19.648005 92.53)">C</text>
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="61.56093" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">R</text>
<text font-family="HXNLCB-CMR10" font-size="9.96" x="69.200935" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">[</text>
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="71.967213" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">x</text>
<text font-family="HXNLCB-CMR10" font-size="9.96" x="77.659727" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">]/</text>
<text font-family="FQIZYU-CMEX10" font-size="9.96" x="87.06628" y="-52.362331" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">(<tspan y="-51.764487">∏</tspan></text>
<text font-family="IYPIPC-CMMI7" font-size="6.97" x="101.00993" y="-41.294487" transform="matrix(.999455 0 0 .999455 -57.284997 92.53)">c</text>
<text font-family="ZTOBBB-CMSY7" font-size="6.97" x="104.56799" y="-41.294487" transform="matrix(.999455 0 0 .999455 -57.284997 92.53)">∈</text>
<text font-family="IYPIPC-CMMI7" font-size="6.97" x="109.934065" y="-41.294487" transform="matrix(.999455 0 0 .999455 -57.284997 92.53)">C</text>
<text font-family="HXNLCB-CMR10" font-size="9.96" x="116.664555" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">(</text>
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="120.537544" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">x</text>
<text font-family="PCNCSM-CMSY10" font-size="9.96" x="128.443471" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">−</text>
<text font-family="AGLKCZ-CMMI10" font-size="9.96" x="138.40387" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">c</text>
<text font-family="HXNLCB-CMR10" font-size="9.96" x="142.713745" y="-44.294437" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">)</text>
<text font-family="FQIZYU-CMEX10" font-size="9.96" x="146.586734" y="-52.362331" transform="matrix(.999739 0 0 .999739 -57.284997 92.53)">)</text>
<path d="M63.02864 9.54155H145.42525" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M143.55237 7.15064C143.93094 8.58522 144.77455 9.26262 145.6245 9.54155C144.77455 9.82048 143.93094 10.49788 143.55237 11.93246" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="IYPIPC-CMMI7" font-size="6.97" x="12.469202" y="-44.281858" transform="matrix(.999455 0 0 .999455 89.33 50.144998)">φ</text>
<path d="M49.1002 18.37206V35.50807" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M51.491108 33.63517C50.056528 34.01374 49.379128 34.85735 49.100198 35.7073C48.821268 34.85735 48.143868 34.01374 46.709288 33.63517" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M78.52072 35.90656L145.44579 13.55992" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-dasharray="2.78941 1.59395"></path>
<path d="M142.912154 11.885318C143.725556 13.12611 144.740244 13.501446 145.63475 13.496829C144.916918 14.03057 144.331295 14.940249 144.426557 16.420827" stroke="#000" fill="none" stroke-width=".398466" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="PALCNJ-CMR7" font-size="6.97" x="13.746505" y="-44.281858" transform="matrix(.999455 0 0 .999455 92.11 65.274)">¯</text>
<text font-family="IYPIPC-CMMI7" font-size="6.97" x="12.469202" y="-44.281858" transform="matrix(.999455 0 0 .999455 92.11 65.274)">φ</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dft-exist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;1: 命题&nbsp;1 构造示意图
</figcaption>
</figure>
</div>
</section>
<section id="构造" class="level3">
<h3 class="anchored" data-anchor-id="构造">构造</h3>
<p>考察 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"> 到 <img src="https://latex.codecogs.com/png.latex?R%5EC"> 上的代数同态 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi:%20f%20%5Cmapsto%20(C%20%5Cni%20x%20%5Cmapsto%20f(x))">，其含义为在每一 <img src="https://latex.codecogs.com/png.latex?c%20%5Cin%20C"> 处对多项式 <img src="https://latex.codecogs.com/png.latex?f"> 进行求值．</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> 的核：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BKer%7D%5Cvarphi%20=%20%5C%7Bf%20%5Cin%20R%5Bx%5D:%20f(C)=%5C%7B0%5C%7D%5C%7D%20=%20%5Cleft(%20%5Cprod_%7Bc%20%5Cin%20C%7D%20(x-c)%20%5Cright)%0A"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> 的像：对每个 <img src="https://latex.codecogs.com/png.latex?c%20%5Cin%20C"> 对应的理想 <img src="https://latex.codecogs.com/png.latex?(x-c)"> 应用中国剩余定理就有 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7D%5Cvarphi%20=%20R%5EC">．</p></li>
</ul>
<p>故由第一同构定理，<img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> 诱导的 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbar%20%5Cvarphi:%20R%5Bx%5D%20/%20%5Cleft(%20%5Cprod_%7Bc%20%5Cin%20C%7D%20(x-c)%20%5Cright)%20%5Cto%20R%5EC%0A"> 是一同构映射．</p>
</section>
<section id="dft代数同构的特例" class="level3">
<h3 class="anchored" data-anchor-id="dft代数同构的特例">DFT：代数同构的特例</h3>
<p>作为上一定理的特例，DFT 在单位根处求值插值．若 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 为内嵌于 <img src="https://latex.codecogs.com/png.latex?R"> 的某一 <img src="https://latex.codecogs.com/png.latex?n"> 阶循环（乘法）群的生成元，则称其为 <em><img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 次本原单位根</em>．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-dft-exist" class="theorem corollary">
<p><span class="theorem-title"><strong>推论 1</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?R"> 上存在 <img src="https://latex.codecogs.com/png.latex?n"> 次本原单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n">，则多项式 <img src="https://latex.codecogs.com/png.latex?%0Ax%5En%20-%201%20=%20%5Cprod_%7Bk=0%7D%5E%7Bn-1%7D%20(x%20-%20%5Comega_n%5Ek)%0A"> 故 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D%20/%20%5Cleft(%20x%5En%20-%201%20%5Cright)"> 与 <img src="https://latex.codecogs.com/png.latex?R%5En"> 代数同构．我们便称二者间的代数同构为 <em><img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT</em>．</p>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="唯一性的讨论" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="唯一性的讨论"><span class="header-section-number">2.3</span> 唯一性的讨论</h2>
<section id="全体代数同构的结构" class="level3 fragile">
<h3 class="fragile anchored" data-anchor-id="全体代数同构的结构">全体代数同构的结构</h3>
<div id="fig-big-picture-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-big-picture-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="228.15pt" height="52.59pt" viewbox="0 0 152.1 35.06">
<style type="text/css">
@font-face{font-family:BYKECG-CMR7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAJAAAoAAAAABBAAAAH3AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAPAqBPIEsCwgAATYCJAMMBCAFglwHIBtJA0CeA+7OIpRB4LlvS9fvPFAP09YYD/+t/e6bmd2PexJrmswSpVmlW8yETKiQaByqJUvs0Li8exBjeiGOZKWVXnmlj+dt9/Zv5CMMIbMwtKj8pxyw3PHBgxZQW81DSzB7SRMJPLE0srYWSJEWWmARUN80DpdEInHSjk3ImY0BFenk95+lX0K8s2at8IgamdnP+a7LBxi79gMNsoAAoGlAQsYQpMAQlEVArQjJrn2AqnkU3cWSQf1nm4BjABRAEtOJujJ61xgXdv7w8X2HPe7lmXc6y5rYWLkSdDribdvsW+sD68ea2LHj0nW1tO/efVlMiu7hyrm3eCyRsrJtbFJ+5iHPlj2i4fWJq83Fgmn/OWRLjJnhafAmvRxNoxKe/k6CS9yo3NcDrhTx98Cjgk/zhPsEAIHg5B4Mp1O3vnEV8Bb7j4PXSNJDmwSCrEFaAvjWlwAA5CCNgJyKB5GtQoCgJ3W4B0HoRYCiU68AlU4TIKh1mgNBhwlqSNHtwoygSBUjClBRG2oaSR3WbW1n//nWyCsx2NfbX+EdGmW6eUuNUp3P3jFbOXWF1XX5pTKdUmvLwFu5UhVq1chVRSZUuRy8mzJeEgXz5c2fgrdQUUzi5KpSrVC5MjIaSupq+HNZP86cgZyYpdGbOeoUqu7lKyWjo6QlRyQA) format('woff2');}
@font-face{font-family:QEMJAF-CMMI7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAMEAAoAAAAABRgAAAK4AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAPAqDPIJ4CwgAATYCJAMMBCAFgmIHIBsbBECOwrZtE8eJiuUMNfna8UCt/d7u3j/MtXmkEyF7t0bTxpACpet0SueG8rJJ6aACs9CUQU2fpCefwq83dZNblE0fUz3Bj7YWrwHeJRRGtrGNiSUcMfQ8VY1HpplVPA5zuCDF9zCqRHyLT/51wEhzw1dVcA+KMDnMPQc4va7OAXLO0t0EClQoAEbcKgoQkdBMWiC1jHFA7gdxjaAogE7xehAguITl7CM+WMgIvPXIVY1ljY0XkLY3q83rBrOTGDY9/c5+4dq7N6bH3vHPvaEXXXSOE4uL4H1k4JX7gjI6Necwa3OZ0//UqA3XX2HfmS+c9Lr9+voiQVGzk5ub23pp1OIs9E8bs2/fIm2/5MwMOqWHdV6b6Kyia29od3aDPeb8ir3zhn5N7dqUhPF8x+L8d7S95L2lLr9uDLE7eu0Io4F+MXlufITMH12LUtMOUW0/CUNI28xUxu/XCdpRSmDoj9pdvD6qaXrC5KiBpuZYlFzJtqzjK5tmBZXJa5/RUDRMQ9NtvU3kf+R5oUGldgQ5DI8HA7BTjnc3nKnXGJSRep6bSsfS83jmNq2778/+iiqXftjg/bf9qk2kCShlAuf/tObRzxOjZY4fhgNuLIigajdTufVSOlzQkqKDvkhCEWibFxkBeMdOhukAQEDgcLt6L0U94J9CysAffaBAimIw3g93S+WiOP0sJME8V3tNekGKiJ/AJsSBSnIkvqGXlW4gCNWBmZipVieWVOkSc9VG1yt1ciMtZBWCXpIkZtrliyWt2sVcu9mq0rLjNw3wkdhiFBeKQnmOJIRC7wt8y9XJxVB7le3LrM6rqM4pMnF3ctPbgFSiSKkqlbKUMwGVyMQnxaJwQSKheByRIEjIG+PxtQp5ShQz4cqJiz/EN4pjjLR9oEwvXd2ozlQtT8VUjiIm3DlxyxqlAQAAAA==) format('woff2');}
@font-face{font-family:OCPSCJ-CMMI10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAARgAAoAAAAABuAAAAQWAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAARAqGcIUuCwoAATYCJAMQBCAFgmgHIBtjBQieBTnZaUqqLZeK5sS/8UT9IXh47f67SebNB8iFe4qlK6EyT787Q+/pXwalnZO2I5iB5IP/STc4oW3hecQBT1+WaV5ggd3gQPOM4nnVaJLFlyd6/q/J/x1QBSfIIZ1YtV773TawtdAED2yJa7CBpdiamGbu0pLPlmiha0n57iX5OQAlL4nCBHK7/P/OrMmR+CEikoQFEDqQAn6K4VmJQYCKRpIVMACFQNcaBgASUIBzXOSMRjxgjjlSNRJBssVoNBpnjDZyaQRWCJUaRSBAtAPnDRKBcDCPcAlzhp+8iDrxRDyvFDosNqhvdhl4CJhL5GkHW0/B+yBpCwFpQLIliOMG9UqDQquOOezcbV3Q3Gilc3ZvWDiaW6gjhjaiOU3IwQl65dBJP989/tmzlvvm+zYn/jYIx1n77/031qNoY+MTry1bT+757HjSVrYgONIBzrxYsexsxto52oWXnvhtaYKpIVuiWWTcYHGTK6eNfcrpid+OSaX77I3EcVYMax7e95zH7uTU1T2UdZ3Ig3EQ6/vpwpM9CONpBnNPHbxom3ZCMDe+mbiOLV56bhQZNyi99N0xJVw2kD0s0IAILt35vXghdl8XGLxvrke3+MuQbxPfchp6SNhxl3bkxGfr8uIohBPCg6jQfrTzeFa8HhxXDLBgwTeezRzkhQlGZbrXb9dZrNBASYygEiJLwtkTeRyN4NkGXRp8x6O7G7tFgK2AXO1NJuwK8XxRDKUW0vPiShZwHk7PIXNpBdQMzx+uvZpyFSYO213v53+CRkFKM6SnLErkjeRAR5b6+zv+tj5y09O8Okd5bd7esrC9zstpRCPIomq/VkefjPUstnAFd/UqcaeJvoi+UMQXVzl3vZz1mrgRtXcBE1ez6IdZOq802/bpMGKI6HPhJmCoSn+dHa+AIvZIE24QqRd6xXAkvNItu+wNyVML+d1Gd8P2TpZ7WtCxi/GBlmS+sv1ke/amXFsVNisY319Aw3p94C3y66kdpMlpFoFqJto303FVkev8f/4G2ItucYSwxaJsZqCnXpnDmr3bW5eK9WY/snTJows4dfIcZ7f/hdpmeQvgnbfsad4lODmbmrnlUwJehjaLF4PGD3OlAfA+/5vrLuOzGpbr4IU2CPCTfAG+aGoYyBCVEwsiQVZWwFVqTJk0pmhbMhsIAnZai9OwwY4zYYU3p2ND2HpLPElGITQLBL7UBk7Dk8mcCVcWczqe7OxYkszlg037yLbaWt/GXt9MUt/S0lRW5hKalJWSGQ+9t6f5J4bEJQZF8MhLyVVHgyKiiCCaBOIJIBYeaojCn+JIrLHYBnsFmyG5yBJLTJElnlbwUeMIIYpIeEgglngbKHMjra7PQuAfD5KipMMkEkLcoiAi4CGJWBKTQgUAAA==) format('woff2');}
@font-face{font-family:IRWWWY-CMR10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAKAAAoAAAAABLQAAAI3AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqCNIIACw4AATYCJAMWBCAFgmIHIBu9AwCeBU7ZPILTFjr0aAV9yX0Z/BPphPHw//f99rl/mAb8lc/UCmQEmcGiGWjkTMrCKKCWB/h+fly+P5F17WRMTAJSWTu2oa4uEUu55sFhAD6jy2vq4vm/GX+RAprqCWYbiwJbCxPMbIyBYQn28qPTs/Pdxe+XEkmWN67LwQK5eEHLUCB9xLz85VkaAvrsOOiNClAROPgq1zd+AyRYJ8tBhpzA9WaBhBz6dq4vzi5QVZYkGzpJyLKw7r/uC3TTtUCvKII6CjgEbgHIA4KePi7KKJcvJmZD/FCoNkQQDs/l5QXmBaK84g3Nb4AbCMyiwjD+ZIjfslm4NRfkBYOWge26y5LN0uG9xoviDVU1uaZarJ0lpUStVI3Tr2qBWtUlbxKU3qTBwey4ntul1mkLUj9l54RvhwYwSK55rYXGDOJIftqPVEX6iZkT9j+Fml2LKoNzCuErkv9RdnV1Njp2suWzec/NmkeN03+6YwMAAsF+6X1B0er7SorNgz/eTxnsP2QmB2UJBDkZEiOF8Q3I5C8kxAtc15/YS+zGHAYVQigaQyCwXPWEAC3KR/LqWkhBzQwpqlv1V031iBX5irBEJSRvzIwUDE0hRWPbStWm52yA+uxLJLEFYhe1Y2js7q4kO9Td0bUVeDmN0vpNHr/BVtXb0dNWA4aDjZOPl45bFRoHrZrtSNgE3CbSDoOGrVsXPubTPEwc7Kp069AVAQi0PYpW3QS0ktrgiqjlZ+JJM7Cp0qtDTyEZCw==) format('woff2');}

</style>
<g id="page1">
<text font-family="OCPSCJ-CMMI10" font-size="9.96" x="25.107446" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">R</text>
<text font-family="IRWWWY-CMR10" font-size="9.96" x="32.747451" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">[</text>
<text font-family="OCPSCJ-CMMI10" font-size="9.96" x="35.513729" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">x</text>
<text font-family="IRWWWY-CMR10" font-size="9.96" x="41.206243" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">]/(</text>
<text font-family="OCPSCJ-CMMI10" font-size="9.96" x="52.82621" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">m</text>
<text font-family="IRWWWY-CMR10" font-size="9.96" x="61.571927" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">(</text>
<text font-family="OCPSCJ-CMMI10" font-size="9.96" x="65.444916" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">x</text>
<text font-family="IRWWWY-CMR10" font-size="9.96" x="71.13743" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">))</text>
<text font-family="OCPSCJ-CMMI10" font-size="9.96" x="114.920001" y="-45.564106" transform="matrix(.999739 0 0 .999739 -.458003 74.496)">R</text>
<text font-family="QEMJAF-CMMI7" font-size="6.97" x="122.525199" y="-49.164196" transform="matrix(.999455 0 0 .999455 -.458003 74.496)">n</text>
<path d="M62.57686 26.429005H109.60103" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M107.72813 24.038095C108.1067 25.472675 108.95031 26.150075 109.80026 26.429005C108.95031 26.707935 108.1067 27.385335 107.72813 28.819915" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="BYKECG-CMR7" font-size="6.97" x="-4.794386" y="-45.551166" transform="matrix(.999455 0 0 .999455 89.743 68.303)">¯</text>
<text font-family="QEMJAF-CMMI7" font-size="6.97" x="-6.07169" y="-45.551166" transform="matrix(.999455 0 0 .999455 89.743 68.303)">φ</text>
<path d="M132.05055 27.393145C151.90007 29.130325 133.25415 .203965 125.00044 17.901585" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-dasharray="2.78941 1.59395"></path>
<path d="M127.958856 17.214755C126.498736 16.951516 125.528277 17.429752 124.91626 18.082146C125.022705 17.193972 124.76535 16.143131 123.625236 15.193719" stroke="#000" fill="none" stroke-width=".398472" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="BYKECG-CMR7" font-size="6.97" x="-6.07169" y="-45.551166" transform="matrix(.999455 0 0 .999455 147.46399 59.937005)">?</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-big-picture-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;2
</figcaption>
</figure>
</div>
<p>已经建立 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D/(m(x))%20%5Cto%20R%5En"> 的同构关系，这里 <img src="https://latex.codecogs.com/png.latex?m(x)"> 是若干不同一次因式的乘积．但这种同构或不止一种．为研究其是否在某种意义下具有唯一性，需研究全体同构 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIso%7D(R%5Bx%5D/(m(x)),R%5En)"> 的结构．该问题化归为研究 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上全体自同构 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BAut%7D(R%5En)"> 的结构．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-dft-unique" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 2</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 是一与 <img src="https://latex.codecogs.com/png.latex?R%5En"> 同构的任一代数．固定代数同构 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi:%20%5Cmathcal%20A%20%5Cto%20R%5En">，则任一 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20%5Cto%20R%5En"> 的代数同构 <img src="https://latex.codecogs.com/png.latex?f"> 都具有形式 <img src="https://latex.codecogs.com/png.latex?f%20=%20p%20%5Cvarphi">，这里 <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20%5Coperatorname%7BAut%7D(R%5En)">．</p>
</div>
</div>
</div>
</div>
</section>
<section id="rn-上的自同构" class="level3">
<h3 class="anchored" data-anchor-id="rn-上的自同构"><img src="https://latex.codecogs.com/png.latex?R%5En"> 上的自同构</h3>
<p>设 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20e_1,%5Cdots,%5Cboldsymbol%20e_n"> 是 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的自然基，设 <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Cin%20S_n"> 是有限集 <img src="https://latex.codecogs.com/png.latex?%5C%7B0,1,%5Cdots,n-1%20%5C%7D"> 上的一个置换．定义 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上由置换 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 诱导的模自同构 <img src="https://latex.codecogs.com/png.latex?%0AP_%5Csigma:%20%5Cboldsymbol%20e_k%20%5Cmapsto%20%5Cboldsymbol%20e_%7B%5Csigma(k)%7D%0A"> 容易验证 <img src="https://latex.codecogs.com/png.latex?P_%5Csigma"> 保持逐项乘法，因此它也是 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的代数自同构．</p>
<p>下面的引理刻画了 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上代数自同构的形式．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="lem-perm" class="theorem lemma">
<p><span class="theorem-title"><strong>引理 1</strong></span> 全体 <img src="https://latex.codecogs.com/png.latex?P_%5Csigma"> 构成 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上全体代数自同构，即 <img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BAut%7D(R%5En)%20=%20%5C%7B%20P_%5Csigma%20:%20%5Csigma%20%5Cin%20S_n%20%5C%7D%0A"></p>
</div>
</div>
</div>
</div>
</section>
<section id="section" class="level3">
<h3 class="anchored" data-anchor-id="section"></h3>
<p>只需证对任意 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上任意代数自同构 <img src="https://latex.codecogs.com/png.latex?P">，其都可被某一置换 <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Cin%20S_n"> 诱导得到．不妨考察 <img src="https://latex.codecogs.com/png.latex?P"> 在 <img src="https://latex.codecogs.com/png.latex?R%5En"> 自然基下的矩阵表示 <img src="https://latex.codecogs.com/png.latex?(p_%7Bi,j%7D)_%7B(i,j)%20%5Cin%20n%20%5Ctimes%20n%7D">．则 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cboldsymbol%20e_i)%20%5Ctimes%20P(%5Cboldsymbol%20e_i)%20=%20P(%5Cboldsymbol%20e_i%20%5Ctimes%20%5Cboldsymbol%20e_i)%20=%20P(%5Cboldsymbol%20e_i)%0A"> 可分行写为对 <img src="https://latex.codecogs.com/png.latex?k%20=%200,1,%5Cdots,n-1">，都有 <img src="https://latex.codecogs.com/png.latex?p_%7Bk,i%7D%5E2%20=%20p_%7Bk,i%7D">，因为 <img src="https://latex.codecogs.com/png.latex?R"> 是整环，故 <img src="https://latex.codecogs.com/png.latex?p_%7Bk,i%7D"> 为 <img src="https://latex.codecogs.com/png.latex?0"> 或 <img src="https://latex.codecogs.com/png.latex?1">，即矩阵各元素只能取 <img src="https://latex.codecogs.com/png.latex?0"> 或 <img src="https://latex.codecogs.com/png.latex?1">．又对 <img src="https://latex.codecogs.com/png.latex?i%20%5Cneq%20j"> 将 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cboldsymbol%20e_i)%20%5Ctimes%20P(%5Cboldsymbol%20e_j)%20=%20P(%5Cboldsymbol%20e_i%20%5Ctimes%20%5Cboldsymbol%20e_j)%20=%20P(%5Cboldsymbol%200)%20=%20%5Cboldsymbol%200%0A"> 分行写开，得对 <img src="https://latex.codecogs.com/png.latex?k%20=%200,1,%5Cdots,n-1">，都有 <img src="https://latex.codecogs.com/png.latex?p_%7Bk,i%7D%20p_%7Bk,j%7D%20=%200">．于是（由 <img src="https://latex.codecogs.com/png.latex?R"> 是整环）矩阵任一行至多只能由一个 <img src="https://latex.codecogs.com/png.latex?1">．假如存在第 <img src="https://latex.codecogs.com/png.latex?k"> 行全为 <img src="https://latex.codecogs.com/png.latex?0">，则 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20e_k%20%5Cnotin%20%5Coperatorname%7BIm%7DP">，与 <img src="https://latex.codecogs.com/png.latex?P"> 作为自同构的满性矛盾，故 <img src="https://latex.codecogs.com/png.latex?P"> 的矩阵表示每行有且只有一个 <img src="https://latex.codecogs.com/png.latex?1">，其余为 <img src="https://latex.codecogs.com/png.latex?0">．<img src="https://latex.codecogs.com/png.latex?P"> 的某两行亦不能完全相同，否则（由鸽巢原理）矩阵某列一定全为 <img src="https://latex.codecogs.com/png.latex?0">，与 <img src="https://latex.codecogs.com/png.latex?P"> 作为自同构的单性矛盾．因此 <img src="https://latex.codecogs.com/png.latex?P"> 的矩阵表示是一个置换矩阵，即 <img src="https://latex.codecogs.com/png.latex?P"> 由一置换诱导．</p>
</section>
<section id="dft-的唯一性" class="level3">
<h3 class="anchored" data-anchor-id="dft-的唯一性">DFT 的唯一性</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-dft-unique" class="theorem corollary">
<p><span class="theorem-title"><strong>推论 2</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?f"> 是任一 <img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT，则任何 <img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT <img src="https://latex.codecogs.com/png.latex?g"> 都具有形式 <img src="https://latex.codecogs.com/png.latex?g%20=%20P_%5Csigma%20f">，这里 <img src="https://latex.codecogs.com/png.latex?f"> 是一事先固定的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT．</p>
</div>
</div>
</div>
</div>
<p>作为推论，<img src="https://latex.codecogs.com/png.latex?n"> 点 DFT 共有 <img src="https://latex.codecogs.com/png.latex?n!"> 种．这一结果的显著性在于，只要不计求值得到的 <img src="https://latex.codecogs.com/png.latex?n"> 个点值在 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的排列顺序，DFT 是唯一满足卷积性质的可逆线性映射．</p>
</section>
</section>
</section>
<section id="dft-与矩阵代数" class="level1 page-columns page-full" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> DFT 与矩阵代数</h1>
<section id="第二个视角矩阵代数" class="level3 fragile">
<h3 class="fragile anchored" data-anchor-id="第二个视角矩阵代数">第二个视角：矩阵代数</h3>
<p>我们建立了</p>
<div id="fig-big-picture-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-big-picture-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="230.025pt" height="52.59pt" viewbox="0 0 153.35 35.06">
<style type="text/css">
@font-face{font-family:OGKSWC-CMMI5;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAIkAAoAAAAAA+QAAAHaAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAqBFIEYCwYAATYCJAMIBCAFgmIHIBsvAwAeB+XGM0v8SJJ+1/Hw/L167ssaS+MxiXDShVrRipTgH7+/mr9vj+JaEfAlhWI3ZzgxMVTHawsi2d1+E8o0wQQzy7T/u8n/nR4X0A1tmieebZJLS3sJZbZxTDqQFngg2c4oeiXl1Bn7bPbYCrlsx5Qw0kvPwVSYjBj7dQ5aKgooRdQPAK3n9WghvO/ehwzICQgAshBAQg59SKAPbw3k5QW5Hwr5if5+wAAkkEfCDXgAkAekleSMPvQqnCtV/v1d/CHZr8nELf5mLaXuqdC3cj6wnb/o18Hz3K2st7cb42iwD+mYlL9YUa8WE4Ht4Lg4wRCb7OINO1HtdVR45X3tLleG2odfGiksFOpR4++MV5+piMCqB4BA8BO5tpEm9P5HIjzAv8gfZcdk/7gAdgqUJRDskn2DATkBwDBhJtIYkhu7IImqF0yghULk1bUwKaiZkaK643DVVDMkJgrCEhOTvDEDKRiaIEVjS0nV3cn5636v1cuhMAQSQh2BxaK1XWtLTfWNrdxbZZXKo3d6tObClvrmvBkIrMxs3FzUHAqxWKlExoKDgkFAgqAOAQsLTRvxzN+c9KwsCjWp18gAimdhefKVQCWjMKKQioeek4eWWaEW9ZorQ+AIAAA=) format('woff2');}
@font-face{font-family:KJNRKA-CMMI7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAOcAAoAAAAABeQAAANTAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAARAqEeIQDCwoAATYCJAMQBCAFgmIHIBuyBACOwrblE2Om6hCHuMxPHCYe6vf7nd373kdEGiTR6WLVE5XQ6FYqQyyULN6oX4bXy3+5XImklIJC8gbf+DVKU9s/cE5epK2BUn2Cs9aBrUEihUY4e2KG0ewFSgenm7u0FamlQ9vw8MDDHkouQc2gJp8oV2/jmooL/YkCaAUTwDcQHjnWzW1mFKB3Wi5hHUARyBCi858iswXjYEEU1cYz3bolTiWWy/+dNPR/pdPeNAEBsjK+GzVegKi1P4wUcoXdXYM9CuNv75DRmSpuRwkM60TRki7kYk4oSKirE5VlXi+ZQtienvBHrJ33EfP1ZqF5HdEER5+ZeyfbSVJMrA8q6ZUdPxbubkfRzk6aUt8R7UliiWa39YT3q/Mu8/f3g+elugetPhako0e5W37fuvZatIRPaIikSfWt6p4/HvfzY1h3+/j4pGAI1t/NkzvFyOdn6JFm1dWFdOAevI/ivMPIyBOuRY6RS2oP5MWS8Gl5n9ChkXzVX63k3vYZ23/0Nzb6rksfCUL+pT7cw+AIyBIalkG5/t02r/pXCunQZ/zQHIMl6d9HxUDpvsAiPTzMqia8DfPhJF0bZDwZSsEEg5joPNTss9+/yt9VXDxaIDiRz+K3YgtWsc0jHuw85mylYZaQlUJ4MGH4cwVXodiLGCGKu8fNXBIr4ovCXFwtHvRJk3QqD/KFjKyKR58QC8SSk0tztMTRaOE2Xjidx82q0WXZDICDbr7KvI1cznoqpUWtIxQNjbGVki+efrf506MbrjawfVX44+EPscdY+Pnsfsgd47f+ntRle1dgk3FuWPZ4sE0uhdcGFBVP08/OFpCLQoy7G7C9VhUJBQACQbyl/w8aMv7LWKgAXq9emLjQkSwEZR/YXAnBBh0dYKPTWggAQYC8KL+AQz4A9QKBExAqp6N0QNLrDmQBDEGRVPoN9cVanzmxod/y6l6zNMGiYgJhkXMQK9NixdqkUrFhWnfaa8fyEUj/4Wypk6Orp5OFipWLi4PezaKnoaquajwXTwrPjEnLjEoQ11LVxIOBlSQJkmVIFyGVOBdJwumRRE4cufLkxIIKKy5cONBD2HxbmhhJEonToErdA7AzEr2MkJmAcC9UTksdLlOMtHlREojTokozaoQB) format('woff2');}
@font-face{font-family:VIMGMN-CMR7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAGkAAoAAAAAA2QAAAFbAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAocNwsGAAE2AiQDCAQgBYJcByAbyAIAngXO6YtGFCcnRJ42DA95eTzFQ/x9vzPzpmXdQZbV80B2C/PES+SLpAmlG6Xdi3WdS95QDp5uVzzgUF3SVwJkYjbwm+34YaAFtKss1MR3HlhgSUCJxZEHkgYeJRZRnt6w5V0iUS4lnwld7kR95Ft+/M96aowvWsSA6kcnvsfnwxCh9A7oNHQCAoDWQKLDLFxgFmETopRArzX22jW0H8oNFA8BBYh6Go2xn1MHgEDwPu/1ZuLybxAv8FlMdqS8hRiUIOg05JVKHb9QAEBmxRUUqQQIJg17ASYk5jJiAn20jH7ai8MyYw4uakhY54LLvBH66IF++uVhh/7jIc8vj0onsIKQ1oJUXTpbnuFQHRJ/Te8w3h6GcxAZgREQzdLcyt5O3wYILPX0bSyUHAFLIETTBFKqUt/G1tjSAuAxuHpY5ULfRtMFvZXWGeg5GNs6GJoDIobgDQ5BAAAA) format('woff2');}
@font-face{font-family:HJWCRM-CMMI10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAARcAAoAAAAABuAAAAQTAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAARAqGcIUuCwoAATYCJAMQBCAFgmgHIBtjBQgehenGnpX9+jXEEO/IFMEDn1e+n2RnpXQBuO2Nxsmca8n7Yvg8/ZdBaTenhIYM1mkfIA4X+ekJZQnHhRZgaW0tieIELvD5vyb/d+BNkSCHdGLVercCWvNaaIIHtg6wgaXYmphm7tKSz/agNbqWlO9ekp8DkKWLotEBaZv0x1VW61D8EgHhQh9gDSACfoqOqSOtIIkyxmQmABmBrp2YAEACZEDNpIpCSKyHHlJBGd2MeXQjceL0xEzk0hC8EAolCjeAqAHOGyQEwjzUXd5ZBmu1/sdfird5XjcyMpatKt/+3HUOnr4ObDkJ37Pwzbi85XmTxPh97mXaHdwzJZNJtLUbob1ZZVBjs/z4zTkbkBIUWYFMXpl3/bh97eQ02sZ3j33zpvJ1xevqatZayI/lbnvmsmEZgqxY8dJ+88WXTxy3v6xefpyzez04rV3+gh0V6DryOt7Jl86bV8KwfJJ4FX+f+8QF6uS1pIOlL523H9A+S9iA35eLoqt2XbObSyot3dg9NPccno6S8cu2pYUdqRWlrwJzTl7XVk87IZgTsgp/Dj3xwG4Df597zgOn7Qd5c7dP2sVensc5+dRZqxW7rrF3PKvYgGzxl6FaK7pYuvN56Pan0YdvO245dWIP5Md5OxDutQB138SQE56aAVAPzke7CnJ8Wqh3ruPR+7WrhDPcWiFO364gYMzw9BIvfK7UkWJc++LehrOr2cTp8Wzm3184A4v3M8S0tHRXTOZ8yo2RuXEmaWqy6dvna14WrtBnkQuuOLz9594FxiugNLkgU+VVgtp406e7LiaOykOHGPabydV1dQrYzP5u2MYLFeRfK0pxxal3g9JOY16JfvBOmFOei9v93Uqas04ZOyvyJrekZlFXCT5PTXmvmNSMwJM8eS4qphePvOzPmcf2rjNJPX4a8NOk2feTh99rDOrNPPHT0liVe6547zkwryacZi9kgsoI5txrEWaklVMK9MQobNySmqI+2v+vJP750E7CgUM57EVZqe9GjFb7nWP9/+9qJrhIbicOIMQg2FyiI8dIm+ocSerjfWYTjviRVIp9asmRS2NeJvF1bKx6sSjlfahlWSAYlk8JcExHTtZmJPzWkxUAPlaO6uuaia9yh3QDopAHAXGSzscJRe4A0kXhWB8/kJByoeYUBid1qPIGzAKCgKlqsQrGmLI6GOLAajDGe70BdkQgIxR9BE4UJVbBjgFWBysWsRrs2FEwIIJLB5v6kW28P1jqKoxIXJFIQCG/hLoVUvm45b3dq2mkfXCktZuukiqbo0E6vXTTxzBDNDMAnUJ6aaJ5PfgJUoqLQiJINIhUB1AQQhX4qIO000sPdEIJIsQHsp0er1O/EDRFbYwrcQcjtDM4rJVu6IQTRFiRKQMA) format('woff2');}
@font-face{font-family:ATDGFU-CMR10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAJ0AAoAAAAABLQAAAIqAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqCNIIACw4AATYCJAMWBCAFgmIHIBu9AwCO0UvPmBckSUE4RYkg2u83e0++GObRukdC0SwaGslD8kpqJGhEMpnSuZ8fl+8fjIkVMvvy4tqxDVVpif93k7/IHdBUP8GzVRoFlocJZta2sTEswV6gadbL3HWylJKWy43v8jBBEU9oDirSO+bxnwez04+3wfGMFqgGB49yedVSCgTLsgvIKISuNWeQUGDM9o3B2QTampJkhatM2fkfy/x2/s2GfJ7PBPWIGnRRYQe4BqAEBK4+JWI0m2d9E6YUk0lrMqeazZM8nsGQbLAmi5cLjYYkg2ECCc3mlH5TisOKcHXSmGw0Vrat6U4kK9LOTdtj8XI+hdzRrjsnJEp0Gu04+KIICvLdcuxSpec02J7d0ye5FRQXCaif2Xmh3zASbYEop/BJC7YZFFv4tJ/D/PAfNLSf8BkZxdai1vg5jfBl4b8+sNVqNtoj1co85XGl8KYQDjLOsAeAQPD2cR+Zy/T6ImFL8Jf8Qwb7hiwpoCmBoJCRmCSMb4iLVwnxBJf9FVuJzZiDdkIItSkIhBK2PShgoDgpdQ1IpWOW1LoW29tmeMCKsiUsiAIpTakglQkDpDZlLWpbdZcNqM++av2TgkJDkp0DoxPc3ZLslLuL21bi5TSrqKW8saW0WuXp4uFnQ6Ba1eo0a1KsgUq0WkX879XwlyRIqBDJnAWKlsCdmxTFGjQqV6uGijsXbhEQqmuidP5NUBQUaF+JRVqUaywrVU3FkwuPJokFAA==) format('woff2');}

</style>
<g id="page1">
<text font-family="HJWCRM-CMMI10" font-size="9.96" x="25.107446" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">R</text>
<text font-family="ATDGFU-CMR10" font-size="9.96" x="32.747451" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">[</text>
<text font-family="HJWCRM-CMMI10" font-size="9.96" x="35.513729" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">x</text>
<text font-family="ATDGFU-CMR10" font-size="9.96" x="41.206243" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">]/(</text>
<text font-family="HJWCRM-CMMI10" font-size="9.96" x="52.82621" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">m</text>
<text font-family="ATDGFU-CMR10" font-size="9.96" x="61.571927" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">(</text>
<text font-family="HJWCRM-CMMI10" font-size="9.96" x="65.444916" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">x</text>
<text font-family="ATDGFU-CMR10" font-size="9.96" x="71.13743" y="-45.564106" transform="matrix(.999739 0 0 .999739 -20.821003 74.496)">))</text>
<text font-family="HJWCRM-CMMI10" font-size="9.96" x="114.920001" y="-45.564106" transform="matrix(.999739 0 0 .999739 -.458003 74.496)">R</text>
<text font-family="KJNRKA-CMMI7" font-size="6.97" x="122.525199" y="-49.164196" transform="matrix(.999455 0 0 .999455 -.458003 74.496)">n</text>
<path d="M62.57686 26.429005H109.60103" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M107.72813 24.038095C108.1067 25.472675 108.95031 26.150075 109.80026 26.429005C108.95031 26.707935 108.1067 27.385335 107.72813 28.819915" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="VIMGMN-CMR7" font-size="6.97" x="-4.794386" y="-45.551166" transform="matrix(.999455 0 0 .999455 89.743 68.303)">¯</text>
<text font-family="KJNRKA-CMMI7" font-size="6.97" x="-6.07169" y="-45.551166" transform="matrix(.999455 0 0 .999455 89.743 68.303)">φ</text>
<path d="M132.05055 27.393145C151.90007 29.130325 133.25415 .203965 125.00044 17.901585" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M127.958856 17.214755C126.498736 16.951516 125.528277 17.429752 124.91626 18.082146C125.022705 17.193972 124.76535 16.143131 123.625236 15.193719" stroke="#000" fill="none" stroke-width=".398472" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="KJNRKA-CMMI7" font-size="6.97" x="-6.07169" y="-45.551166" transform="matrix(.999455 0 0 .999455 147.46399 58.941007)">P</text>
<text font-family="OGKSWC-CMMI5" font-size="4.98" x="-1.001738" y="-44.568366" transform="matrix(.999739 0 0 .999739 147.46399 58.941007)">σ</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-big-picture-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;3
</figcaption>
</figure>
</div>
<p>这一交换图可以继续扩展．将视角从多项式环转向矩阵代数，我们将看到，DFT 不仅是多项式环上的求值插值，更体现为矩阵代数上的相似对角化．</p>
<p>简单起见，下面只考察代数闭域的情况，并用域的常用记号 <img src="https://latex.codecogs.com/png.latex?K"> 替代 <img src="https://latex.codecogs.com/png.latex?R">．</p>
</section>
<section id="相似对角化" class="level3 fragile">
<h3 class="fragile anchored" data-anchor-id="相似对角化">相似对角化</h3>
<p>设 <img src="https://latex.codecogs.com/png.latex?C"> 是域 <img src="https://latex.codecogs.com/png.latex?K"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 阶可对角化矩阵，特征值两两不同．设其特征多项式（或最小多项式）为 <img src="https://latex.codecogs.com/png.latex?m(x)">，<img src="https://latex.codecogs.com/png.latex?%5CLambda"> 为其对角化得到的矩阵．<img src="https://latex.codecogs.com/png.latex?K%5BC%5D"> 和 <img src="https://latex.codecogs.com/png.latex?K%5B%5CLambda%5D"> 分别是矩阵 <img src="https://latex.codecogs.com/png.latex?C"> 和 <img src="https://latex.codecogs.com/png.latex?%5CLambda"> 在 <img src="https://latex.codecogs.com/png.latex?K%5E%7Bn%20%5Ctimes%20n%7D"> 上生成的代数．</p>
<div id="fig-big-picture-3" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-big-picture-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="239.31pt" height="105.375pt" viewbox="0 0 159.54 70.25">
<style type="text/css">
@font-face{font-family:DIUQDO-CMMI5;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAIsAAoAAAAAA+QAAAHjAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAqBFIEYCwYAATYCJAMIBCAFgmIHIBsvAwCeBY5rwnG1mAcT7e/9KSKo1sievX1ADpEkREcyFSNTUSgsO9LA5YFt3MPENb9txX1eQaP/XpVHJBVINHifR9FANqHhrHoHDLJZ4lBV/d9N/u/0uIBuaNM88WyTXFraSyizjWPSgbTAA8l2RtErKafO2Gezx1Yo0t1ICel2erJZP+L455yFUYFSinoTrdNX6gkAK16+bwqFgABgagokFGgGCzRD9ANkWVC8nJryE8eXAgEkkJEwE2AZAGRA6hRdqVz72GRY+cfnvc99y5kZ3vxhx63mB6fRt8Rf4t7ryo/L9913Oj59en6p/VtSnN/MvKr3LD4XAcVDkDv5VjjpqgevwMpzRem0+6z724XN+Id567bAf87k26XTr+Zi1RY1AALBK5cHjtVZ3uVFBl//VNgxU//TRDxDuQSCXbKvkkanr8CEaSINIpnJLkii0g2gQB0KkVWrw6RElS5SqtrocKVOerDIFUIvOyZZuzQp0apHSrVbJJUW2Z2/7vdavSQX8JAu1aotDs50rS3NnzOvlXurrDp9PVWpJ3KKhXMW5M0IBTlFNVUxZQoOBVGRySNxAjxILioEBweOSXDmbxUpBXkKOmpaBjBenuWFVoKoTFiLQlRdSkVdQo6CgZq+MhgcAQ==) format('woff2');}
@font-face{font-family:KJNRKA-CMR10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAALoAAoAAAAABTQAAAKdAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAVAqDKIJQCxAAATYCJAMcBCAFgmIHIBsbBAAeg+NuCaZSLKFsgjw/rf88Hujt6v/cnln17AOATGQEBiERAaj8Ofv1e2CcTkZI5gkmuUElMo7tiuxfof5f3eKdsxs/sKcw9ATPejW6abzAE8ys354f4UB7xxuPALN5tYZ5mB1RPPo0DxOkwuWwVxbR8ejh/xSb3Q9fTcMc8iDZkHU8wPQFA40AmNqpEykJUgIErdYkARFSKJ6fKg6iM4B8uSJpdeiVKk+dSKL2itrk7eSLxH+tACDAOeoLIhtzAZxhlJYE/EGhdOmCublVp0xtfzUynRa/el2YyawWL/7iRSKZSzC3pr1MxpPJlVDq9euC6VcjVduljux4OSKVah3arX6u7OFyKw5qnS1zaEqclxFnZyblxiGTE4cZE/Yu9lIQDw9nH5SbWLRbYu2lFgqar1QPD26Um7RzJHNk6L+YNrXaUKEoZF/k61LutMZwQ019HQ19Y8Jk17/NYWk34MRpr2LyRGMLFfN4fLUnH+ZODv3h8xPFIa/EOY1uZqnf7xGrVCkSBgvV0slOO+tMu53mPKFvqQMYefAyWvo3WTAO6tcbVHnyg/RsfOzDUHCxSdOVF4AGVzyr3OTKqLvV6qXMHyAg8MX2marEt/+HAKfB90Q+To2J6GwKckWWwvsKowfo6NFZwU8QhWGX6aOxTUTrUN7wTujRA0JA5KgKCIIqY6s1oBAKUVq+QjLNklGOZstXsz1WlglYSOcJKvITTSuthWYpaYZmK203jjV3H2uIr8Rqfd5g1GfR2gJRoyGETxkbNt5KvMtm1Q009w40tgvMDZvibDad2nXp16deD4GATnX89jr4eAVF+Vho2QREGRkUqNejV7NOHQSMdAwW4LI6rKzqm6AuqDE809cZ0Ky3rFE7ATMdUzEJBgAA) format('woff2');}
@font-face{font-family:ATDGFU-CMMI10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAS4AAoAAAAAB5QAAARvAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqIGIYvCwwAATYCJAMUBCAFgmgHIBvwBQAehU3ZMt4mPJLfkzd5Ezp4N/1LkFGkmmQsqbgFqhJITQTGVLCpOPJM/9yIynPzlwlSJBOxkhawYp0pV6EG7X+AdN/zf03+enaUFAnglYuiYTTund070KVZl0WKD2w0Ypq6aVHRRyUoTRw7CtuOHQGceoVsAB5Ab/TFfxisnx7yTc9DVLMBQIAPQcBPQcs51g58chOB/wMcCC/2v0yiADg0hgOBueJXCQmgUHL5ek0o1L3PXKK3RhUEiGeNEAAXIAcA8oLFuSCGwOeu8t7K6QqtVkjoiYVuaovSZEo3MVKTi9nMXrAWv7JSBhzX6UzMdRNjYUStLNaZU27grMGVH67cckSUNDgiQyiZ1qA2HLhEEVVMyekuPDI6zsQfHKPqDcr92wy4gjVs0fo+PCytaDccW7jNV08Y7BN0mEorXGViGIxlvbYh6qPYfpO7VksQer2VMtyyvnDZZmVXX/A5sgNOWVe/ge0Ms915u98lq5vBIMJ1qmCj//GMizdd1duoU6zVbdvJWFOyVnocYxjj4fukmmLZXXYsdl3qzjhLtfuFq0iqnXE3gurEAyt70htBFW6UXmcuviS1/sczVr103XbKb/UB1WFvHe5z6Z2b1YrsvOp90MRoiTv7B4raFnSLPWSO2PYu7tATF+Pli0cR9TG/g4Tv/WDsePjex2ncEKVQRfNdeVWKziLIsET2eyZL1rF4tZgzOt2QgwzUeVSmBFeziaoGOii4J5NeMhApg/HaqkPn0RVlw1G5uVFDpRq0jKMZqc0u+hg5C4JnY/HWt66vG20klvBmdAYdoBfYPXTYggvVwYax0Cte4kyN+GGDBlWj6nSB3devN7wtXBNvJ0Pfih+UaNDF6O1Fv7mn308szVkX2XzdhfvDaRvJw5IBNAc9I5Bc5BO5ZFbkQ6MRKnfSNw/dbV0iT5/2SH+UxjY0RIjs0z/ql2YhBfn3i9LlKPYsVHZFfKUkfvhppCsu9+39kUBVmyKLrwVlLWigHVyNAd8Op3/Mta0YEOGZuNxV3AmZWfXd6eeUx3KqL8cNAoeMGnQe/ZgvrLbP5EzJvKqP3vXbfXJNXYGQCvQExfRcfT/anjIsLo0ni0SSBlqAvd73wzqa87pvx6KTp528NzjYfDYgXh943evPHz3sA245d5JDBJkHe0rinIup3Q00H3uz136e5gzQLuka5dnb//raJjV4S7Bb5YLPI5wqcvNCdgUC3n2fcKveLvlXQbiu3JeKf4Tr6fD/sx41AYAAqpSDOn+B6/+aERKGoHzoB1FpBT8mUbngWuHphYwQyArNMYCdtGe5JOxYHhFnlk/Cb7MQKRoH0m0A4arIWC5SD8tDWMbykbZXhaJdfHSU/gw3mWYysrMUIfLCwtyI8Fey3ojQcF/gQ3u/lrHO4bH2Xveo0Eg8GeT69RowakSrIe4K9WtJl/WhMTJky6IQQq5QoVwRwilZ3zqsU78+7iKECteAbLNPZzZeDbRkmkyuxC3GdBoe1a6XuyihImvzHAA=) format('woff2');}
@font-face{font-family:VIMGMN-CMMI7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAO4AAoAAAAABeQAAANuAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAARAqEeIQDCwoAATYCJAMQBCAFgmIHIBuyBFFULHoAH4Vty2fiRAQIMxV4UPM2lIubEOD0igc+u3/vzOx7/ztSZVQia7sU65x0cZ20rNiC2KG8bGa3VFJKQSH5CT8PwLcD5+RF2hoo1Sc4ax3YGiRSaISzJ2YYzV+AfHC6uUtbkVo6tA0PDzzsIcVzYb8CEE/G2/95NBY3fBWF7qEM4IuAsJ1jLV6ZEQnouKWLBJ6RQECGEHlOEbMJUBcVpO/QUAOUYkABjJeQLvLnNPS8nLf9NQYBmRlfCigArgOhoP1hRBClQ/X4rmzLfjG+tnZp7cmiNpTAsA4ULe5EzmebBAp2dqAyTJe3TyKs9+5NuZ/cxnOP+XgxP006fBIYeWRiOnOYJEVFe+H2kzJjR0JdbSja0fGk2Hv49NB08cl28wHvU+NZ4uvrA33StXeavcz1jnQrdcntWdVcihTzCg6ST817V3TO7q+dbohhXW1jYxMCwVhfF0/uECUf74fiB5adnUg77sFzL8YzhAw/4JrkKLmoekeeLwmfkvMJ7SeSt/qrFd/aPE7eu/czMvyhQ7cUBH+RfO8WSg2HFnCoJcr5/7rpol+FoDbd6p8a3NRmxYfLomGaDzCP7u6mleNeBnnURB1rZCwJJmMCgYy0E1Ttsl7+k9dfYeFwnuBAvohdi85bxjQNu7Nx92ctWWQBLeXDggiDX8u4MmW4sCGisHPUVEt8WWxBiJOz2Z0ucYK24x25AgaWdlffIOaIBQenxkixg+H8dZxQGrerZYPxmPP9gEGlvHs2XtlQsy6LBzofWVg/ZIWNpNy2sy82frkzUPf1GPqv7VtuvgXDMWa+BsM+th465dpvIs3S8LHAOsaOw7LG5g/JofAMUZg8+n5xGgCd20aPdwU2s1SEFwIQAAH41xXwax670TcGagbgCf63nAt5M+rUuMfmSgjABh0dqOUtaSoIECBeFF8aEe90SYEtCMi4jdIBSbkC0AJgh0KSYcHeFwuYCYpFLGRWlxOggQpmZSARTkGkwSdGpIUqEenw6UqZaFk6Auk/nC0l7J1tnV2ULcc42+veLHrqnbqoGs/Fk8LWRKdmRMaLaXbqhgezlCheknRpwqUQ4yxRGD2SgGDPmS1nLpRZcubMni7C5tlSRUuUQIw6FWoegK2R4GUEzwSEeSGyW+owGaKlzosUT4wmFRpRIxUAAA==) format('woff2');}
@font-face{font-family:OGKSWC-CMR7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAI8AAoAAAAABBAAAAHxAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAPAqBPIEsCwgAATYCJAMMBCAFglwHIBtJA0AeA+7MiMc1pHW8+fOEhOMWxcP/3/fb59zhN8828WjTABZQYHkr4YQCDizAVtrK0t7RnN4naQcIbJFJtewm1Nw4/ykHLHd88KAF1Fbz0BLMXtJEAk8sjaytBVKkhRZYBNQ3jcMlkUictGMTSqpGJzTyDXv7F9UhIX5YcxRcQHRkYT9Pz+UZQHZhIxhQBAQAwwASBUtwgSWEA6CrQrqwAVANH0K6WArof3YK3AFQASn2J4kM6Lu5XwI1MQIGNhj08Fuq5N6Y6ODi7LF0EyOCZid2Rr0UfaVGNa6qNh9Pb2i0HOXwIj6xpjKbIxnFr3NmXq3/lI77aTuGoEJ3NZoqhTz+uSUmb54UEI9qMPbtCBFJ+d71yVUXkPjalFDA3t8lBeDXclBjEEAgeHy9uEsQsP3jjAD4DvufgNdI+YkxCYJiQD6AJ7f4EACAkkDu80wPiIBQHMJA0JMmvEAgzCJANWlWgGbSBgS6SbsQmLDBEC4qF4Qd3pGqVmSiUT069aYJx5a3s/98axTg4RMS4aLn4hdscfOWRvqG+ewds5VanlVSnpGnaKJvbMvgokCeQmVKpSmmyE+BVLybfAE8+AgRwYUeF36CWQiXpliJLAXyKTKiz7AaHpzfj5NmIDUmq/JmqnJZSnoZ8igyoc+YHHEAAAA=) format('woff2');}
@font-face{font-family:HJWCRM-LMRoman7-Regular;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAU0AAoAAAAACMgAAAToAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAdAqJXIc2CxYAATYCJAMoBCAFgw8HIBvaBgAehXEbPVBpzvp2KfTzuO3/3G3WhvH/m6CYCUYXghVY1fiycvErgoe32/t/R4dygCUJBdiyIAokqi3l1jzO638AUJfzfzm9MXlMumuzBzLWBFn0uY1ZL5yEe4jHiSWQUK5htgufnv8sb+vrikHMZg8AHj+gRVAD2Ik9+Y+GhRVF34gZeIQWAK8OBAR2g3JqrwB1xbrLwH8sgPRBTrjE/0jFAOA6Gg4xhKJH9eAIxZQqVKlVr0Gr7tiunrluq8022WD92ToqCyEQIDWYrtcFaAFAnzdE6D6MfDgpCPK7mpYB7SfUWaO1xkkgNBE3bPdV0aeFZ6+a7mcib8c/tNzKKx7xPojjyLWM/Z4NMLh/+qB4G0/xaRd2GINqi82+bUJEyRDDmGx5wvK6MqRiIjlOzvMKNg1tOxiJFMTmAzFyJF4rvCnfyzgfZgxZyYYnXvf4lvW7yb3iTaK1t32vWGxnZGcfClXrB4/YZPIsyxoYX5bjLLe98jm4U7TpmOiq5S5ewQZd4vX3HJFtMhUfjd59nl6/XX+9ieGRqH2XRJt2Ze+MtuVk5O3nsIWd4bXvkjJPdGafGN920BMpsPV7fAoGD08f3Xls5ogfUoMiYSKpKz8s0TaOY2SAQwDHAZnH+JgZ1hltYJbrJv9vVraNczz41Hv6vv1hZpB1OMLa8RGH+NLtTORpTo6TiOcRBRQyVSb6W7xmblkhqlQmUK1Fa0UVJPdcRiq01+2BVVpJsbzCOdff6uwuezfXfnPdWI8Xg/sOBuNecRHiFiW5aI5CY/0lRWEaL6O/1NHf6HhBQyfHMz4bbhm9r3GKurLz5BEtH6urePmEhjLbmbiajLK8IePSCnmW4PxCicaHsGKsZH64EmXCFEOf0bNeT1XRt/W2RL+N6c/cT0RFYcIf7mpnEZD/f353u168B0gOFCK47kKXPK+2a3cUlMpT0fG2c5FNDnvbIiBOWZVJjcM1JctRSqg2G2svOplw9ndKu7biTWdBqSIVRcPPBeF6z58/v9uvt27U5ufjbYeZYsGW9vr4eWxRe53n0bFQzTAUgF4zMaj0313hB4ajdyxasvnhHV2S2PWDzVqqVefydt9w0YdeH8CHnj+A+e6PmSGgz5hbb6Dadd/xyHkzHjf/se6X9qZh1aggEUs9z16bHoyPeESLvq1ns5aC0j7d74P0mDiIeIO/nMmDFc0NVqFqNDuIFaGSmclarAabnczJJgSxwaKPrtt9a7NEpUaTcSmqaMPnKfAgRRAPA6sgKDH0RZ4PnkEXmsSqRbTFWV3ZbrNd32zM/+THZuO4jxU8u/v63c4PWG3hEc+2Thlcw1KsBAdrjxMCjY2erf15EDQQWRUGQsuy77+XC3UDf9XECZr6OPMfUt/4/zIPuwcAmrBIZw1qwDYwZZh5w8UqABlmuQ4kKJ+LXraPBPC72myoj/dBtJKaYKsj5cN7o8pS6ocQsCaKagQRzb1BDcXMoE7E8TxJLAwOFS1A9OQ2A0GqxqBGaINBndQxkOTp3cSkb2YbfGLjFRHpSRIOSf4253qwHMZN6opqe3HwyZXtVS3tFXXmHlJ3qTskSpKuQZ1i9XzEiqcQIV0SCfkklvllKrSpVayZvL3PZi2qNKhnzo2Uax44JlCfy7JYqzLKXIkuzVKpXZUWX0UG0JwHKXcZHDcBAAAA) format('woff2');}

</style>
<g id="page1">
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="30.919929" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">K</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="40.091533" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">[</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="42.858812" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">x</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="48.551326" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">]/(</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="60.171293" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">m</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="68.91601" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">(</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="72.788999" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">x</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="78.481513" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">))</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="125.779166" y="-63.157513" transform="matrix(.999739 0 0 .999739 -6.272999 92.088)">K</text>
<text font-family="VIMGMN-CMMI7" font-size="6.97" x="134.912447" y="-66.752607" transform="matrix(.999455 0 0 .999455 -6.272999 92.088)">n</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="30.919929" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">K</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="40.091533" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">[</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="42.858812" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">C</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="50.689768" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">]</text>
<text font-family="ATDGFU-CMMI10" font-size="9.96" x="125.779166" y="-27.971698" transform="matrix(.999739 0 0 .999739 -9.787999 92.088)">K</text>
<text font-family="KJNRKA-CMR10" font-size="9.96" x="134.950772" y="-27.971698" transform="matrix(.999739 0 0 .999739 -9.787999 92.088)">[Λ]</text>
<path d="M64.10963 26.42324H114.64903" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M112.77613 24.03233C113.1547 25.46691 113.99831 26.14431 114.84826 26.42324C113.99831 26.70217 113.1547 27.37957 112.77613 28.81415" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="OGKSWC-CMR7" font-size="6.97" x=".250863" y="-27.963754" transform="matrix(.999455 0 0 .999455 87.985 50.7)">¯</text>
<text font-family="VIMGMN-CMMI7" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 87.985 50.7)">φ</text>
<path d="M31.95472 35.25376V52.38977" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-dasharray="2.78941 1.59395"></path>
<path d="M34.34563 50.516884C32.91105 50.895454 32.23365 51.739064 31.95472 52.589014C31.67579 51.739064 30.99839 50.895454 29.56381 50.516884" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="OGKSWC-CMR7" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 35.328 74.421)">?</text>
<path d="M126.83924 32.76307V52.38977" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M129.23015 50.516884C127.79557 50.895454 127.11817 51.739064 126.83924 52.589014C126.56031 51.739064 125.88291 50.895454 124.44833 50.516884" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="HJWCRM-LMRoman7-Regular" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 130.212 72.46)">diag</text>
<path d="M138.63099 27.45458C158.48052 29.19161 139.06837 .1982 130.81467 17.89582" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M133.773086 17.208979C132.312966 16.94574 131.342507 17.423976 130.73049 18.07637C130.836935 17.188196 130.57958 16.137355 129.439466 15.187943" stroke="#000" fill="none" stroke-width=".398472" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="VIMGMN-CMMI7" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 148.614 41.372)">P</text>
<text font-family="DIUQDO-CMMI5" font-size="4.98" x="4.043944" y="-26.974958" transform="matrix(.999739 0 0 .999739 148.614 41.372)">σ</text>
<path d="M47.71899 61.61876H111.13381" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M109.26092 59.22785C109.63949 60.66243 110.4831 61.33983 111.33305 61.61876C110.4831 61.89769 109.63949 62.57509 109.26092 64.00967" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="HJWCRM-LMRoman7-Regular" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 54.316 85.822)">diagonalization</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-big-picture-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;4
</figcaption>
</figure>
</div>
<p>对角化 <img src="https://latex.codecogs.com/png.latex?C"> 的矩阵也同时对角化了 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D"> 中的任意矩阵．若设这一对角化矩阵为 <img src="https://latex.codecogs.com/png.latex?F">，则 <img src="https://latex.codecogs.com/png.latex?A%20%5Cmapsto%20F%5E%7B-1%7D%20A%20F"> 便规定了一个 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D%20%5Cto%20K%5B%5CLambda%5D"> 的代数同构．<img src="https://latex.codecogs.com/png.latex?K%5En"> 与 <img src="https://latex.codecogs.com/png.latex?K%5B%5CLambda%5D"> 的代数同构是平凡的．下面来建立 <img src="https://latex.codecogs.com/png.latex?K%5Bx%5D%20/%20m(x)"> 与 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D"> 间的联系．</p>
</section>
<section id="section-1" class="level3 fragile">
<h3 class="fragile anchored" data-anchor-id="section-1"></h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-minpoly-iso" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 3</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?C"> 是域 <img src="https://latex.codecogs.com/png.latex?K"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 阶矩阵，<img src="https://latex.codecogs.com/png.latex?m(x)"> 是其最小多项式，则 <img src="https://latex.codecogs.com/png.latex?K%5Bx%5D%20/%20m(x)"> 与 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D"> 代数同构．</p>
</div>
</div>
</div>
</div>
<p>仍然考察 <img src="https://latex.codecogs.com/png.latex?K%5Bx%5D%20%5Cto%20K%5BC%5D"> 自然的“代入” <img src="https://latex.codecogs.com/png.latex?%5Cpsi%20:%20f%20%5Cmapsto%20f(C)">．<img src="https://latex.codecogs.com/png.latex?C"> 的全体零化多项式恰为 <img src="https://latex.codecogs.com/png.latex?m(x)"> 生成的 <img src="https://latex.codecogs.com/png.latex?K%5Bx%5D"> 上的理想，因此 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BKer%7D%5Cpsi%20=%20(m(x))">．<img src="https://latex.codecogs.com/png.latex?%5Cpsi"> 的满射性平凡．用第一同构定理就得到结论．</p>
<div id="fig-dft-exist" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-dft-exist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="216.78pt" height="81.78pt" viewbox="0 0 144.52 54.52">
<style type="text/css">
@font-face{font-family:ZMVXXU-CMR7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAGkAAoAAAAAA2QAAAFcAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAocNwsGAAE2AiQDCAQgBYJcByAbyAIAnge2rWi9UMNEPvaXcZCSkxCiZcvM7VFqFaZUj0eY7pB4hOkaY14ZMArbFJZVt11uy+P/Q3wQBKt0ebAkQ7VYkofXvoUPZDyhr7RFfnViVvOb7fhhoAW0qyzUxHceWGBJQInFkQeSBh4lFlGe3rDlXSJRLiWfCU2ux6uWfMuP/wlXY3zR4tGL6kInvpu7RzmRzgGNikZAAFArSDSYwAITqhWkKAKdWtmrZ9x+KG6g8BBQAFFuB2Lw58A2IBA8vNeeD5/89TQFfNb3yY6UFxw9EgSNijzV6uJXAQBkVlxxkYoAwaQ+98CwxFz0G0ZLc+iizdgnMxYsSq+wpIOLKRstHXTRy312/PGQ55dHQ9x0XY0iLvDS2SoE1SHx1+RjzkfN4DAYhdVsc7sIBzCsOOGwGMQanU4NCbECNgmHk7FaAAVSj1YuhAPpAr6y/EB6GKeHMgMOzBuGIAAA) format('woff2');}
@font-face{font-family:NALYOY-CMMI7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAJsAAoAAAAABEgAAAIgAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAqBeIFdCwYAATYCJAMIBCAFgmIHIBt0A0CehbF7ouRENGES+7P9UTx8f9/OfS37wqtwAk3CTYZxqIn3D/b33vsQBlhRdjPaQlcbkexuX3PNJLNQyqD8bwE4usnnz/9AE1eZJ/7W1CiwBw84ymzjmGIpRga90yq6kpK0GWPMvp2QSwPSDk06qLs/B9qsiK8CwyICXIS8geq5S1IBNy7fl0VOQACQAUjIoQ8t0IexBvLygtzLqP83B4T/MgnkEbgDDwDygFilUR+hZ7ofiqOrvF7R0Jlq34H88Kvg1er1VSWoX4XXy1MMPfdQuQ7p/QhdE9crNT7qdZN4vbx63SHNM9emO2m/5PWV+xYc29dH5vZwtRZn+tMwLtZxs/quePhcd5liGHr2C2pYXuKhxOHQ36tW7ltznS9f70+4WtfnfUbVYnxEDAelKCFduU72VJvOnPAn0HJ3MdqvarV4wuM+kuEsQJJqqLNDWuGUOn8igEDwFanvxNKt/ghoDMAv+J/Ej7LzlS5QlkCw0eGGE5V8QRBZ+iaC5A5pCFxVvRBarqJ5dS1aUDOjRXXH5aopA2gxiRCWvIDmjWXQgqEGWjTW76tu1o+w+6DzrI+9V7hvuLajt7e76c24pa+j16g9d3YllaQXlqRmyxnqGMRlcJQrW55iRZIVkOMtVxJ9vRw+7HkJ5yucNkfevLkzFSJZgULpcuWQo0+H3nhwjXPmxPHrQFKZoDzLSUqkKxxLlU2OIR0GwtEQCQAAAAA=) format('woff2');}
@font-face{font-family:GQUJQW-CMMI10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAS8AAoAAAAAB5QAAARwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqIGIYvCwwAATYCJAMUBCAFgmgHIBvwBQAehU3ZMt4mPJLfkzd5E/r5d9M/ucgoUk0yRipuQFUCqYnAmAo2FUee6Z8bUXlu/jJBimQiVtICVqwz5SrUoP0PkO57/q/JX8+OkiIBvHJRNIzGvbN7B7o067JI8YGNRkxTNy0q+qgEpYljR2HbsSOAVa+wDcAB6EYv/sNh/fSwb3oeopoNAAJcCAZ+ClrOsXbgkpsI/B9gwXix/2USAWDROBYMZotfxceDIHL5ek0o1L3PXKK3RhUEiGMNHwAbYAcA9oLF2SCGweeu8t7K6Qqtlk/qyYVuaovSZEo30WKTi9nMXLAWv7JSBoLQ6Uz0dRNtYUStDNaZU24QjMGVH67cckSQNDgiQyrp1qA2HLhEkVV0yekuPDI6ziQeHKPqDcr92wyEgjFs0fo+PCyuaDccW7jNV08a7BN0uErLX2WiaZxhvLZh6qP4fpO7VkuSer2VMtyyvnDZZmVWX/A5sgNOWVe/ge00vd15u98lq5vBICB0qmCj//GMizdd1duoU4zVbdvJWFOyVnwcp2nj4fsSNcUwu+xY/LrYnXYWa/fzV0modtrdCKoTD6zMSW8EVbhRfJ2++FKi9T+eseql67ZTfqsPqA576wifS+/crFZs51XvgyZaS97ZP1DUtqBbzCFzxLZ3cYeeuBgvXzyKqY/5HSR97wfjx8P3Pk5jhyj5KinXlVOl6CyCDEtkv2cykjqGqBayRqcbcrCBOo/KlOBqJlHVIA0K7smULhmIlMF4bdWhebSibDgqNzdqqFSDyliakdrsoo+xs8B7NhZvfev6utFGZAlvRjNoQLrA7qHDFoKvDjaMhV7xEmZqhA8bNEiN1Ok8u69fb3hbuCbeTobeCh+UaNBidHvRb+7p9xNLc9ZFNl93Yf9w2kb0sGQA5aAzPNFFLpkryYp8aDRC5U765qG7rUvk6dMe6Y/SmIaGCIF9+kf94iysIP9+Uboc4c9CZVeEV0rih59GuhJy394fSaTaFFl8LShrQYPUwdUY8O1w+sds24oBAZFJyF2FnZCZVd+dfk55LKf6ctwgcMioQefRj7n8avtM1pTMq/roXb/dJ9fUFfCpQE9QTM/V96PtKcPi0nhJkUDUIOXhr/f9sE7Ket23Y9HJ007eGxxsPhsQrg+87vXnjx72AbecOyVDpCQP9pTEORdTuxukXPzNXvt5KWtA6pKuUZ69/a+vbVKDtwi/Vc77PMKpIjcvZFdg4NG+5J/r7ZJ/5YXtyn2p+Ie/ng7/P+uRCQB4kFIO6vwFrv9rRkgYgvKhD6LSCn5MonLBtcLRCxshkOWbYwA7ac+yidixHALOLJeI32Y+iWgsWLcBjKsiY9kkelgO0jKWS2J7lS/axUdH6c9wk7NLFXmlTIi8sDA3IvyVrDciNNwX+NDer2Wsc3isvdc9KjQSTwa5fr0GjBrRaoi7Qv1a0mV9spVSyFOKEUKuUKFcEcIpWd86rFO/Pu4ihArXgGyzT2c2Xg20ZJpMrsQtxnQaHtWul7sooSJr8ywAAAAA) format('woff2');}
@font-face{font-family:XTZWFF-CMR10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAJ0AAoAAAAABLQAAAIpAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqCNIIACw4AATYCJAMWBCAFgmIHIBu9AwCOwrblE8Nl4hCnieDwYSKC7/f77blPPu7Rulr2LBoayRNDglBopASNSCZTOndozd1jppMQ1RyiiZRCpE0bUi2R4P9u8he5A5rqJ3i2SqPA8jDBzNo2NoYl2As0zXqZu06WUtJyufFdHiYo4i2WVKT39PLfZ3H68Tk4yGgG1eDgUa5vvDpQYJqkkFEIXWvOIKFAn+3rk2cR0KJJksyYJCLJGdP8dv7NiXydrwT1iBq0ocIe4BYAJSBw9aGmiqami/hMiptK9abSvHR6tq8ukeAkspzmdVUywU4kZqIxneZOpbgjG42bs0lOMmnyb/VdtGy0hnYHz5vXFSXNrVrq1rOilmhttMTRb8uAUgGTDvFar8vA1uhRPxum1KgbSj9P5Lg/L+FHQaeq114wmCm21Jf9HCsI//H8wfwhkat7oeb+cxrBV6b+47m6u7saOiDVyjzndUb1oAInGWcMAwCBYGf37lBWufrbVJTgj/Pfwr4hSwpokkBQyEgMaoxvEBevEuLNdX/FUmIxxkBAIwi1IRAIJWzxpIBOxUmpTSeptBoltTaT7S1GIOSKslmYQAYpDTGSyoBpUhuyFbWY9ZQNqM++avlsIQ+LHUdRmHBYkp2CT8C2Ei+nWWqvweXVWbqQEwg/G6DYWNh5uGk4daGwUfO/Z8XHJsSDhTUOhYIJDoZLw8nFwMaqC9wEWATgtDVKK24CdaAUWIlqXgauMh2LLkgTEE0yFwAAAA==) format('woff2');}

</style>
<g id="page1">
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="33.037376" y="-78.884408" transform="matrix(.999739 0 0 .999739 -10.462002 92.09)">K</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="42.208982" y="-78.884408" transform="matrix(.999739 0 0 .999739 -10.462002 92.09)">[</text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="44.975259" y="-78.884408" transform="matrix(.999739 0 0 .999739 -10.462002 92.09)">x</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="50.667773" y="-78.884408" transform="matrix(.999739 0 0 .999739 -10.462002 92.09)">]</text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="129.183277" y="-78.884408" transform="matrix(.999739 0 0 .999739 -11.532002 92.09)">K</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="138.354873" y="-78.884408" transform="matrix(.999739 0 0 .999739 -11.532002 92.09)">[</text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="141.121151" y="-78.884408" transform="matrix(.999739 0 0 .999739 -11.532002 92.09)">C</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="148.952117" y="-78.884408" transform="matrix(.999739 0 0 .999739 -11.532002 92.09)">]</text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="33.037376" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">K</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="42.208982" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">[</text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="44.975259" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">x</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="50.667773" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">]/<tspan x="60.060057">(</tspan></text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="63.948307" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">m</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="72.693024" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">(</text>
<text font-family="GQUJQW-CMMI10" font-size="9.96" x="76.567013" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">x</text>
<text font-family="XTZWFF-CMR10" font-size="9.96" x="82.258527" y="-43.698593" transform="matrix(.999739 0 0 .999739 -28.753003 92.09)">))</text>
<path d="M47.48007 10.69424H112.7947" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M110.92183 8.303331C111.3004 9.737911 112.14401 10.415311 112.99396 10.694241C112.14401 10.973171 111.3004 11.650571 110.92183 13.085151" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="NALYOY-CMMI7" font-size="6.97" x=".260858" y="-43.686183" transform="matrix(.999455 0 0 .999455 77.315 50.702)">ψ</text>
<path d="M32.78541 19.52476V36.66077" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M35.17632 34.78788C33.74174 35.16645 33.06434 36.01006 32.78541 36.86001C32.50648 36.01006 31.82908 35.16645 30.3945 34.78788" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M56.90571 37.05924L112.819 16.59246" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-dasharray="2.78941 1.59395"></path>
<path d="M110.238473 14.991052C111.08706 16.208058 112.112079 16.554198 113.00609 16.52398C112.303827 17.078051 111.744479 18.004123 111.882081 19.481373" stroke="#000" fill="none" stroke-width=".398468" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="ZMVXXU-CMR7" font-size="6.97" x="1.892968" y="-45.526179" transform="matrix(.999455 0 0 .999455 76.92 66.765)">¯</text>
<text font-family="NALYOY-CMMI7" font-size="6.97" x=".260858" y="-43.686183" transform="matrix(.999455 0 0 .999455 76.92 66.765)">ψ</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dft-exist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;5: 命题&nbsp;3 证明示意图
</figcaption>
</figure>
</div>
</section>
<section id="友矩阵" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="友矩阵">友矩阵</h3>
<p>为显式刻画上述对角化过程，我们选取一类特殊的矩阵<sup>2</sup>作为 <img src="https://latex.codecogs.com/png.latex?C"> 进行研究： <img src="https://latex.codecogs.com/png.latex?%0AC%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20&amp;%200%20&amp;%5Cldots%20&amp;%200%5C%5C%0A0%20&amp;%200%20&amp;%201%20&amp;%5Cldots%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%200%20&amp;%5Cldots%20&amp;%200%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;1%5C%5C%0A-c_0%20&amp;%20-c_1%20&amp;%20-c_2%20&amp;%20%5Cldots%20&amp;%20-c_%7Bn-1%7D%0A%5Cend%7Bpmatrix%7D%0A"> <img src="https://latex.codecogs.com/png.latex?C"> 被称为首一多项式 <img src="https://latex.codecogs.com/png.latex?m(x)%20=%20c%5En%20+%20a_%7Bn-1%7D%20c%5E%7Bn-1%7D%20+%20%5Cdots%20+%20c_0"> 的<em>友矩阵</em>（companion matrix）．</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;这类矩阵在高阶常系数线性 ODE 和常系数齐次线性递推中也有重要应用．</p></div></div><ul>
<li><p>直接计算，<img src="https://latex.codecogs.com/png.latex?C"> 的特征多项式恰为 <img src="https://latex.codecogs.com/png.latex?m(x)">．</p></li>
<li><p>直接验证，<img src="https://latex.codecogs.com/png.latex?(1,%5Clambda,%5Cdots,%5Clambda%5E%7Bn-1%7D)%5E%5Cmathrm%7BT%7D"> 是其特征值 <img src="https://latex.codecogs.com/png.latex?%5Clambda"> 的一个特征向量．</p></li>
</ul>
</section>
<section id="友矩阵的最小多项式" class="level3">
<h3 class="anchored" data-anchor-id="友矩阵的最小多项式">友矩阵的最小多项式</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-companion-minimal-polynomial" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 4</strong></span> <img src="https://latex.codecogs.com/png.latex?C"> 的最小多项式也恰为 <img src="https://latex.codecogs.com/png.latex?m(x)">．等价地，友矩阵的特征多项式与最小多项式相同．</p>
</div>
</div>
</div>
</div>
<p>等价地，我们研究 <img src="https://latex.codecogs.com/png.latex?C%5E%5Cmathrm%7BT%7D"> 的最小多项式．注意到如下事实： <img src="https://latex.codecogs.com/png.latex?%0AC%5E%5Cmathrm%7BT%7D%5Cboldsymbol%20e_i%20=%20%5Cbegin%7Bcases%7D%0A%5Cboldsymbol%20e_%7Bi+1%7D%20&amp;%20i=0,1,%5Cdots,n-2%20%5C%5C%0A-%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20c_k%20%5Cboldsymbol%20e_k%20&amp;%20i=n-1%0A%5Cend%7Bcases%7D%0A"> 考察任意不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的 <img src="https://latex.codecogs.com/png.latex?C%5E%5Cmathrm%7BT%7D"> 的零化多项式 <img src="https://latex.codecogs.com/png.latex?f(x)%20:=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20x%5Ek">，有 <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%200%20=%20f(C%5E%5Cmathrm%7BT%7D)%20%5Cboldsymbol%20e_0%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20(C%5E%5Cmathrm%7BT%7D)%5Ek%20%5Cboldsymbol%20e_0%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20%5Cboldsymbol%20e_k%0A"> 因此 <img src="https://latex.codecogs.com/png.latex?a_k%20=%200"> 对所有 <img src="https://latex.codecogs.com/png.latex?k"> 成立，即 <img src="https://latex.codecogs.com/png.latex?f%20=%200">．这说明 <img src="https://latex.codecogs.com/png.latex?C%5E%5Cmathrm%7BT%7D"> 的（非零）零化多项式次数至少为 <img src="https://latex.codecogs.com/png.latex?n">．再用零化多项式和最小多项式的整除关系就得到结论．</p>
</section>
<section id="section-2" class="level3">
<h3 class="anchored" data-anchor-id="section-2"></h3>
<p>上述命题的逆命题在相似意义下成立．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-coincide-similar" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 5</strong></span> 若矩阵的特征多项式与最小多项式相同，则它与其特征多项式对应的友矩阵相似．</p>
</div>
</div>
</div>
</div>
<p>可在 Jordan 标准型下理解．此时每个特征值对应的 Jordan 块有且只有一个．</p>
<p>当友矩阵 <img src="https://latex.codecogs.com/png.latex?C"> 可对角化时，其最小多项式可分解为不同一次因式的乘积．又其最小多项式与特征多项式相同，故其必有 <img src="https://latex.codecogs.com/png.latex?n"> 个两两不同的特征值 <img src="https://latex.codecogs.com/png.latex?%5Clambda_0,%5Clambda_1,%5Cdots,%5Clambda_%7Bn-1%7D">．结合上述命题可以看到，我们特殊地取 <img src="https://latex.codecogs.com/png.latex?C"> 为友矩阵做研究是不失一般性的．</p>
</section>
<section id="友矩阵对角化的显式表达" class="level3">
<h3 class="anchored" data-anchor-id="友矩阵对角化的显式表达">友矩阵对角化的显式表达</h3>
<p>前面已经得到友矩阵特征向量的形式，因此 Vandermonde 矩阵 <img src="https://latex.codecogs.com/png.latex?%0AF%20=%20%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A%5Clambda_0%20&amp;%20%5Clambda_1%20&amp;%20%5Cdots%20&amp;%20%5Clambda_%7Bn-1%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%5Clambda_0%5E%7Bn-1%7D%20&amp;%20%5Clambda_1%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Clambda_%7Bn-1%7D%5E%7Bn-1%7D%0A%5Cend%7Bpmatrix%7D%0A"> 正是将 <img src="https://latex.codecogs.com/png.latex?C"> 对角化的矩阵． <img src="https://latex.codecogs.com/png.latex?%0AF%5E%7B-1%7D%20C%20F%20=%20%5CLambda%20=%20%5Coperatorname%7Bdiag%7D(%5Clambda_0,%5Clambda_1,%5Cdots,%5Clambda_%7Bn-1%7D)%0A"> 注意到 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D"> 也被对角化 <img src="https://latex.codecogs.com/png.latex?C"> 的矩阵同时对角化，故 <img src="https://latex.codecogs.com/png.latex?A%20%5Cmapsto%20F%5E%7B-1%7D%20A%20F"> 确为 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D%20%5Cto%20K%5B%5CLambda%5D"> 的代数同构，与先前的关于对角化的讨论结果一致．</p>
</section>
<section id="循环矩阵的对角化" class="level3">
<h3 class="anchored" data-anchor-id="循环矩阵的对角化">循环矩阵的对角化</h3>
<p>特别地，若取 <img src="https://latex.codecogs.com/png.latex?%0AC%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20&amp;%200%20&amp;%5Cldots%20&amp;%200%5C%5C%0A0%20&amp;%200%20&amp;%201%20&amp;%5Cldots%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%200%20&amp;%5Cldots%20&amp;%200%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;1%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%20%5Cldots%20&amp;%200%0A%5Cend%7Bpmatrix%7D%0A"> 它是基本循环矩阵，对应最小多项式 <img src="https://latex.codecogs.com/png.latex?m(x)%20=%20x%5En%20-%201">．<img src="https://latex.codecogs.com/png.latex?C"> 生成的代数 <img src="https://latex.codecogs.com/png.latex?K%5BC%5D"> 即 <img src="https://latex.codecogs.com/png.latex?K%5E%7Bn%20%5Ctimes%20n%7D"> 上的全体循环矩阵．此时 DFT 体现为利用 DFT 矩阵 <img src="https://latex.codecogs.com/png.latex?%0AF%20=%20%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A1%20&amp;%20%5Comega_n%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A1%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B(n-1)(n-1)%7D%0A%5Cend%7Bpmatrix%7D%0A"> 对循环矩阵进行对角化的过程．</p>
</section>
<section id="结语" class="level3 fragile">
<h3 class="fragile anchored" data-anchor-id="结语">结语</h3>
<p>以刻画 DFT 的卷积性质为目标，以代数同构为构造手段，我们为理解 DFT 的代数含义提供了两个视角：</p>
<ul>
<li>DFT 是多项式商环上的多点求值插值</li>
<li>DFT 是矩阵代数上的相似对角化</li>
</ul>
<p>可见 DFT 背后的代数理论非常丰富，不失为联系起本科阶段代数课程的有趣实例，亦体现出代数工具与视角在工程实践中的强大效用．</p>
<div id="fig-big-picture-final" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-big-picture-final-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="239.31pt" height="105.375pt" viewbox="0 0 159.54 70.25">
<style type="text/css">
@font-face{font-family:QBUHKU-CMMI5;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAIoAAoAAAAAA+QAAAHcAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAqBFIEYCwYAATYCJAMIBCAFgmIHIBsvAwAehXGzc1zLKgXKgj8RTcRD/0f7O9OyrbRrnknCnVDCRL/IJ3g/P87e39+O9ua/iwOcDqHAkc0ZTkxTqMe4JiLZ3X4TyjTBBDPLtP+7yf+dHhfQDW2aJ55tkktLewlltnFMOpAWeCDZzih6JeXUGfts9tgKlRzGOhr58jM8tRYx+nMO2isWKHXUD4DW69oVENUv70MBKgICgBIBSFQwhQWmqI5AVVVQ+ZHiJwaHIAAJqkjcgScAVUCuVEvcOQ9vu0J5n4/vXzytzyTu/XL3M06k6Fv5fnT0F+cZuS04yPV6nzRL4cFWLkz/J5ABBSJgPBQWhTvKmLKyxyy44TE2qua14ZglxF1j7pZpOo70y6gvmoevDDxObwKAQPAN6xeC5IFAE1MB/kkw3o4pAUoIXQNNCYJdsm9Qm0oIAhNmIo2Q7uyCJNrekMAAhajqGmBS07EhdV2n4ba1NlhMLIS9BUyqltSkZm6V1C3tJ20PV+ev+71WL3uMzMyTxnE6fbbzWltqbWpp5d4qq6R2lcWu0JW0N7XlzTDOQMfIxkrGrASdgVRk9NjGEDPmEY3G0dHN6sSf+ZuFioFeiVZNWhgw7elZnmglkMqIuZSQslOxsFPQKdGuSVtlGBwBAAAA) format('woff2');}
@font-face{font-family:GQNCAI-CMR10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAALkAAoAAAAABTQAAAKYAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAVAqDKIJQCxAAATYCJAMcBCAFgmIHIBsbBAAeg+NuCVorQ5liwHh+Wv95BPVjr3svwOzZJcJGAzpAD6gSYeLQmLD7Qqetq7GdvuP903uBav3U2AxMAlcI4Vas8NQW6v/VLd45u/EDewpDT/CsV6Obxgs8wcz67fkRDrR3vPEIMJtXa5iH2RHFo0/zMEFRvEaLEtJ9uvwvqrn78dI0jIIKKYWc8wBbx/kJQDJe1F8EGUUCQqs1Z5BQhOb8VDOCeaBauaTYBD0hwor6c4yvqM0/GWezfymAAC5TX4tSHADPjIolgT8o2iX5KeWDUZV1LH8WS4nFDmCz60VFGQw/BtdPqjOGyfBlMOqQBJvtX8Xy1+yS6K5n+jGZKYU9ylPSXTIl/WqTUp1RNGqVytKqVQotqsoqYzusd9YB/Ct90WRBJjywR6xy1QT8J+uU0fGXTER3N0/34m9la3SUfrh6gMwsLyx0jaj46kfHxYrzbC9HOvy5iUIbFB7zoARqWWOLGO/1UpTTf1w9eL+7uAopIWrLOY3wzRF7PhSi04WQp1ANxfnW7UTMUgyMZfoWDSguXJSEfKxhZTgXRxwWeaIySev9440XiajCcnCe8qOYwXrAQZRWDc83EAg6l495IgRMfylFxeCv339VaszSSxGgXLIU3leYCiRIpEnhJ0hh3NkajXMJzIYsFO1EIh2jQygzCIFQZaUTDahDERWrVifTElW6aKlqo+2VOhnCi+IKoZcr0WLtkmmJVtW0VLueuNKklVhDfCVW6+DlbmPlpGPj5m2gH8KnDHT1txLvslmx+Uk5+QlpmJGuIc4GGxnSZMqTK042jJsMsfz20jnw4s6GFSc6bLjxZkCfvzjZciTJkA5jQJe+BThY6VZW1E0QG0Qrmulj5UuSU5YgDcaILsNiEg8AAAA=) format('woff2');}
@font-face{font-family:HLKJCY-CMMI10;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAS8AAoAAAAAB5QAAARwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqIGIYvCwwAATYCJAMUBCAFgmgHIBvwBQAehU3ZMt4mPJLfkzd5E/r5d9M/ucjQapIxUnEDqpKSmgiMqWBTceSZ/rkRlefmLxOkSCZiJS1gxTpTrkIN2v8A6b7n/5r89ewoKRLAKxdFw2jcO7t3oEuzLosUH9hoxDR106Kij0pQmjh2FLYdOwJY9QrbAByAbvTiPxzWTw/7puchsvEBEOBCMPBT0HKOtQOXwkTg/wALxov9L5MIAIvGsWAwW9wqAR4EUcjTa0Kh7n3mEr01qiBAHGsEANgAOwCwFyzOBjEMPneV9VZOV2i1AlJPLnRVW5QmU5qJlpiczWbmgrXolZUyEIROZ6Kvm2gLI2plsM6cfINgDK78cOWWI8KkwREZUkm3BrXhwCWKrKJLTnfhkdFxJvHgGFVvUO7fZiDKGcMWrc/Dw5KKdsOxhdt89KTBPkGHq7SCVSaaxhnGcxumPorvN7lptSSp11spwy3rC+dtVmb1Be8jO+CUdfUb2E7T2522+16yuhoMQkKnCjL6HU+/eNNFvY06xVhdt52MMSVpJcdxmjYevi9VUwyzy47Fr0vcaCeJdr9glZRqp92MoDrxwMqc9EZQhRkl1+mLL6Vav+Ppq166bDvlu/qA6rCXjvC+9M7VasV2XvU6aKK15J39A0VuC7zFHDKHb3sXe+iJs/HyxaOY+pjvQdLnfhB+PGzv41R2sFKgknFdOFXlnYWQbon89wxGWscQ1SLW6HRDNjZQ516ZHFTNJKgaZIFBPRmyJQMRchivrTo0j1aUDkfm5EQOlWhQKUszUptV+DF2FnjPxqKtb11eN/LFlrBmNIMGZAtsH9pvIQTqIMNYyBVPUYZG9LBBg9RIncaz/fr1hrcFa+Js5eit6EGxBi1Gtxf95pZ2P6Eke11E83Vn9g+n+eKHxQMoG53hiS9yyRxpZsRDoxEqd+I3D91snCNOn3ZPe5TKNDSEC+3SPuqXZGL5efcL0xQIfxYivyK6Uhw3/DTChVD49P5IItWmiKJrgZkLGmT2Lkb/b4fTPmbbVAwIiQxC4SLqhIys+u70c8p9OdWX7QoBQ04NOo1+zBVU22WwpuSe1Ufv+u4+uaYuX0AFeED59Fh9P8qOMiwuiZMWCsUNMh7+et8P62Ss1307Fp087ei1wZ7/2YBofcB1zz9/dLfzv+XUKR0ipbmwpzjWqYja3SDj4m/22s3LWAMy5zSN8uztf31sEhu8xPitMt7n4Y4VObkhuwIDj77MGa63TfqVF7Yr92X5P8L1dPj/WY9MAMCDlHJQ5y9w+V8zQsIQlA99EJlW8GUSlQMuFY5e2AiBrMAcA9hKe5ZNzJblEHJiucR8NwtIRWHBOh8wLgqNZZPqYTlIy1guqe1VgSgXHx2lP8NNzs7Py1VUBisKCnLCw17JesNDwnyBD+39WsY6h8fae90iQyLwZFDo12vAqBGthrgp0K8lXdYnW748uRQqBVMoUCBHuDBK1rcO69Svj5twIcI0IMvs05mNVwMtmSaTK3GLMZ2GR7Xr5SZSiIjaPAsAAAAA) format('woff2');}
@font-face{font-family:UCLFHC-CMMI7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAR0AAoAAAAABugAAAQoAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAATAqGcIU2CwwAATYCJAMUBCAFgmIHIBtxBVGUC04L8FHYtm2KKIMjMByBzRkGx3QGIdRhi+0VPJDd25uZ3Y3NKj65A1tBnSp1idszu4+JvDLJkcnCPFoll7MpwfQH6Nf5vxk3prWBpoac4Jr6A2qD9xLKbFPdFjrR4wOlE6Azd2nKa9lsueGj8PAESj4VuwEd5FHojsWTXTUT31iDStiBaIC0BQpG1gw2AfS0qhcKK6MQliDkVis5lATAk0NBjEbukT22SCStdKpn6kWE63/CesdqMUWYChEoWieyX5xR+IAYBwAwLZcI+UmJzq0K5+amS+XjLVaOZtu0BSnMz7chyIwdvnKNVEWy2xCu7/0t2+CAuScFjzst4Y87S4v9FvLOYf5nn9r7bt1fVESjucCZo9zN5wMPWxDEZsMSjp3D5hi3sJpjT7pQefh+PIoCKGfxo4xjfvABp9jBPx2/6G7wFhxpXREWceyg9vLseRSfn++wbN68lViTjzrsaRut6Ok8OLNQYbfDVn4i/HGo53p4w5MuVdGmon2yRz1XlkRu5xeFGqwH17xz5mH1087TjzeUYz3nZFjEyb2Ijeg6x7OfYKCPfWcLZ2e5nQ4uYkNYRVfruTe7bVjPPtIMe9H91P2+PX8uMzKX6FzS4jtBh8mPZ+G5riq73Q8+AJebTd+zjTFqfrPetda5jYpycToKCfl3f8XB8nkkjee6X8owt3DjVVMLuLYfiIHa2qLmbyk2jrutyE6AN3eDqzqJVT56Tkry8Asz49HCvef2FAbDn0MnQ27Eta7YkBPoURqwdTgWrIirry40/jxQIIFqg0yw8OT53SGMA/S95JCQlTmeKy56SGZiN3o7Cp+89iqDY4NDlBtnUk177i8l94dlxS3L2B8FEOfts3PsyGjwEndoZYq1FqltSWTxp7c/f/gzx1YtyEv8L/ji4VuTnO/n65P0g5dYcH8w1/12bSaQAC1pyR/eXJ0wCnlWAVNu7cWfG2PApriW7CwgsUxKqQXEO7c4mt2ri6q3KpK82H5zn87dNTVmB9/De/gkOfZkTvoU/ZdoP44xk+P9kr6l+9nglHuzf3Asu1yqn0vUZtpjiYvbmRxb5xVHNcksf8rGdjKyzLXKV4xMBlx0ifscN+fYAYAABDzKLTFVuRT+t1UaAG8LTH62xhquuqHnLbZIIu29VeikWlchBnYDJBflJ1LkDHIlqEF72CSkrSMNqNaejYCI1AXXajji4ss6DgTIBo5EX7bHn3QUQrNDEEyjL2v4sljW8WarbODL4c6eTG6f4KwP2nYL4tITk+MkFU0ZKbqL0ShNKu/qvXZPjaxv6Rts6qBnSJX6ZaCCLjroZoB+GuiFThNd1PugkwLMa+kkkkwcEirIIIMUdHSnb+ujhS46oZNGMqkRUE3YGRXWzATVgyFGLP0Ig7TQt9ZEB3QySCa9mFQAAAAA) format('woff2');}
@font-face{font-family:OXQKRV-CMR7;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAGkAAoAAAAAA2QAAAFdAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAANAocNwsGAAE2AiQDCAQgBYJcByAbyAIAngV2y0fYFl8ymsPH0sOU+Yoguved3XcptYOU6vEAVQvGA9Y4Ip8oQtFGsVcsb+y1fHv/IX6w2USqzQQlabKiJIfXvoUPZDyBr9RFfnVhXpvt+GGgBbSrLNTEdx5YYElAicWRB5IGHiUWUZ7esOVdIlEuJZ8JVe7Euz7yIz/bWVdjfNOiMYTqRye+h6dHOZHeAZUOlYAAoOtAosIsEpgVbHKKItDrOva6a24/FDdQeAgogCiPozH2e+oAEAhe6qdPXP4PVgV81XpEdqS84RiUIKh0yCu9If54AEBmxRUXqQgQTBr2DExIzMWICfTRMvppLw7LjBmJMiSsy+Bi3kIfbfTTy8MO/fGQ55dH+VDGVYcsrfDS2UYwqkPir5mPOR81g0Igzqxmm9tFOIBixQmHRW5QilU6iElVsEY4nIzVAkTA9UjlQjiQLuArww9MD+P0UGZAgXhDEAQA) format('woff2');}
@font-face{font-family:CVAPGU-LMRoman7-Regular;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAUwAAoAAAAACMgAAATmAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAdAqJXIc2CxYAATYCJAMoBCAFgw8HIBvaBgAehXEsbKBSYL1dCv08nv6fm2RKOvz/snbryHawigmdxNdHOfgCeHi7vf93dCgBliQUYMuCKJC222qLoXmc1/8AoC7n/3J6Y/KYdNdmD2SsCbLocxuzXjgJ9xCPE0sgoVzDbBc+Pf9Z3tbXFYOYzR4APH5AS6ABsAt78h9tcUXRN2IGXqEDwGsCAYHdoJo7KkFTiZ4y+B8LIH2QCy7xP1IxALiOhkMMofhRAzhCCZVK1eo0aNSmJ7arZ67barNNNlh/to7aYggESA2m6/UBWgHQ5w0Rug8jH04KgvyuTseIDhDqrdJZ5SIQmokbt/ur6dPCs1fN9zPRtxMfWm/llY94P8Rx5FrGcc8GGNo/c1C8jaf4jAs7TEG9xW7fNiGiZIhhzLY8YXl9GVIz0Ryn4Hklm4G2HYxGSmLzgTgFEq8V3lTsZVwPM8asZMMTn3t86/rd5F7xJtHa2/5XrLYzsrMPher1Q0fs5DzLskbGl+U4622v/A7uFG06JrpqvYtXsiGXeMM9R2SbzMVHY3efp9dvN1xvZnwkZt8l0aZdOTtj7TkZefs5bGFned27pMwbndknxrcd9EZKbP0ev8KhwzNHdx6bPeKHNKBomEjqKw5LtI3jGBngEMBxgPwYHzfLOqONzHLd5P/NyrZxzgef+s7cdzzMDLFOR1gHPuoQX7adiT7NKXAS8TyigEKm2sxwi8/sLRtElckE6rVoraiS5J7LSKXuuj2whlZRLK90zQu0ObvL0cN9wFI/3uvF0L6DobhPQpS4VUUuWaLw+EBJcYTWy9gv9Qw3Ol/Q0sv1TsyBWybva52iruw8eUTHz+YqXjGppcpxJa6momxfyLp1wp4lub5QoYlhrAQrXRipQnKYZugzBrbrqWr6tsGW2Lcxw9n7yag4QvjDXd1sAgr+z+9uN0j0AsmJwgTX3ejS5zUOHc6CMkU6Ot5+LrrZaW97FCQorzKpaaS2ZCVGBTXm4h1FJ5PO/k7p1lW+6SooU6ajWPi5MNLg+fPndwcM1o3Z/Xy8/TBTItjSPh8/jy3uqPc+Oh6uHYGC0GtmRlWBuysDwHjyjUfLdj+8o08Su36wa1Sb3uXt/pGiD30+gA+9fwDLIxAzQ0CfsbTdQHXov+OR8xc8Yf5j/S8dzSNqUGEyln6evXY9mBjxiA5928BuLQVlQ2bAB5lxCRD1Bn85swcrnh+qRjVobggrRqWzU3VYLTY3lZtDCOJDRR9dd/jWbplKjyUT0tSxxs/T4EGaIBEGN0FIcviLfD88iy4yi9eIak+wubLdbruhxXjgyY8tJnA/G3h29/W7XR+wusIj3u1dMriGpdkIDtYdJwRaG73bBvIhZCSyKwyEllm195OL9IN/1cYJmvpY/g+lb/x/WD52DwC0YZHOGtSA7WDOOPOHi1UAMixyPUhQPje97BhJEHC12VA/74NoJbXBXkcqgPdGlaU0ACFgbRTVCCLae4MGioVBk4jzeZJYBBwqOoAYyGsGglStQYPQBoMmqWMgydu7ySnfzDb4RSki0uPkEg5J/jbnerAcxkPqjmp7cfDJVR3VrR2V9ZZeUk+pJyRLkalRvRIN/ERRiJAujpyEfBLL/HKV2tUp0ULR3meLVtUaNbDkQco9DxwXaMhlWaJNOVWuVLdmqdKhWquvMgNoyYuUpwyOmwA=) format('woff2');}

</style>
<g id="page1">
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="30.919929" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">K</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="40.091533" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">[</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="42.858812" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">x</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="48.551326" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">]/(</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="60.171293" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">m</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="68.91601" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">(</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="72.788999" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">x</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="78.481513" y="-63.157513" transform="matrix(.999739 0 0 .999739 -26.636 92.088)">))</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="125.779166" y="-63.157513" transform="matrix(.999739 0 0 .999739 -6.272999 92.088)">K</text>
<text font-family="UCLFHC-CMMI7" font-size="6.97" x="134.912447" y="-66.752607" transform="matrix(.999455 0 0 .999455 -6.272999 92.088)">n</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="30.919929" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">K</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="40.091533" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">[</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="42.858812" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">C</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="50.689768" y="-27.971698" transform="matrix(.999739 0 0 .999739 -10.244999 92.088)">]</text>
<text font-family="HLKJCY-CMMI10" font-size="9.96" x="125.779166" y="-27.971698" transform="matrix(.999739 0 0 .999739 -9.787999 92.088)">K</text>
<text font-family="GQNCAI-CMR10" font-size="9.96" x="134.950772" y="-27.971698" transform="matrix(.999739 0 0 .999739 -9.787999 92.088)">[Λ]</text>
<path d="M64.10963 26.42324H114.64903" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M112.77613 24.03233C113.1547 25.46691 113.99831 26.14431 114.84826 26.42324C113.99831 26.70217 113.1547 27.37957 112.77613 28.81415" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="OXQKRV-CMR7" font-size="6.97" x=".250863" y="-27.963754" transform="matrix(.999455 0 0 .999455 87.985 50.7)">¯</text>
<text font-family="UCLFHC-CMMI7" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 87.985 50.7)">φ</text>
<path d="M31.95472 35.25376V52.38977" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M34.34563 50.516884C32.91105 50.895454 32.23365 51.739064 31.95472 52.589014C31.67579 51.739064 30.99839 50.895454 29.56381 50.516884" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="OXQKRV-CMR7" font-size="6.97" x=".60567" y="-29.802752" transform="matrix(.999455 0 0 .999455 35.328 74.244)">¯</text>
<text font-family="UCLFHC-CMMI7" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 35.328 74.244)">ψ</text>
<path d="M126.83924 32.76307V52.38977" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M129.23015 50.516884C127.79557 50.895454 127.11817 51.739064 126.83924 52.589014C126.56031 51.739064 125.88291 50.895454 124.44833 50.516884" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="CVAPGU-LMRoman7-Regular" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 130.212 72.46)">diag</text>
<path d="M138.63099 27.45458C158.48052 29.19161 139.06837 .1982 130.81467 17.89582" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M133.773086 17.208979C132.312966 16.94574 131.342507 17.423976 130.73049 18.07637C130.836935 17.188196 130.57958 16.137355 129.439466 15.187943" stroke="#000" fill="none" stroke-width=".398472" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="UCLFHC-CMMI7" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 148.614 41.372)">P</text>
<text font-family="QBUHKU-CMMI5" font-size="4.98" x="4.043944" y="-26.974958" transform="matrix(.999739 0 0 .999739 148.614 41.372)">σ</text>
<path d="M47.71899 61.61876H111.13381" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M109.26092 59.22785C109.63949 60.66243 110.4831 61.33983 111.33305 61.61876C110.4831 61.89769 109.63949 62.57509 109.26092 64.00967" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<text font-family="CVAPGU-LMRoman7-Regular" font-size="6.97" x="-1.02644" y="-27.963754" transform="matrix(.999455 0 0 .999455 54.316 85.822)">diagonalization</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-big-picture-final-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
图&nbsp;6
</figcaption>
</figure>
</div>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-agarwal_number_1975" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">R. C. Agarwal 和 C. S. Burrus, <span>《Number theoretic transforms to implement fast digital convolution》</span>, <em>Proceedings of the IEEE</em>, 卷 63, 期 4, 页 550–560, 4月 1975, doi: <a href="https://doi.org/10.1109/PROC.1975.9791">10.1109/PROC.1975.9791</a>.</div>
</div>
<div id="ref-nicholson_algebraic_1971" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">P. J. Nicholson, <span>《Algebraic theory of finite fourier transforms》</span>, <em>Journal of Computer and System Sciences</em>, 卷 5, 期 5, 页 524–547, 10月 1971, doi: <a href="https://doi.org/10.1016/S0022-0000(71)80014-4">10.1016/S0022-0000(71)80014-4</a>.</div>
</div>
<div id="ref-furer_faster_2009" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">M. Fürer, <span>《Faster <span>Integer</span> <span>Multiplication</span>》</span>, <em>SIAM Journal on Computing</em>, 卷 39, 期 3, 页 979–1005, 1月 2009, doi: <a href="https://doi.org/10.1137/070711761">10.1137/070711761</a>.</div>
</div>
<div id="ref-amiot_music_2016" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">E. Amiot, <em>Music <span>Through</span> <span>Fourier</span> <span>Space</span></em>. 收入 Computational <span>Music</span> <span>Science</span>. Cham: Springer International Publishing, 2016. doi: <a href="https://doi.org/10.1007/978-3-319-45581-5">10.1007/978-3-319-45581-5</a>.</div>
</div>
<div id="ref-baraquin_uniqueness_2023" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">I. Baraquin 和 N. Ratier, <span>《Uniqueness of the discrete <span>Fourier</span> transform》</span>, <em>Signal Processing</em>, 卷 209, 页 109041, 8月 2023, doi: <a href="https://doi.org/10.1016/j.sigpro.2023.109041">10.1016/j.sigpro.2023.109041</a>.</div>
</div>
</div></section></div> ]]></description>
  <category>math</category>
  <category>algebra</category>
  <category>lecture notes</category>
  <category>slides</category>
  <guid>https://blog.sun123zxy.top/posts/20240513-isodft/</guid>
  <pubDate>Mon, 13 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>矩阵代数的 Burnside 定理</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20240121-burnside/</link>
  <description><![CDATA[ 




<p>我们详细重述并证明 <span class="citation" data-cites="radjavi_simultaneous_2000">[1, Sec. 1.2]</span> 中的 Burnside 定理及其相关推论．</p>
<p>下面设 <img src="https://latex.codecogs.com/png.latex?V"> 是复数域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 上的有限维线性空间，<img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 是 <img src="https://latex.codecogs.com/png.latex?V"> 上的线性变换代数；<img src="https://latex.codecogs.com/png.latex?I"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的单位元．称线性变换族 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20C%20%5Csubset%20B(V)"> 可约，当且仅当其存在非平凡不变子空间——即存在非零且不是全空间的子空间 <img src="https://latex.codecogs.com/png.latex?M%20%5Csubset%20V">，使得对任意线性变换 <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20%5Cmathcal%20C">，都有 <img src="https://latex.codecogs.com/png.latex?AM%20:=%20%5C%7B%20Ax%20:%20x%20%5Cin%20M%20%5C%7D%20%5Csubset%20M">．</p>
<p>Burnside 定理证明较长．为使逻辑顺畅，先做一些准备工作．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="lem-cyclic-vector" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 1</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的乘法半群，若 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 不可约，则对任意非零的 <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20V">，都有 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20x%20:=%20%5C%7B%20Ax%20:%20A%20%5Cin%20%5Cmathcal%20A%20%5C%7D%20=%20V">（此时称 <img src="https://latex.codecogs.com/png.latex?x"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 的循环向量）．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>首先 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20%5Cneq%20%5C%7B%200%20%5C%7D">，因为任何 <img src="https://latex.codecogs.com/png.latex?V"> 的子空间都是后者的不变子空间．</p>
<ul>
<li>注意到 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BKer%7D%5Cmathcal%20A%20:=%20%5Cbigcap_%7BA%20%5Cin%20%5Cmathcal%20A%7D%20%5Coperatorname%7BKer%7DA"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 的一个不变子空间，而 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 不可约，故 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BKer%7D%5Cmathcal%20A%20=%20%5C%7B%200%20%5C%7D"> 或 <img src="https://latex.codecogs.com/png.latex?V">．因为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20%5Cneq%20%5C%7B0%5C%7D">，后者不可能发生，故 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BKer%7D%5Cmathcal%20A%20=%20%5C%7B%200%20%5C%7D">．</li>
<li>注意到 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20x%20:=%20%5C%7B%20A%20x%20:%20A%20%5Cin%20%5Cmathcal%20A%20%5C%7D"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 的一个不变子空间，而 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 不可约，故 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20x%20=%20%5C%7B%200%20%5C%7D"> 或 <img src="https://latex.codecogs.com/png.latex?V">．由 <img src="https://latex.codecogs.com/png.latex?x%20%5Cneq%200"> 和 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BKer%7D%5Cmathcal%20A%20=%20%5C%7B%200%20%5C%7D">，前者不可能发生，故 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20x%20=%20V">．</li>
</ul>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>事实上 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上半群的可约性等价于其线性生成的代数的可约性，见 <span class="citation" data-cites="radjavi_simultaneous_2000">[1], Definition 2.1.1</span>．</p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-cyclic-vector-dual" class="theorem corollary">
<p><span class="theorem-title"><strong>Corollary 1</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?V%5E*"> 是 <img src="https://latex.codecogs.com/png.latex?V"> 的对偶空间．设 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的乘法半群，<img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%5E*%20:=%20%5C%7BA%5E*%20:%20A%20%5Cin%20%5Cmathcal%20A%20%5C%7D"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 的对偶线性变换构成的集合（显然它也是个半群）．若 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 不可约，则对任意非零的线性函数 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi%20%5Cin%20V%5E*">，都有 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%5E*%20%5Cvarphi%20:=%20%5C%7B%20A%5E*%20%5Cvarphi%20:%20A%5E*%20%5Cin%20%5Cmathcal%20A%5E*%20%5C%7D%20=%20%5C%7B%20%20%5Cvarphi%20A%20:%20A%20%5Cin%20%5Cmathcal%20A%20%5C%7D%20=%20V%5E*">．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>定义 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%5E*%20%5Cvarphi"> 的 annihilator <img src="https://latex.codecogs.com/png.latex?(%5Cmathcal%20A%5E*%20%5Cvarphi)%5E0%20:=%20%5C%7B%20x%5E%7B**%7D%20%5Cin%20V%5E%7B**%7D%20:%20(%5Cmathcal%20A%5E*%20%5Cvarphi)(x)%20=%200%20%5C%7D">．由 <img src="https://latex.codecogs.com/png.latex?%5Cdim%20(A%5E*%20%5Cvarphi)%5E0%20=%20%5Cdim%20V%5E*%20-%20%5Cdim%20(A%5E*%20%5Cvarphi)"> <span class="citation" data-cites="axler_linear_2015">见 [2, Sec. 3F]</span>， <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathcal%20A%5E*%20%5Cvarphi%20=%20V%5E*%0A&amp;%5Ciff%20%5Cdim%20(%5Cmathcal%20A%5E*%20%5Cvarphi)%20=%20%5Cdim%20V%5E*%20%5C%5C%0A&amp;%5Ciff%20%5Cdim%20(%5Cmathcal%20A%5E*%20%5Cvarphi)%5E0%20=%200%20%5C%5C%0A&amp;%5Ciff%20(%5Cmathcal%20A%5E*%20%5Cvarphi)%5E0%20=%20%5C%7B0%5C%7D%0A%5Cend%7Baligned%7D%0A"> 由 annihilator 的定义和 Lemma&nbsp;1， <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A(%5Cmathcal%20A%5E*%20%5Cvarphi)%5E0%20=%20%5C%7B0%5C%7D%0A&amp;%5Ciff%20(%5Cmathcal%20A%5E*%20%5Cvarphi)%20x%20%5Cneq%20%5C%7B0%5C%7D,%5Cquad%20%5Cforall%20x%20%5Cneq%200%20%5C%5C%0A&amp;%5Ciff%20%5Cvarphi%20%5Cmathcal%20A%20x%20%20%5Cneq%20%5C%7B0%5C%7D,%5Cquad%20%5Cforall%20x%20%5Cneq%200%20%5C%5C%0A&amp;%5Ciff%20%5Cvarphi%20V%20%5Cneq%20%5C%7B0%5C%7D%20%5C%5C%0A&amp;%5Ciff%20%5Cvarphi%20%5Cneq%200%0A%5Cend%7Baligned%7D%0A"> 故最终我们得到 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%5E*%20%5Cvarphi%20=%20V%5E*%20%5Ciff%20%5Cvarphi%20%5Cneq%200">．</p>
</div>
<p>若下面的猜想成立，则上述推论将具有更简单的推导．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cnj-cyclic-vector-dual" class="theorem conjecture">
<p><span class="theorem-title"><strong>Conjecture 1</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 不可约，则 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%5E*"> 也不可约．</p>
</div>
</div>
</div>
</div>
<p>我们暂未找到证明或证伪上述猜想的方法．</p>
<p>下面来证明 Burnside 定理．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-burnside" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (Burnside 定理)</strong></span> <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的不可约子代数有且只有 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)">．</p>
</div>
</div>
</div>
</div>
<p>首先说明 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的不可约性．因为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)%20M%20=%20V"> 对任意非零不变子空间 <img src="https://latex.codecogs.com/png.latex?M"> 成立，故 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 不可约．下面设 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 是一任意给定的 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的一个不可约子代数．显然 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20%5Cneq%20%5C%7B%200%20%5C%7D">，原因在 Lemma&nbsp;1 中已述．我们的证明分三步进行：</p>
<ol type="1">
<li>证明 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 中存在一个秩为 <img src="https://latex.codecogs.com/png.latex?1"> 的线性变换 <img src="https://latex.codecogs.com/png.latex?T_0">．</li>
<li>证明所有 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 中秩为 <img src="https://latex.codecogs.com/png.latex?1"> 的线性变换都在 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 中．</li>
<li>证明任何 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 中的线性变换都可被分解为若干个秩不超过 <img src="https://latex.codecogs.com/png.latex?1"> 的线性变换的和，从而（利用代数对加法的封闭性）<img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20=%20%5Cmathcal%20B(V)">．</li>
</ol>
<div class="proof">
<p><span class="proof-title"><em>Proof</em> (第一部分). </span>由 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A%20%5Cneq%20%5C%7B%200%20%5C%7D">，可以取 <img src="https://latex.codecogs.com/png.latex?T_0"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 中的一个秩最小的非零线性变换，<img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Brank%7DT_0%20%5Cgeq%201">．考虑反证，假设 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Brank%7DT_0%20%5Cgeq%202">，只要构造出一个非零线性变换 <img src="https://latex.codecogs.com/png.latex?S_*%20%5Cin%20%5Cmathcal%20A"> 使得 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DS_*%20%5Csubsetneq%20%5Coperatorname%7BIm%7DT_0">，就能推出矛盾．</p>
<p>由 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Brank%7DT_0%20%5Cgeq%202">，可设 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DT_0"> 中存在两个线性无关的非零向量 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20T_0%20x_1,T_0%20x_2%20%5C%7D">（因此 <img src="https://latex.codecogs.com/png.latex?x_1"> 与 <img src="https://latex.codecogs.com/png.latex?x_2"> 也线性无关）．由 Lemma&nbsp;1，存在线性变换 <img src="https://latex.codecogs.com/png.latex?A_0%20%5Cin%20%5Cmathcal%20A"> 使得 <img src="https://latex.codecogs.com/png.latex?A_0%20T_0%20x_1%20=%20x_2">，于是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20T_0%20x_1,T_0%20x_2%20%5C%7D%20=%20%5C%7B%20T_0%20x_1,%20T_0%20A%20T_0%20x_1%20%5C%7D"> 线性无关．这意味着 <img src="https://latex.codecogs.com/png.latex?(%5Clambda%20T_0%20-%20T_0%20A_0%20T_0)x_1%20%5Cneq%200"> 对任意 <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cin%20%5Cmathbb%20C"> 成立，即线性变换 <img src="https://latex.codecogs.com/png.latex?S_%5Clambda%20:=%20%5Clambda%20T_0%20-%20T_0%20A_0%20T_0%20%5Cin%20%5Cmathcal%20A"> 非零．下面尝试从这些 <img src="https://latex.codecogs.com/png.latex?S_%5Clambda"> 中找到我们想要的 <img src="https://latex.codecogs.com/png.latex?S_*">．</p>
<ul>
<li>注意到 <img src="https://latex.codecogs.com/png.latex?S_%5Clambda%20=%20%20T_0(%5Clambda%20I%20-%20A_0%20T_0)">，故 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DS_%5Clambda%20%5Csubset%20%5Coperatorname%7BIm%7DT_0">．</li>
<li>注意到 <img src="https://latex.codecogs.com/png.latex?S_%5Clambda%20=%20%20(%5Clambda%20I%20-%20T_0%20A_0)%20T_0">，而 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DT_0"> 是 <img src="https://latex.codecogs.com/png.latex?T_0%20A_0"> 的一个不变子空间．故可以取 <img src="https://latex.codecogs.com/png.latex?T_0%20A_0"> 在 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DT_0"> 上的限制 <img src="https://latex.codecogs.com/png.latex?T_0%20A_0%20%7C_%7B%5Coperatorname%7BIm%7DT_0%7D">．设 <img src="https://latex.codecogs.com/png.latex?T_0%20A_0%20%7C_%7B%5Coperatorname%7BIm%7DT_0%7D"> 有一特征值 <img src="https://latex.codecogs.com/png.latex?%5Clambda_0">（由于 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DT_0"> 是复数域上有限维线性空间），这样 <img src="https://latex.codecogs.com/png.latex?%5Clambda_0%20I%20-%20T_0%20A_0%20%7C_%7B%5Coperatorname%7BIm%7DT_0%7D"> 就不是单射，因此也不是满射（由于 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DT_0"> 是有限维线性空间），即 <img src="https://latex.codecogs.com/png.latex?S_%7B%5Clambda_0%7D%20=%20(%5Clambda_0%20I%20-%20T_0%20A_0)%20T_0"> 不能映满 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DT_0">．</li>
</ul>
<p>综上 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7DS_%7B%5Clambda_0%7D%20%5Csubsetneq%20%5Coperatorname%7BIm%7DT_0"> 且 <img src="https://latex.codecogs.com/png.latex?0%20%5Cneq%20S_%7B%5Clambda_0%7D%20%5Cin%20%5Cmathcal%20A">，故 <img src="https://latex.codecogs.com/png.latex?S_%7B%5Clambda_0%7D"> 就是我们想要的 <img src="https://latex.codecogs.com/png.latex?S_*">．</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em> (第二部分). </span>对任意给定的某一秩为 <img src="https://latex.codecogs.com/png.latex?1"> 的线性变换 <img src="https://latex.codecogs.com/png.latex?T%20%5Cin%20%5Cmathcal%20B(V)">，任取非零的 <img src="https://latex.codecogs.com/png.latex?y%20%5Cin%20%5Coperatorname%7BIm%7DT">，存在线性函数 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi%20%5Cin%20V%5E*"> 使得 <img src="https://latex.codecogs.com/png.latex?T%20x%20=%20%5Cvarphi(x)%20y,%5C,%20%5Cforall%20x%20%5Cin%20V">．已经知道 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20A"> 中存在一个秩为 <img src="https://latex.codecogs.com/png.latex?1"> 的线性变换 <img src="https://latex.codecogs.com/png.latex?T_0">，则任取非零的 <img src="https://latex.codecogs.com/png.latex?y_0%20%5Cin%20%5Coperatorname%7BIm%7DT_0">，存在线性函数 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi_0%20%5Cin%20V%5E*"> 使得 <img src="https://latex.codecogs.com/png.latex?T_0%20x%20=%20%5Cvarphi_0(x)%20y_0,%5C,%20%5Cforall%20x%20%5Cin%20V">．</p>
<ul>
<li>由 Lemma&nbsp;1，存在 <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20%5Cmathcal%20A"> 使得 <img src="https://latex.codecogs.com/png.latex?A%20y_0%20=%20y">．</li>
<li>由 Corollary&nbsp;1，存在 <img src="https://latex.codecogs.com/png.latex?B%20%5Cin%20%5Cmathcal%20A"> 使得 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi_0%20B%20=%20%5Cvarphi">．</li>
</ul>
<p>综上， <img src="https://latex.codecogs.com/png.latex?%0AT%20x%20=%20%5Cvarphi(x)%20y%20=%20%5Cvarphi_0(Bx)%20A%20y_0%20=%20A(%5Cvarphi_0(Bx)%20y_0)%20=%20A%20T_0%20B%20x,%5Cquad%20%5Cforall%20x%20%5Cin%20V%0A"> 故 <img src="https://latex.codecogs.com/png.latex?T%20=%20A%20T_0%20B%20%5Cin%20%5Cmathcal%20A">．</p>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em> (第三部分). </span>设 <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20%5Cmathcal%20B(V)"> 是任一给定的线性变换，任取 <img src="https://latex.codecogs.com/png.latex?V"> 中的一组基 <img src="https://latex.codecogs.com/png.latex?b_1,%5Cdots,b_n">，设其对偶基为 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi_1,%5Cdots,%5Cvarphi_n">．定义关于基 <img src="https://latex.codecogs.com/png.latex?b_1,%5Cdots,b_n"> 的 <img src="https://latex.codecogs.com/png.latex?n"> 个投影变换 <img src="https://latex.codecogs.com/png.latex?P_k:%20x%20%5Cmapsto%20%5Cvarphi_k(x)%20b_k">，由对偶基性质，显然有 <img src="https://latex.codecogs.com/png.latex?I%20=%20%5Csum_%7Bk=1%7D%5En%20P_k">，于是 <img src="https://latex.codecogs.com/png.latex?%0AA%20=%20A%20I%20=%20A%20%5Csum_%7Bk=1%7D%5En%20P_k%20=%20%5Csum_%7Bk=1%7D%5En%20A%20P_k%0A"> 其中每一个 <img src="https://latex.codecogs.com/png.latex?A%20P_k"> 都是秩不超过 <img src="https://latex.codecogs.com/png.latex?1"> 的线性变换．</p>
</div>
<p>至此，Theorem&nbsp;1 得到完整证明．</p>
<p>Burnside 定理可以为下面的定理提供一个较为简单的证明．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-bv-simple" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2</strong></span> <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 是单代数，即 <img src="https://latex.codecogs.com/png.latex?%5C%7B%200%20%5C%7D"> 和 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 是代数 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上唯二的双边理想．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>显然 <img src="https://latex.codecogs.com/png.latex?%5C%7B%200%20%5C%7D"> 和 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5Cmathcal%20B(V)%20%5C%7D"> 都是双边理想．下面任取一 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的双边理想 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20I%20%5Cneq%20%5C%7B%200%20%5C%7D">，我们证明它不可约．任取 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20I"> 的一个非零不变子空间 <img src="https://latex.codecogs.com/png.latex?M">，由 <img src="https://latex.codecogs.com/png.latex?M,%5C,%20%5Cmathcal%20I"> 的非零性和 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20I%20V"> 的非零性， <img src="https://latex.codecogs.com/png.latex?%0AM%20%5Csupset%20%5Cmathcal%20I%20M%20%5Csupset%20%5Cmathcal%20B(V)%20%5Cmathcal%20I%20%5Cmathcal%20B(V)%20M%20=%20%5Cmathcal%20B(V)%20%5Cmathcal%20I%20V%20=%20%5Cmathcal%20B(V)%20(%5Cmathcal%20I%20V)%20=%20V%0A"> 故只能有 <img src="https://latex.codecogs.com/png.latex?M%20=%20V">，因此 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20I"> 确不可约．现在 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20I"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的不可约理想，理想一定是子代数，根据 Theorem&nbsp;1 就有 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20I%20=%20%5Cmathcal%20B(V)">．</p>
</div>
<p>下面的定理为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的全体代数自同构提供了表示方法．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-bv-inner-aut" class="theorem">
<p><span class="theorem-title"><strong>Theorem 3</strong></span> <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的全体代数自同构均为内自同构．即，任意 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的自同构 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi:%20%5Cmathcal%20B(V)%20%5Cto%20%5Cmathcal%20B(V)"> 都可写为 <img src="https://latex.codecogs.com/png.latex?A%20%5Cmapsto%20S%20A%20S%5E%7B-1%7D"> 的形式，其中 <img src="https://latex.codecogs.com/png.latex?S%20%5Cin%20%5Cmathcal%20B(V)"> 为与 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> 相关的某一可逆线性变换．</p>
</div>
</div>
</div>
</div>
<p>将矩阵表示和线性空间的语言相结合，可以为该定理提供思路更清晰的证明．</p>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>取定 <img src="https://latex.codecogs.com/png.latex?V"> 上的一组基 <img src="https://latex.codecogs.com/png.latex?x_1,%5Cdots,x_n">，定义 <img src="https://latex.codecogs.com/png.latex?%0AE_%7Bi,j%7D(x_1,%5Cdots,x_n)%20:=%20(x_1,%5Cdots,x_n)%20%5Chat%20E_%7Bi,j%7D%20%5Cpod%7Bi=1,2,%5Cdots,n;%5C;%20j=1,2,%5Cdots,n%7D%0A"> 其中全体 <img src="https://latex.codecogs.com/png.latex?%5Chat%20E_%7Bi,j%7D%20%5Cin%20%5Cmathrm%20M_n(%5Cmathbb%20C)"> 代表 <img src="https://latex.codecogs.com/png.latex?n"> 阶矩阵空间的一组自然基．于是全体 <img src="https://latex.codecogs.com/png.latex?E_%7Bi,j%7D"> 自然也是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的一组基．现在只需研究自同构 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> 将 <img src="https://latex.codecogs.com/png.latex?E_%7Bi,j%7D"> 映至何处．为显式地将 <img src="https://latex.codecogs.com/png.latex?S"> 确定出来，不妨先考虑 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)"> 的性质．</p>
<p>首先指出，<img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)"> 仍然是秩为 <img src="https://latex.codecogs.com/png.latex?1"> 的投影变换，因为：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?E_%7Bi,i%7D"> 是投影变换，根据其幂等性和代数自同构保持乘法，<img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)"> 也是投影变换．</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?E_%7Bi,i%7D%20%5Cmathcal%20B(V)%20E_%7Bi,i%7D"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的 <img src="https://latex.codecogs.com/png.latex?1"> 维子空间（从矩阵表示角度考虑），因此 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D%20%5Cmathcal%20B(V)%20E_%7Bi,i%7D)%20=%20%5Cvarphi(E_%7Bi,i%7D)%20%5Cmathcal%20B(V)%20%5Cvarphi(E_%7Bi,i%7D)"> 也是 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 的 <img src="https://latex.codecogs.com/png.latex?1"> 维子空间．考虑到 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)"> 还是投影变换，故其秩只能为 <img src="https://latex.codecogs.com/png.latex?1">（同样从矩阵表示角度考虑）．</p></li>
</ul>
<p>现在设 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BIm%7D%5Cvarphi(E_%7Bi,i%7D)%20=%20%5Coperatorname%7Bspan%7D%5C%7By_i%5C%7D">．因为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bi=1%7D%5En%20%5Coperatorname%7Bspan%7D%5C%7By_i%5C%7D%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20%5Cvarphi(E_%7Bi,i%7D)%20V%20%5C%5C%0A&amp;%5Csupset%20%5Cleft(%20%5Csum_%7Bi=1%7D%5En%20%5Cvarphi(E_%7Bi,i%7D)%20%5Cright)%20V%20%5C%5C%0A&amp;=%20%5Cvarphi%20%5Cleft(%5Csum_%7Bi=1%7D%5En%20E_%7Bi,i%7D%20%5Cright)%20V%20%5C%5C%0A&amp;=%20%5Cvarphi(I)%20V%20=%20I%20V%20=%20V%0A%5Cend%7Baligned%7D%0A"> 故 <img src="https://latex.codecogs.com/png.latex?y_1,%5Cdots,y_n"> 仍是 <img src="https://latex.codecogs.com/png.latex?V"> 的一组基．定义可逆线性变换 <img src="https://latex.codecogs.com/png.latex?S(x_1,%5Cdots,x_n)%20:=%20(y_1,%5Cdots,y_n)">．至此，断言 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> 就是 <img src="https://latex.codecogs.com/png.latex?A%20%5Cmapsto%20S%20A%20S%5E%7B-1%7D">，为此下面证明 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,j%7D)%20=%20S%20E_%7Bi,j%7D%20S%5E%7B-1%7D">．</p>
<p>仍然先看 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)">．已经知道 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)"> 是秩为 <img src="https://latex.codecogs.com/png.latex?1"> 的投影变换，故 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A&amp;%5Cphantom%7B%5Cimplies%20.%7D%20%5Cvarphi(E_%7Bi,i%7D)%20y_i%20=%20y_i%20%5C%5C%0A&amp;%5Cimplies%20%5Cvarphi(E_%7Bi,i%7D)%20S%20x_i%20=%20S%20x_i%20%5C%5C%0A&amp;%5Cimplies%20S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,i%7D)%20S%20x_i%20=%20x_i%0A%5Cend%7Baligned%7D%0A"> 容易验证 <img src="https://latex.codecogs.com/png.latex?S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,i%7D)%20S"> 幂等且秩为 <img src="https://latex.codecogs.com/png.latex?1">，因此只能有 <img src="https://latex.codecogs.com/png.latex?S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,i%7D)%20S%20=%20E_%7Bi,i%7D">，即 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,i%7D)%20=%20S%20E_%7Bi,i%7D%20S%5E%7B-1%7D">．</p>
<p>现在看 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,j%7D)">，为此考察 <img src="https://latex.codecogs.com/png.latex?S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20S"> 将 <img src="https://latex.codecogs.com/png.latex?x_1,%20%5Cdots,%20x_n"> 映至何处．事实上 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A&amp;%5Cphantom%7B%5Cimplies%20.%7D%20%5Cvarphi(E_%7Bi,j%7D)%20%5Cvarphi(E_%7Bj,j%7D)%20=%20%5Cvarphi(E_%7Bi,j%7D%20E_%7Bj,j%7D)%20=%20%5Cvarphi(E_%7Bi,j%7D)%20%5C%5C%0A&amp;%5Cimplies%20%5Cvarphi(E_%7Bi,j%7D)%20S%20E_%7Bj,j%7D%20S%5E%7B-1%7D%20=%20S%20E_%7Bi,j%7D%20S%5E%7B-1%7D%5C%5C%0A&amp;%5Cimplies%20S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20S%20E_%7Bj,j%7D%20=%20E_%7Bi,j%7D%5C%5C%0A&amp;%5Cimplies%20S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20S%20x_j%20=%20x_i%0A%5Cend%7Baligned%7D%0A"> 且对任何 <img src="https://latex.codecogs.com/png.latex?k%20%5Cneq%20j">， <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A(S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20S)%20x_k%0A&amp;=%20S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20y_k%20%5C%5C%0A&amp;=%20S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D%20E_%7Bj,j%7D)%20y_k%20%5C%5C%0A&amp;=%20S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20(%5Cvarphi(E_%7Bj,j%7D)%20y_k)%20%5C%5C%0A&amp;=%200%0A%5Cend%7Baligned%7D%0A"> 故可以断定 <img src="https://latex.codecogs.com/png.latex?S%5E%7B-1%7D%20%5Cvarphi(E_%7Bi,j%7D)%20S%20=%20E_%7Bi,j%7D">，即 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(E_%7Bi,j%7D)%20=%20S%5E%7B-1%7D%20E_%7Bi,j%7D%20S">．</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>研究 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的自同态时，可能在应用线性变换关于其作用域 <img src="https://latex.codecogs.com/png.latex?V"> 的性质时遇到困难．这时需要将其合理转化为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的代数性质，如考虑投影变换的幂等性，将投影变换秩为 <img src="https://latex.codecogs.com/png.latex?1"> 转化为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20B(V)"> 上的 <img src="https://latex.codecogs.com/png.latex?1"> 维子空间等．这些技巧在证明中多次使用．</p>
</div>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-radjavi_simultaneous_2000" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">H. Radjavi and P. Rosenthal, <em>Simultaneous <span>Triangularization</span></em>. in Universitext. New York, NY: Springer, 2000. doi: <a href="https://doi.org/10.1007/978-1-4612-1200-3">10.1007/978-1-4612-1200-3</a>.</div>
</div>
<div id="ref-axler_linear_2015" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">S. Axler, <em>Linear <span>Algebra</span> <span>Done</span> <span>Right</span></em>. in Undergraduate <span>Texts</span> in <span>Mathematics</span>. Cham: Springer International Publishing, 2015. doi: <a href="https://doi.org/10.1007/978-3-319-11080-6">10.1007/978-3-319-11080-6</a>.</div>
</div>
</div></section></div> ]]></description>
  <category>math</category>
  <category>algebra</category>
  <guid>https://blog.sun123zxy.top/posts/20240121-burnside/</guid>
  <pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://blog.sun123zxy.top/posts/20240121-burnside/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>一元多项式的 Delta 判别式</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20231018-discriminant/</link>
  <description><![CDATA[ 




<section id="e-基m-基与-p-基" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> <img src="https://latex.codecogs.com/png.latex?e">-基、<img src="https://latex.codecogs.com/png.latex?m">-基与 <img src="https://latex.codecogs.com/png.latex?p">-基</h1>
<section id="整数分拆" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="整数分拆"><span class="header-section-number">1.1</span> 整数分拆</h2>
<section id="整数分拆-1" class="level3">
<h3 class="anchored" data-anchor-id="整数分拆-1">整数分拆</h3>
<p>设非负整数数列 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda%20:=%20(%5Clambda_1,%20%5Clambda_2,%20%5Cdots)"> 只有有限项非零且（不严格）单调递减．定义长度 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L(%5Cboldsymbol%5Clambda)"> 为其非零项元素个数；定义 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20S(%5Cboldsymbol%5Clambda)"> 为其非零项元素之和．此时称 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda"> 是整数 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20S(%5Cboldsymbol%5Clambda)"> 的一个长度为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L(%5Cboldsymbol%5Clambda)"> 的<em>分拆</em>．</p>
<p>由于分拆只有有限项非零，对大于等于 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L(%5Cboldsymbol%5Clambda)"> 的非负整数 <img src="https://latex.codecogs.com/png.latex?k">，我们也常省略从第 <img src="https://latex.codecogs.com/png.latex?k+1"> 项开始的全为 <img src="https://latex.codecogs.com/png.latex?0"> 的项，将 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda"> 直接记为长度为 <img src="https://latex.codecogs.com/png.latex?k"> 的非负整数数组 <img src="https://latex.codecogs.com/png.latex?(%5Clambda_1,%20%5Clambda_2,%20%5Cdots,%20%5Clambda_k)">．</p>
<p>Ferrers diagram 和 Young diagram 是图示分拆的常见方法．</p>
<p>通过沿主对角线翻转分拆的 Ferrers diagram 或 Young diagram，可以定义<em>分拆的转置</em>．分拆 <img src="https://latex.codecogs.com/png.latex?%5Clambda"> 的转置记为 <img src="https://latex.codecogs.com/png.latex?%5Clambda%5E%5Cmathrm%7BT%7D">．转置后分拆的长度变为原分拆的首项，而首项变为原分拆的长度．</p>
</section>
</section>
<section id="单项对称多项式" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="单项对称多项式"><span class="header-section-number">1.2</span> 单项对称多项式</h2>
<section id="单项对称多项式-1" class="level3">
<h3 class="anchored" data-anchor-id="单项对称多项式-1">单项对称多项式</h3>
<p>设 <img src="https://latex.codecogs.com/png.latex?n"> 是正整数，<img src="https://latex.codecogs.com/png.latex?K"> 是一个域．记 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20x%20:=%20(x_1,%5Cdots,x_n)">．设 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda%20:=%20(%5Clambda_1,%20%5Clambda_2,%20%5Cdots%20%5Clambda_n)"> 是长度不超过 <img src="https://latex.codecogs.com/png.latex?n"> 的一个分拆．</p>
<p>定义 <img src="https://latex.codecogs.com/png.latex?n"> 元多项式环 <img src="https://latex.codecogs.com/png.latex?K%5B%5Cboldsymbol%20x%5D"> 上的关于分拆 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda"> 的<em>单项对称多项式</em>（monomial symmetric polynomial）<img src="https://latex.codecogs.com/png.latex?m_%7B%5Cboldsymbol%5Clambda%7D(%5Cboldsymbol%20x)"> 为各项系数为 <img src="https://latex.codecogs.com/png.latex?1"> 的含有单项式 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20x%5E%7B%5Cboldsymbol%5Clambda%7D%20:=%20x_1%5E%7B%5Clambda_1%7D%20x_2%5E%7B%5Clambda_2%7D%20%5Cdots%20x_n%5E%7B%5Clambda_n%7D"> 的项数最少的对称多项式．</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?m_%7B(2,1,0)%7D(x_1,x_2,x_3)%20=%20x_1%5E2%20x_2%20+%20x_1%5E2%20x_3%20+%20x_1%20x_2%5E2%20+%20x_1%20x_3%5E2%20+%20x_2%5E2%20x_3%20+%20x_2%20x_3%5E2"></li>
<li><img src="https://latex.codecogs.com/png.latex?m_%7B(2,2,1)%7D(x_1,x_2,x_3)%20=%20x_1%5E2%20x_2%5E2%20x_3%20+%20x_1%5E2%20x_2%20x_3%5E2%20+%20x_1%20x_2%5E2%20x_3%5E2"></li>
</ul>
<p>易见 <img src="https://latex.codecogs.com/png.latex?m_%7B%5Cboldsymbol%5Clambda%7D(%5Cboldsymbol%20x)"> 是次数为 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20S(%5Cboldsymbol%5Clambda)"> 的齐次（homogeneous）多项式．全体单项对称多项式构成 <img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式环 <img src="https://latex.codecogs.com/png.latex?%5CLambda_n%20%5Csubset%20K%5B%5Cboldsymbol%20x%5D"> 作为 <img src="https://latex.codecogs.com/png.latex?K"> 上线性空间的一组基底．</p>
</section>
<section id="来数数" class="level3">
<h3 class="anchored" data-anchor-id="来数数">来数数</h3>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-mono-term-count" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 1</strong></span> 对一给定的长度不超过 <img src="https://latex.codecogs.com/png.latex?n"> 的分拆 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda%20:=%20(%5Clambda_1,%20%5Clambda_2,%20%5Cdots%20%5Clambda_n)">，<img src="https://latex.codecogs.com/png.latex?n"> 元单项对称多项式 <img src="https://latex.codecogs.com/png.latex?m_%5Clambda(%5Cboldsymbol%20x)"> 共有多少项？</p>
</div>
</div>
</div>
</div>
<p>在计数时根据分拆中重复项的分布情况进行消序．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-lambda-dim" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 2</strong></span> <img src="https://latex.codecogs.com/png.latex?n"> 元 <img src="https://latex.codecogs.com/png.latex?d"> 次单项对称多项式共有多少种可能的构型？设 <img src="https://latex.codecogs.com/png.latex?%5CLambda_n%5E%7B(d)%7D%20%5Csubset%20%5CLambda_n"> 由全体至多 <img src="https://latex.codecogs.com/png.latex?d"> 次的 <img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式构成，其作为 <img src="https://latex.codecogs.com/png.latex?K"> 上线性空间的维数是多少？</p>
</div>
</div>
</div>
</div>
<p>该问题等价于求满足 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20S(%5Cboldsymbol%5Clambda)%20=%20d">，<img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L(%5Cboldsymbol%5Clambda)%20%5Cleq%20n"> 的所有可能分拆 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda"> 的数量，也即“将 <img src="https://latex.codecogs.com/png.latex?d"> 个无标号球放入 <img src="https://latex.codecogs.com/png.latex?n"> 个可空置的无标号盒”的可行方案数．</p>
</section>
</section>
<section id="基本对称多项式" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="基本对称多项式"><span class="header-section-number">1.3</span> 基本对称多项式</h2>
<section id="基本对称多项式-1" class="level3">
<h3 class="anchored" data-anchor-id="基本对称多项式-1">基本对称多项式</h3>
<p><img src="https://latex.codecogs.com/png.latex?n"> 元多项式环 <img src="https://latex.codecogs.com/png.latex?K%5B%5Cboldsymbol%20x%5D"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 个<em>基本对称多项式</em>（elementary symmetric polynomial）定义为 <img src="https://latex.codecogs.com/png.latex?%0Ae_k(x_1,%5Cdots,x_n)%20:=%20%5Csum_%7B1%20%5Cleq%20i_1%20%3C%20i_2%20%5Cdots%20%3C%20i_k%20%5Cleq%20n%7D%20x_%7Bi_1%7D%20x_%7Bi_2%7D%20%5Cdots%20x_%7Bi_k%7D,%20%5Cquad%20k%20=%201,2,%5Cdots,%20n%0A"> 使用单项对称多项式的记号，也可记为 <img src="https://latex.codecogs.com/png.latex?%0Ae_k(%5Cboldsymbol%20x)%20:=%20m_%7B%5Cboldsymbol%5Clambda_k%7D%20(%5Cboldsymbol%20x)%0A"> 其中分拆 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda_k%20:=%20(1,%5Cdots,1,0,%5Cdots)"> 的前 <img src="https://latex.codecogs.com/png.latex?k"> 项为 <img src="https://latex.codecogs.com/png.latex?1">，其余项皆为 <img src="https://latex.codecogs.com/png.latex?0">．</p>
<p>方便起见，定义 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20e_0%20=%201">，定义 <img src="https://latex.codecogs.com/png.latex?k%3En"> 和 <img src="https://latex.codecogs.com/png.latex?k%3C0"> 的 <img src="https://latex.codecogs.com/png.latex?e_k%20=%200">．设分拆 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda%20:=%20(%5Clambda_1,%5Clambda_2,%5Cdots)"> 满足 <img src="https://latex.codecogs.com/png.latex?%5Clambda_i%20%5Cleq%20n,%20%5Cquad%20%5Cforall%20i%20%5Cin%20%5Cmathbb%20N_+">．我们记 <img src="https://latex.codecogs.com/png.latex?e_%7B%5Cboldsymbol%5Clambda%7D(%5Cboldsymbol%20x)%20:=%20e_%7B%5Clambda_1%7D(%5Cboldsymbol%20x)%20e_%7B%5Clambda_2%7D(%5Cboldsymbol%20x)%20%5Cdots%20e_%7B%5Clambda_%7B%5Cmathcal%20L(%5Cboldsymbol%5Clambda)%7D%7D(%5Cboldsymbol%20x)">．</p>
</section>
<section id="生成函数" class="level3">
<h3 class="anchored" data-anchor-id="生成函数">生成函数</h3>
<p>基本对称多项式有生成函数 <img src="https://latex.codecogs.com/png.latex?%0AE(s)%20:=%20%5Csum_%7Bk%20%5Cin%20%5Cmathbb%20Z%7D%20e_k%20s%5Ek%20=%20%5Cprod_%7Bi=1%7D%5Em%20(1%20+%20x_i%20s)%0A"></p>
</section>
<section id="对称多项式基本定理" class="level3">
<h3 class="anchored" data-anchor-id="对称多项式基本定理">对称多项式基本定理</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-e-decomp" class="theorem">
<p><span class="theorem-title"><strong>定理 1 (对称多项式基本定理)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?f(%5Cboldsymbol%20x)"> 是域 <img src="https://latex.codecogs.com/png.latex?K"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式，则存在唯一的 <img src="https://latex.codecogs.com/png.latex?g(%5Cboldsymbol%20x)%20%5Cin%20K%5B%5Cboldsymbol%20x%5D">，使得 <img src="https://latex.codecogs.com/png.latex?%0Af(%5Cboldsymbol%20x)%20=%20g(e_1(%5Cboldsymbol%20x),%5Cdots,e_n(%5Cboldsymbol%20x))%0A"></p>
</div>
</div>
</div>
</div>
<p>该定理对交换环上的对称多项式仍然成立．这意味着若 <img src="https://latex.codecogs.com/png.latex?f"> 是整系数对称多项式，则 <img src="https://latex.codecogs.com/png.latex?g"> 也是整系数多项式．</p>
<p>在定理的存在性证明中，为消去首项对应的单项对称多项式 <img src="https://latex.codecogs.com/png.latex?m_%7B%5Cboldsymbol%5Clambda%7D(%5Cboldsymbol%20x)">，我们构造的若干个基本对称多项式的乘积恰为 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20e_%7B%5Cboldsymbol%5Clambda%5E%5Cmathrm%7BT%7D%7D">．</p>
<p>考察全体满足 <img src="https://latex.codecogs.com/png.latex?%5Clambda_i%20%5Cleq%20n,%20%5Cquad%20%5Cforall%20i%20%5Cin%20%5Cmathbb%20N_+"> 的分拆 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Clambda"> 对应的 <img src="https://latex.codecogs.com/png.latex?e_%7B%5Cboldsymbol%5Clambda%7D(%5Cboldsymbol%20x)">，它们构成了 <img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式环 <img src="https://latex.codecogs.com/png.latex?%5CLambda_n"> 作为 <img src="https://latex.codecogs.com/png.latex?K"> 上线性空间的另一组基底．</p>
</section>
</section>
<section id="幂和对称多项式" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="幂和对称多项式"><span class="header-section-number">1.4</span> 幂和对称多项式</h2>
<section id="幂和对称多项式-1" class="level3">
<h3 class="anchored" data-anchor-id="幂和对称多项式-1">幂和对称多项式</h3>
<p><img src="https://latex.codecogs.com/png.latex?n"> 元多项式环 <img src="https://latex.codecogs.com/png.latex?K%5B%5Cboldsymbol%20x%5D"> 上的<em>幂和对称多项式</em>（power sum symmetric polynomial）定义为 <img src="https://latex.codecogs.com/png.latex?%0Ap_k(x_1,%5Cdots,x_n)%20:=%20x_1%5Ek%20+%20x_2%5Ek%20+%20%5Cdots%20+%20x_n%5Ek,%5Cquad%20k%20%5Cin%20%5Cmathbb%20N_%7B%5Cgeq%200%7D%0A"> 使用单项对称多项式的记号，也可记为 <img src="https://latex.codecogs.com/png.latex?%0Ap_k(%5Cboldsymbol%20x)%20:=%20m_%7B(k,0,0,%5Cdots)%7D%0A"> 特别的，<img src="https://latex.codecogs.com/png.latex?p_0(%5Cboldsymbol%20x)%20=%20n">．方便起见，定义 <img src="https://latex.codecogs.com/png.latex?k%20%3C%200"> 的 <img src="https://latex.codecogs.com/png.latex?p_k%20=%200">．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-p-decomp" class="theorem">
<p><span class="theorem-title"><strong>定理 2</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Q%20%5Csubset%20K%20%5Csubset%20%5Cmathbb%20C"> 是数域，设 <img src="https://latex.codecogs.com/png.latex?f(%5Cboldsymbol%20x)"> 是域 <img src="https://latex.codecogs.com/png.latex?K"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式，则存在唯一的 <img src="https://latex.codecogs.com/png.latex?g(%5Cboldsymbol%20x)%20%5Cin%20K%5B%5Cboldsymbol%20x%5D">，使得 <img src="https://latex.codecogs.com/png.latex?f(%5Cboldsymbol%20x)%20=%20g(p_1(%5Cboldsymbol%20x),%5Cdots,p_n(%5Cboldsymbol%20x))">．</p>
</div>
</div>
</div>
</div>
<p>一般地，结论对特征为 <img src="https://latex.codecogs.com/png.latex?0"> 的域 <img src="https://latex.codecogs.com/png.latex?K"> 也成立．</p>
</section>
<section id="生成函数-1" class="level3">
<h3 class="anchored" data-anchor-id="生成函数-1">生成函数</h3>
<p>幂和对称多项式有生成函数 <img src="https://latex.codecogs.com/png.latex?%0AP(s)%20:=%20%5Csum_%7Bk%20%5Cin%20%5Cmathbb%20Z%7D%20p_k%20s%5Ek%20=%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20s%5Ek%20%5Csum_%7Bi=1%7D%5Em%20x_i%5Ek%20=%20%5Csum_%7Bi=1%7D%5Em%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20(x_i%20s)%5Ek%20=%20%5Csum_%7Bi=1%7D%5Em%20%5Cfrac%7B1%7D%7B1-x_i%20s%7D%0A"></p>
</section>
<section id="newton-公式" class="level3">
<h3 class="anchored" data-anchor-id="newton-公式">Newton 公式</h3>
<p>以下定理递推地给出了幂和对称多项式 <img src="https://latex.codecogs.com/png.latex?p_1,%5Cdots,p_n"> 与基本对称多项式 <img src="https://latex.codecogs.com/png.latex?e_1,%5Cdots,e_n"> 间的关系．定理&nbsp;2 的存在性部分可由这一定理给出．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-newton" class="theorem">
<p><span class="theorem-title"><strong>定理 3 (Newton’s Identities)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ap_k%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bk-1%7D%20(-1)%5E%7Bi-1%7D%20e_i%20p_%7Bk-i%7D%20+%20(-1)%5E%7Bk-1%7D%20k%20e_k%20&amp;%20k%20&amp;=%201,2,%5Cdots,n%20%5C%5C%0Ap_k%20&amp;=%20%5Csum_%7Bi=1%7D%5En%20(-1)%5E%7Bi-1%7D%20e_i%20p_%7Bk-i%7D%20&amp;%20k&amp;%3En%20%5C%5C%0Ak%20e_k%20&amp;=%20%5Csum_%7Bi=1%7D%5Ek%20(-1)%5E%7Bi-1%7D%20p_%7Bi%7D%20e_%7Bk-i%7D%20&amp;%20k%20&amp;=%201,2,%5Cdots,n%20%5C%5C%0A0%20&amp;=%20%5Csum_%7Bi=1%7D%5En%20(-1)%5E%7Bi-1%7D%20p_%7Bi%7D%20e_%7Bk-i%7D%20&amp;%20k%20&amp;%3E%20n%0A%5Cend%7Baligned%7D%0A"></p>
</div>
</div>
</div>
</div>
</section>
<section id="更简单的写法" class="level3">
<h3 class="anchored" data-anchor-id="更简单的写法">更简单的写法</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B%5Csubstack%7Bi+j=k%7D%7D%20(-1)%5Ei%20e_i%20p_j%20=%200,%5Cquad%20k%20%5Cin%20%5Cmathbb%20N_%7B%5Cgeq%200%7D%0A"> 但在求和中“认为” <img src="https://latex.codecogs.com/png.latex?p_0%20=%20k">．</p>
</section>
<section id="一个基于生成函数的证明" class="level3">
<h3 class="anchored" data-anchor-id="一个基于生成函数的证明">一个基于生成函数的证明</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bs%20E'(s)%7D%7BE(s)%7D%20=%20%20s%20%5Cfrac%7B%5Coperatorname%7Bd%7D%5C!%7D%7B%5Coperatorname%7Bd%7D%5C!s%7D%20%5Cleft(%20%5Cln%20E(s)%20%5Cright)%20=%20%5Csum_%7Bi=1%7D%5Em%20%5Cfrac%7Bx_i%20s%7D%7B1+x_i%20s%7D%20=%20m%20-%20%5Csum_%7Bi=1%7D%5Em%20%5Cfrac%7B1%7D%7B1+x_i%20s%7D%20=%20m%20-%20P(-s)%0A"> 即 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=0%7D%5E%5Cinfty%20k%20e_k%20s%5Ek%20%20=%20s%20E'(s)%20=%20E(s)%20(m%20-%20P(-s))%20=%20E(s)%20%5Csum_%7Bk=1%7D%5E%5Cinfty%20(-1)%5E%7Bk-1%7D%20p_k%0A"> 对比各项即得 Newton 公式．</p>
</section>
</section>
<section id="其它基底" class="level2" data-number="1.5">
<h2 data-number="1.5" class="anchored" data-anchor-id="其它基底"><span class="header-section-number">1.5</span> 其它基底</h2>
<section id="其它基底-1" class="level3">
<h3 class="anchored" data-anchor-id="其它基底-1">其它基底</h3>
<p>完全齐次对称多项式（Complete homogeneous symmetric polynomials）、Schur 多项式……</p>
<p>本节主要参考 <span class="citation" data-cites="wp_sympoly wp_e-basis wp_p-basis wp_newton">[1]–[4]</span>．</p>
</section>
</section>
</section>
<section id="delta-判别式" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Delta 判别式</h1>
<section id="vietas-formulas" class="level3">
<h3 class="anchored" data-anchor-id="vietas-formulas">Vieta’s formulas</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-vieta" class="theorem">
<p><span class="theorem-title"><strong>定理 4 (Vieta’s formulas)</strong></span> 设数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上 <img src="https://latex.codecogs.com/png.latex?n"> 次首一多项式（monic polynomial） <img src="https://latex.codecogs.com/png.latex?%0AA(x)%20:=%20x%5En%20+%20a_%7Bn-1%7D%20x%5E%7Bn-1%7D%20+%20%5Cdots%20+%20a_0%20=%20(x-c_1)(x-c_2)%5Cdots(x-c_n)%0A"> 其 <img src="https://latex.codecogs.com/png.latex?n"> 个复根分别为 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20c%20:=%20(c_1,%20c_2,%5Cdots,c_n)">，则 <img src="https://latex.codecogs.com/png.latex?A(x)"> 的系数可由关于根的 <img src="https://latex.codecogs.com/png.latex?n"> 个 <img src="https://latex.codecogs.com/png.latex?n"> 元基本对称多项式表示 <img src="https://latex.codecogs.com/png.latex?%0Aa_%7Bn-k%7D%20=%20e_k(-%5Cboldsymbol%20c)%20=%20(-1)%5Ek%20%5Csum_%7B1%20%5Cleq%20i_1%20%3C%20%5Cdots%20%3C%20i_k%20%5Cleq%20n%7D%20c_%7Bi_1%7D%20c_%7Bi_2%7D%20%5Cdots%20c_%7Bi_k%7D%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?k%20=%201,2,%5Cdots,n">．特别的 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Aa_0%20&amp;=%20e_n(-%5Cboldsymbol%20c)%20=%20(-1)%5En%20c_1%20c_2%20%5Cdots%20c_n%20%5C%5C%0Aa_%7Bn-1%7D%20&amp;=%20e_1(-%5Cboldsymbol%20c)%20=%20-(c_1%20+%20c_2%20+%20%5Cdots%20+%20c_n)%0A%5Cend%7Baligned%7D%0A"></p>
</div>
</div>
</div>
</div>
</section>
<section id="vieta-定理与对称多项式基本定理" class="level3">
<h3 class="anchored" data-anchor-id="vieta-定理与对称多项式基本定理">Vieta 定理与对称多项式基本定理</h3>
<ul>
<li><p>即使尚未获知多项式 <img src="https://latex.codecogs.com/png.latex?n"> 个复根 <img src="https://latex.codecogs.com/png.latex?c_1,%5Cdots,c_n"> 的具体取值，我们也能通过已知的多项式系数 <img src="https://latex.codecogs.com/png.latex?a_0,%5Cdots,a_%7Bn-1%7D"> 获知 <img src="https://latex.codecogs.com/png.latex?n"> 个 <img src="https://latex.codecogs.com/png.latex?n"> 元基本对称多项式在根处的取值．</p></li>
<li><p>对称多项式基本定理指出，任何对称多项式都可被（唯一）表示为关于 <img src="https://latex.codecogs.com/png.latex?n"> 个基本对称多项式的一个多项式．</p></li>
<li><p>仅需知晓多项式的系数，就可获得任意给定对称多项式在根处的取值．</p></li>
<li><p>目标：构造一个（数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上的）<img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式，使得能通过代入求值的方式，快速检测 <img src="https://latex.codecogs.com/png.latex?n"> 个复数是否两两不同．</p></li>
</ul>
</section>
<section id="vandermonde-行列式" class="level3">
<h3 class="anchored" data-anchor-id="vandermonde-行列式">Vandermonde 行列式</h3>
<p>考察作为（数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上）<img src="https://latex.codecogs.com/png.latex?n"> 元多项式的 Vandermonde 行列式 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Cdet%20V%20&amp;:=%20%5Cdet%20%5Cbegin%7Bpmatrix%7D%20x_j%5E%7Bi-1%7D%20%5Cend%7Bpmatrix%7D_%7Bi=1,j=1%7D%5E%7Bn,n%7D%20%5C%5C%0A&amp;=%0A%5Cdet%20%5Cbegin%7Bpmatrix%7D%0A1%20%20%20%20%20%20%20&amp;%201%20%20%20%20%20&amp;%20%5Cdots%20&amp;%201%20%20%20%20%20%5C%5C%0Ax_1%20%20%20%20%20&amp;%20x_2%20%20%20&amp;%20%5Cdots%20&amp;%20x_n%20%20%20%5C%5C%0A%5Cvdots%20%20&amp;%20%5Cvdots&amp;%20%5Cddots&amp;%20%5Cvdots%5C%5C%0Ax_1%5E%7Bn-1%7D%20&amp;%20x_2%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20x_n%5E%7Bn-1%7D%20%20%20%0A%5Cend%7Bpmatrix%7D%20=%20%5Cprod_%7B1%20%5Cleq%20i%20%3C%20j%20%5Cleq%20n%7D%20(x_j%20-%20x_i)%0A%5Cend%7Bsplit%7D%0A"> 它是否可用于判定重根？它是对称多项式吗？</p>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span><img src="https://latex.codecogs.com/png.latex?%5Cdet%20V"> 是一个斜对称多项式．事实上，<img src="https://latex.codecogs.com/png.latex?%5Cdet%20V"> 与所有对称多项式的乘积构成了全体斜对称多项式（alternating polynomials）．</p>
</div>
</section>
<section id="判别式" class="level3">
<h3 class="anchored" data-anchor-id="判别式">判别式</h3>
<p>设（数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上的）<img src="https://latex.codecogs.com/png.latex?n"> 元对称多项式 <img src="https://latex.codecogs.com/png.latex?%0AD(x_1,%5Cdots,x_n)%20:=%20(%5Cdet%20V)%5E2%20=%20%5Cprod_%7B1%20%5Cleq%20i%20%3C%20j%20%5Cleq%20n%7D%20(x_j%20-%20x_i)%5E2%0A"> 称其为（数域 <img src="https://latex.codecogs.com/png.latex?K"> 上）一元 <img src="https://latex.codecogs.com/png.latex?n"> 次首一多项式的<em>判别式</em>（Discriminant）．当代入的 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20x%20:=%20(x_1,%5Cdots,x_n)%20%5Csubset%20%5Cmathbb%20C"> 互不相同时，<img src="https://latex.codecogs.com/png.latex?D(%5Cboldsymbol%20x)%20%5Cneq%200">；否则 <img src="https://latex.codecogs.com/png.latex?D(%5Cboldsymbol%20x)%20=%200">．</p>
<p>根据对称多项式基本定理，存在唯一数域 <img src="https://latex.codecogs.com/png.latex?K"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 元多项式 <img src="https://latex.codecogs.com/png.latex?d">，使得 <img src="https://latex.codecogs.com/png.latex?d(e_1(%5Cboldsymbol%20x),%5Cdots,e_n(%5Cboldsymbol%20x))%20=%20D(%5Cboldsymbol%20x)">．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-discriminant" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 1</strong></span> 数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 次首一多项式 <img src="https://latex.codecogs.com/png.latex?f(x)%20:=%20x%5En%20+%20a_%7Bn-1%7D%20x%5E%7Bn-1%7D%20+%20%5Cdots%20+%20a_0"> 在复数域中有重根的充分必要条件是 <img src="https://latex.codecogs.com/png.latex?d(a_%7Bn-1%7D,%5Cdots,a_0)%20=%200">．</p>
</div>
</div>
</div>
</div>
<p>这是因为 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的 <img src="https://latex.codecogs.com/png.latex?n"> 个复根 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20c%20:=%20(c_1,%5Cdots,c_n)"> 满足 <img src="https://latex.codecogs.com/png.latex?%0AD(-%5Cboldsymbol%20c)%20=%20d(e_1(-%5Cboldsymbol%20c),%5Cdots,e_n(-%5Cboldsymbol%20c))%20=%20d(a_%7Bn-1%7D,%5Cdots,a_0)%0A"></p>
</section>
<section id="判别式-1" class="level3">
<h3 class="anchored" data-anchor-id="判别式-1">判别式</h3>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-2-discriminant" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 3</strong></span> 写出数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上一元二次多项式 <img src="https://latex.codecogs.com/png.latex?x%5E2%20+%20bx%20+%20c"> 的判别式．</p>
</div>
</div>
</div>
</div>
<p>对次数更高的方程，直接使用消首项方法求解判别式 <img src="https://latex.codecogs.com/png.latex?D(%5Cboldsymbol%20x)"> 在基本对称多项式下的表示 <img src="https://latex.codecogs.com/png.latex?d(e_1,%5Cdots,e_n)"> 将变得相当繁琐．下面利用判别式与 Vandermonde 行列式的关系得到另一种分解方法．</p>
</section>
<section id="另一分解方法" class="level3">
<h3 class="anchored" data-anchor-id="另一分解方法">另一分解方法</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AD(%5Cboldsymbol%20x)%20&amp;=%20(%5Cdet%20V)%5E2%20=%20%5Cdet(V%20V%5ET)%20%5C%5C%0A&amp;=%20%5Cdet%20(%5Cbegin%7Bpmatrix%7D%0A1%20%20%20%20%20%20%20&amp;%201%20%20%20%20%20&amp;%20%5Cdots%20&amp;%201%20%20%20%20%20%5C%5C%0Ax_1%20%20%20%20%20&amp;%20x_2%20%20%20&amp;%20%5Cdots%20&amp;%20x_n%20%20%20%5C%5C%0A%5Cvdots%20%20&amp;%20%5Cvdots&amp;%20%5Cddots&amp;%20%5Cvdots%5C%5C%0Ax_1%5E%7Bn-1%7D%20&amp;%20x_2%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20x_n%5E%7Bn-1%7D%20%20%20%0A%5Cend%7Bpmatrix%7D%20%5Cbegin%7Bpmatrix%7D%0A1%20%20%20%20%20%20%20&amp;%20x_1%20%20%20&amp;%20%5Cdots%20%20%20%20%20&amp;%20x_1%5E%7Bn-1%7D%20%5C%5C%0A1%20%20%20%20%20%20%20&amp;%20x_2%20%20%20&amp;%20%5Cdots%20%20%20%20%20&amp;%20x_2%5E%7Bn-1%7D%20%5C%5C%0A%5Cvdots%20%20&amp;%20%5Cvdots&amp;%20%5Cddots%20%20%20%20&amp;%20%5Cvdots%20%20%20%20%5C%5C%0A1%20%20%20%20%20%20%20&amp;%20x_n%20%20%20&amp;%20%5Cdots%20%20%20%20%20&amp;%20x_n%5E%7Bn-1%7D%0A%5Cend%7Bpmatrix%7D)%20%5C%5C%0A&amp;=%20%5Cdet%20%5Cbegin%7Bpmatrix%7D%0An%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20p_1(%5Cboldsymbol%20x)%20%20%20&amp;%20%5Cdots%20%20%20%20%20&amp;%20p_%7Bn-1%7D(%5Cboldsymbol%20x)%20%20%20%5C%5C%0Ap_1(%5Cboldsymbol%20x)%20%20%20%20%20&amp;%20p_2(%5Cboldsymbol%20x)%20%20%20&amp;%20%5Cdots%20%20%20%20%20&amp;%20p_n(%5Cboldsymbol%20x)%20%20%20%20%20%20%20%5C%5C%0A%5Cvdots%20%20%20%20%20%20%20%20%20%20&amp;%20%5Cvdots%20%20%20%20%20%20%20%20&amp;%20%5Cddots%20%20%20%20&amp;%20%5Cvdots%20%20%20%20%20%20%20%20%20%20%20%20%5C%5C%0Ap_%7Bn-1%7D(%5Cboldsymbol%20x)%20&amp;%20p_n(%5Cboldsymbol%20x)%20%20%20&amp;%20%5Cdots%20%20%20%20%20&amp;%20p_%7B2n-2%7D(%5Cboldsymbol%20x)%0A%5Cend%7Bpmatrix%7D%0A=%20%5Cdet%20%5Cbegin%7Bpmatrix%7D%20p_%7Bi+j-2%7D(%5Cboldsymbol%20x)%20%5Cend%7Bpmatrix%7D_%7Bi=1,j=1%7D%5E%7Bn,n%7D%0A%5Cend%7Baligned%7D%0A"> 而由 Newton’s Identities，幂和对称多项式 <img src="https://latex.codecogs.com/png.latex?p_k(%5Cboldsymbol%20x)"> 可较容易地递推分解为基本对称多项式的多项式组合，故我们找到了分解 <img src="https://latex.codecogs.com/png.latex?D(%5Cboldsymbol%20x)"> 的一种更易操作的方法．</p>
</section>
<section id="另一分解方法-1" class="level3">
<h3 class="anchored" data-anchor-id="另一分解方法-1">另一分解方法</h3>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-3-discriminant" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 4</strong></span> 写出数域 <img src="https://latex.codecogs.com/png.latex?K%20%5Csubset%20%5Cmathbb%20C"> 上不完全三次多项式 <img src="https://latex.codecogs.com/png.latex?x%5E3%20+%20bx%20+%20c"> 的判别式．</p>
</div>
</div>
</div>
</div>
<p>本节主要参考 <span class="citation" data-cites="qiu-algebra lan-algebra wp_partition wp_alternating">[5]–[8]</span>．</p>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-wp_sympoly" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">Wikipedia, <span>《Symmetric polynomial》</span>. <a href="https://en.wikipedia.org/wiki/Symmetric_polynomial" class="uri">https://en.wikipedia.org/wiki/Symmetric_polynomial</a>.</div>
</div>
<div id="ref-wp_e-basis" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">Wikipedia, <span>《Elementary symmetric polynomial》</span>. <a href="https://en.wikipedia.org/wiki/Elementary_symmetric_polynomial" class="uri">https://en.wikipedia.org/wiki/Elementary_symmetric_polynomial</a>.</div>
</div>
<div id="ref-wp_p-basis" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">Wikipedia, <span>《Power sum symmetric polynomial》</span>. <a href="https://en.wikipedia.org/wiki/Power_sum_symmetric_polynomial" class="uri">https://en.wikipedia.org/wiki/Power_sum_symmetric_polynomial</a>.</div>
</div>
<div id="ref-wp_newton" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">Wikipedia, <span>《Newton’s identities》</span>. <a href="https://en.wikipedia.org/wiki/Newton%27s_identities" class="uri">https://en.wikipedia.org/wiki/Newton%27s_identities</a>.</div>
</div>
<div id="ref-qiu-algebra" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">丘维声, <span>《高等代数&nbsp;下册》</span>, 3 本北京: 高等教育出版社, 2015, 页 57–66.</div>
</div>
<div id="ref-lan-algebra" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">蓝以中, <span>《高等代数简明教程（下册）》</span>, 2 本北京: 北京大学出版社, 2007, 页 213–217.</div>
</div>
<div id="ref-wp_partition" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">Wikipedia, <span>《Partition (number theory)》</span>. <a href="https://en.wikipedia.org/wiki/Partition_(number_theory)" class="uri">https://en.wikipedia.org/wiki/Partition_(number_theory)</a>.</div>
</div>
<div id="ref-wp_alternating" class="csl-entry">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline">Wikipedia, <span>《Alternating polynomial》</span>. <a href="https://en.wikipedia.org/wiki/Alternating_polynomial" class="uri">https://en.wikipedia.org/wiki/Alternating_polynomial</a>.</div>
</div>
</div></section></div> ]]></description>
  <category>math</category>
  <category>algebra</category>
  <category>combinatorics</category>
  <category>lecture notes</category>
  <category>slides</category>
  <guid>https://blog.sun123zxy.top/posts/20231018-discriminant/</guid>
  <pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A Convolution-Oriented FFT Tutorial</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230928-dft/</link>
  <description><![CDATA[ 




<section id="forewords" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Forewords</h1>
<section id="卷积但不止卷积---fft-漫谈" class="level3">
<h3 class="anchored" data-anchor-id="卷积但不止卷积---fft-漫谈">卷积，但不止卷积 - FFT 漫谈</h3>
<ul>
<li>先有 FT，再有 DFT，才有 FFT</li>
<li>时频转换是最初的用途</li>
<li>发现单位根优秀性质，James Cooley, John Tukey 发明现代 FFT 加速 DFT，但此前相似的发现早已有之</li>
<li>后来将 DFT 与卷积定理联系，FFT 才被用于计算多项式乘法</li>
<li>复数运算精度误差推动了 NTT 的发展</li>
<li>应用：任何需要频率和卷积的地方．频谱、滤波器、音乐、雷达、图像处理……</li>
<li>OI/XCPC 中主要关心卷积</li>
</ul>
</section>
<section id="推荐食用方法" class="level3">
<h3 class="anchored" data-anchor-id="推荐食用方法">推荐食用方法</h3>
<ul>
<li><p>初步要求</p>
<ul>
<li>知道 DFT、FFT 可用于快速计算多项式卷积</li>
<li>掌握 FFT 加速 DFT 计算的原理和实现</li>
<li>会应用结论改动 FFT 加速 NTT 计算</li>
<li>见识一些卷积解决的基本问题，初步了解生成函数在组合计数中的应用</li>
<li>题目可选择性完成，请多花时间消化原理和思想</li>
</ul></li>
<li><p>学有余力 / 集训后继续消化</p>
<ul>
<li>系统学习生成函数</li>
<li>实现多项式全家桶</li>
<li>对原理感兴趣的同学可对数学部分做进一步研究．本讲内容是线性代数、抽象代数、数论等多领域的综合应用．欢迎讨论．</li>
<li>学习集合幂级数相关知识点（FMT，FWT，……），体会其思想与 FFT 的同与异</li>
<li>学习 FFT 在信号、频谱等非算法竞赛向实际问题中的应用</li>
</ul></li>
<li><p>Learn for fun :)</p></li>
</ul>
</section>
<section id="记号说明" class="level3">
<h3 class="anchored" data-anchor-id="记号说明">记号说明</h3>
<ul>
<li><p>记 <img src="https://latex.codecogs.com/png.latex?%5Bn%5D%20=%20%5C%7B%200,1,%5Cdots,n-1%20%5C%7D">，此时可用 <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5Bn%5D"> 代替下标取值范围 <img src="https://latex.codecogs.com/png.latex?k=0,1,%5Cdots,n-1"> 的记法．</p>
<ul>
<li>集合论中已定义 <img src="https://latex.codecogs.com/png.latex?n%20=%20%5C%7B%200,1,%5Cdots,n-1%20%5C%7D">，这里的中括号是为了强调其集合含义．</li>
</ul></li>
<li><p>使用 Iverson 括号约定：设 <img src="https://latex.codecogs.com/png.latex?P"> 是一个命题，记 <img src="https://latex.codecogs.com/png.latex?%0A%5BP%5D%20:=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%201%20&amp;%20%5Ctext%7B$P$%20is%20true%7D%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%20%5Ctext%7Botherwise%7D%0A%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A"></p></li>
<li><p>多项式的规模定义为多项式的次数加一．特别的，零多项式的规模为 <img src="https://latex.codecogs.com/png.latex?0">．</p>
<ul>
<li>以后会混用 <img src="https://latex.codecogs.com/png.latex?n-1"> 次多项式和规模为 <img src="https://latex.codecogs.com/png.latex?n"> 的多项式的说法．</li>
</ul></li>
</ul>
</section>
</section>
<section id="fftntt-in-a-nutshell" class="level1 page-columns page-full" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> FFT/NTT in a nutshell</h1>
<section id="fft" class="level2 page-columns page-full" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="fft"><span class="header-section-number">2.1</span> FFT</h2>
<section id="多项式卷积" class="level3">
<h3 class="anchored" data-anchor-id="多项式卷积">多项式卷积</h3>
<p>给定两个至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式 <img src="https://latex.codecogs.com/png.latex?%0AA(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20x%5Ek,%5Cquad%20B(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20b_k%20x%5Ek%0A"> 如何快速计算两者的卷积，即它们相乘得到的多项式的系数？ <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20%20%20%20%20%20%20(A*B)(x)%20=%20A(x)B(x)%20&amp;=%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20a_i%20x%5Ei%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20b_j%20x%5Ej%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bk=0%7D%5E%7B2n-2%7D%20x%5Ek%20%5Csum_%7Bi+j=k%7D%20a_i%20b_j%0A%20%20%20%20%5Cend%7Baligned%7D%0A"> 上式给出了 <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> 的朴素做法．</p>
</section>
<section id="系数---点值---系数" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="系数---点值---系数">系数 - 点值 - 系数</h3>
<ul>
<li><p>代入任意 <img src="https://latex.codecogs.com/png.latex?x"> 可得到多项式在 <img src="https://latex.codecogs.com/png.latex?x"> 处的点值</p></li>
<li><p>点值意义下的多项式乘法是 <img src="https://latex.codecogs.com/png.latex?O(n)"> 的 <img src="https://latex.codecogs.com/png.latex?%0A(A*B)(x)%20=%20A(x)B(x)%0A"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?n"> 点确定一个至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式<sup>1</sup></p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;一种常见的证法是使用 Vandermonde 行列式证明矩阵可逆．后面会介绍多项式环风格的证明．</p></div></div><p>若计算至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式的某 <img src="https://latex.codecogs.com/png.latex?n"> 个点值存在快速算法，而通过多项式的某 <img src="https://latex.codecogs.com/png.latex?n"> 个点值确定原多项式系数亦存在快速算法，就有通过 <img src="https://latex.codecogs.com/png.latex?O(n)"> 的点值乘法加速多项式乘法计算的可能．</p>
</section>
<section id="系数---点值---系数---快速转换" class="level3">
<h3 class="anchored" data-anchor-id="系数---点值---系数---快速转换">系数 - 点值 - 系数 - 快速转换？</h3>
<ul>
<li><p>朴素计算任意指定 <img src="https://latex.codecogs.com/png.latex?n"> 个位置点值需要 <img src="https://latex.codecogs.com/png.latex?O(n%5E2)">．</p></li>
<li><p>Lagrange<span class="citation" data-cites="oiwiki-lagrange">[1]</span> 插值给出了 <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> 将任意位置 <img src="https://latex.codecogs.com/png.latex?n"> 个点值还原为多项式系数的算法．</p></li>
<li><p>能否选取 <img src="https://latex.codecogs.com/png.latex?n"> 个特殊的点值使系数 - 点值、点值 - 系数的变换支持快速计算？</p></li>
</ul>
</section>
<section id="discrete-fourier-transform" class="level3">
<h3 class="anchored" data-anchor-id="discrete-fourier-transform">Discrete Fourier Transform</h3>
<p>离散傅里叶变换（Discrete Fourier Transform, DFT）接受一个至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式的 <img src="https://latex.codecogs.com/png.latex?n"> 个系数，将复数域上的 <img src="https://latex.codecogs.com/png.latex?n"> 个 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根代入系数表达式以得到给定多项式的 <img src="https://latex.codecogs.com/png.latex?n"> 个点值． <img src="https://latex.codecogs.com/png.latex?%0Aa_0,a_1,%5Cdots,a_%7Bn-1%7D%20%5Clongrightarrow%20A(1),A(%5Comega_n),%5Cdots,A(%5Comega_n%5E%7Bn-1%7D)%0A"></p>
<p>得益于单位根的特殊运算性质，二者均有被称为快速傅里叶变换（Fast Fourier Transform, FFT）的快速算法．</p>
</section>
<section id="复数域单位根" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="复数域单位根">复数域单位根</h3>
<p>复数域上的 <img src="https://latex.codecogs.com/png.latex?n"> 个 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根<sup>2</sup> <img src="https://latex.codecogs.com/png.latex?%0A%5Comega_n%5Ek%20:=%20e%5E%7B%5Cfrac%20%7B2%20%5Cpi%20k%7D%7Bn%7D%20i%7D%20=%20%5Ccos%20%5Cfrac%7B2%20%5Cpi%20k%7D%7Bn%7D%20+%20i%20%5Csin%20%5Cfrac%7B2%20%5Cpi%20k%7D%7Bn%7D,%5Cquad%20k%20%5Cin%20%5Bn%5D%0A"> 是复平面单位圆上的 <img src="https://latex.codecogs.com/png.latex?n"> 等分点，易验证它们是复数域中唯一满足方程 <img src="https://latex.codecogs.com/png.latex?z%5En%20=%201"> 的解．</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;有的文献定义 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%20:=%20e%5E%7B-%5Cfrac%20%7B2%20%5Cpi%7D%7Bn%7D%20i%7D">，或是因为信号处理领域常用 IDFT 将信号时域采样数据变为频域信息．事实上，DFT/IDFT 的说法也常有反转，但这只是形式问题．</p></div></div><p>所有单位根模长均为 <img src="https://latex.codecogs.com/png.latex?1">．第 <img src="https://latex.codecogs.com/png.latex?k"> 个单位根的辐角为 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20%7B2%20%5Cpi%20k%7D%7Bn%7D">．复数乘法”模长相乘，辐角相加”的性质告诉我们 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%5Ei%20%5Comega_n%5Ej%20=%20%5Comega_n%5E%7Bi+j%7D">．</p>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em> (Euler’s formula for nerds). </span>Euler 公式 <img src="https://latex.codecogs.com/png.latex?e%5E%7Bit%7D%20=%20%5Ccos%20t%20+%20i%20%5Csin%20t"> 的一种证明可用指数函数的另一定义 <img src="https://latex.codecogs.com/png.latex?%5Cexp%20z%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20(1+%5Cfrac%20z%20n)%5En"> 分析复数处极坐标的极限 <span class="citation" data-cites="euler-formula">[2]</span>．严格来讲，如果三角函数和指数函数都由级数定义 <span class="citation" data-cites="trigonometry">[3]</span>，Euler 公式几乎是显然的．总之，这里仅将 Euler 公式作为一种紧凑的记号使用，细节不做要求．</p>
</div>
</section>
<section id="复数域单位根---三个重要性质" class="level3">
<h3 class="anchored" data-anchor-id="复数域单位根---三个重要性质">复数域单位根 - 三个重要性质<sup>3</sup></h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-cancel" class="theorem">
<p><span class="theorem-title"><strong>定理 1 (消去引理)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Comega_%7Bdn%7D%5E%7Bdk%7D%20=%20%5Comega_n%5Ek,%5Cquad%20%5Cforall%20d%20%5Cin%20%5Cmathbb%20N_+%0A"></p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-half" class="theorem">
<p><span class="theorem-title"><strong>定理 2 (折半引理)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5C%7B%20%5Comega_%7B2n%7D%5E%7B2k%7D%20:%20k%20%5Cin%20%5B2n%5D%20%5Cright%5C%7D%20=%20%5Cleft%5C%7B%20%5Comega_n%5Ek%20:%20k%20%5Cin%20%5Bn%5D%20%5Cright%5C%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>消去 / 折半引理将在 FFT 的推导中使用．</p>
</section>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;这三个引理是《算法导论》<span class="citation" data-cites="algointro">[4]</span> 引入的．</p></div></div><section id="复数域单位根---三个重要性质-1" class="level3">
<h3 class="anchored" data-anchor-id="复数域单位根---三个重要性质-1">复数域单位根 - 三个重要性质</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-summation" class="theorem">
<p><span class="theorem-title"><strong>定理 3 (求和引理)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%201%20n%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bik%7D%20=%20%5Bn%20%5Cmid%20i%5D%0A"></p>
</div>
</div>
</div>
</div>
<p>求和引理的证明使用了等比数列求和公式．将在 IDFT 的推导中用到．</p>
</section>
<section id="fast-fourier-transform" class="level3">
<h3 class="anchored" data-anchor-id="fast-fourier-transform">Fast Fourier Transform</h3>
<p>考虑将至多 <img src="https://latex.codecogs.com/png.latex?2n-1"> 次的待变换多项式 <img src="https://latex.codecogs.com/png.latex?A(x)%20=%20%5Csum_%7Bk=0%7D%5E%7B2n-1%7D%20a_k%20x%5Ek"> 奇偶分项两个至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式 <img src="https://latex.codecogs.com/png.latex?A(x)%20=%20A_0%20(x%5E2)%20+%20x%20A_1(x%5E2)">，其中 <img src="https://latex.codecogs.com/png.latex?%0AA_0%20(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_%7B2k%7D%20x%5Ek,%5Cquad%0AA_1%20(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_%7B2k+1%7D%20x%5Ek%0A"> 代入 <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Comega_%7B2n%7D%5Ek,%5C,%20k%20%5Cin%20%5B2n%5D">，用单位根消去或折半引理（<img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D%5E%7B2k%7D%20=%20%5Comega_n%5Ek">）得 <img src="https://latex.codecogs.com/png.latex?%0AA(%5Comega_%7B2n%7D%5Ek)%20=%20A_0%20(%5Comega_%7Bn%7D%5Ek)%20+%20%5Comega_%7B2n%7D%5Ek%20A_1%20(%5Comega_%7Bn%7D%5Ek)%0A"> 再用 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D%5E%7Bn%7D%20=%20-1"> 得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA(%5Comega_%7B2n%7D%5Ek)%20&amp;=%20A_0%20(%5Comega_n%5Ek)%20+%20%5Comega_%7B2n%7D%5Ek%20A_1%20(%5Comega_n%5Ek)%20%5C%5C%0AA(%5Comega_%7B2n%7D%5E%7Bn+k%7D)%20&amp;=%20A_0%20(%5Comega_n%5Ek)%20-%20%5Comega_%7B2n%7D%5Ek%20A_1(%5Comega_n%5Ek)%0A%5Cend%7Baligned%7D%0A,%5Cquad%20k%20%5Cin%20%5Bn%5D%0A"> 原多项式 <img src="https://latex.codecogs.com/png.latex?A(x)"> 规模为 <img src="https://latex.codecogs.com/png.latex?2n"> 的 DFT 转化为规模为 <img src="https://latex.codecogs.com/png.latex?n"> 的 <img src="https://latex.codecogs.com/png.latex?A_0(x)"> 和 <img src="https://latex.codecogs.com/png.latex?A_1(x)"> 的 DFT．递归计算就可得到 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)"> 的算法．</p>
</section>
<section id="dft-的矩阵表示" class="level3">
<h3 class="anchored" data-anchor-id="dft-的矩阵表示">DFT 的矩阵表示</h3>
<p>记 <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bgathered%7D%0A%5Cboldsymbol%20a%20=%20%20%5Cbegin%7Bpmatrix%7Da_0%20%5C%5C%20a_1%20%5C%5C%20%5Cvdots%20%5C%5C%20a_%7Bn-1%7D%5Cend%7Bpmatrix%7D,%5Cquad%0AF%20=%20%5Cleft(%20%5Comega_n%5E%7Bij%7D%20%5Cright)_%7B(i,j)%20%5Cin%20n%20%5Ctimes%20n%7D%20=%20%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A1%20&amp;%20%5Comega_n%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A1%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B(n-1)(n-1)%7D%0A%5Cend%7Bpmatrix%7D%0A%5Cend%7Bgathered%7D%0A"> 则 DFT 的变换结果（给定系数 <img src="https://latex.codecogs.com/png.latex?a_0,a_1,%5Cdots,a_%7Bn-1%7D"> 的多项式在 <img src="https://latex.codecogs.com/png.latex?n"> 个 <img src="https://latex.codecogs.com/png.latex?n"> 次单位根处的点值）可表示为 <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Cboldsymbol%20a%7D%20=%20%5Cbegin%7Bpmatrix%7DA(1)%20%5C%5C%20A(%5Comega_n)%20%5C%5C%20%5Cvdots%20%5C%5C%20A(%5Comega_n%5E%7Bn-1%7D)%5Cend%7Bpmatrix%7D%20=%20F%20%5Cboldsymbol%20a%0A"></p>
</section>
<section id="idft" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="idft">IDFT</h3>
<p>由单位根的消去引理可证，DFT 矩阵 <img src="https://latex.codecogs.com/png.latex?F"> 的逆矩阵为<sup>4</sup> <img src="https://latex.codecogs.com/png.latex?%0AF%5E%7B-1%7D%20=%20%5Cfrac%201%20n%20%5Cleft(%20%5Comega_n%5E%7B-ij%7D%20%5Cright)_%7B(i,j)%20%5Cin%20n%20%5Ctimes%20n%7D%20=%20%5Cfrac%201%20n%20%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A1%20&amp;%20%5Comega_n%5E%7B-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B-(n-1)%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A1%20&amp;%20%5Comega_n%5E%7B-(n-1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B-(n-1)(n-1)%7D%0A%5Cend%7Bpmatrix%7D%0A"> 于是 IDFT 的过程可表示为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%20a%20%20=%20F%5E%7B-1%7D%20%5Chat%7B%5Cboldsymbol%20a%7D%0A"></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;这也表明适当归一化后的 DFT 矩阵是一个酉矩阵．</p></div></div><p>故快速计算 IDFT 的方法与 FFT 几乎一致，只需将计算 DFT 时使用的本原单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 替换为 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%5E%7B-1%7D"> 并对最终结果除以 <img src="https://latex.codecogs.com/png.latex?n"> 即可．</p>
</section>
<section id="梳理" class="level3">
<h3 class="anchored" data-anchor-id="梳理">梳理</h3>
<ul>
<li><p>怎么计算卷积？</p>
<ul>
<li>把至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式 <img src="https://latex.codecogs.com/png.latex?A(x)"> 和至多 <img src="https://latex.codecogs.com/png.latex?m-1"> 次的多项式 <img src="https://latex.codecogs.com/png.latex?B(x)"> 写成至多 <img src="https://latex.codecogs.com/png.latex?n+m-2"> 次的多项式（高位补 <img src="https://latex.codecogs.com/png.latex?0">）．为计算 FFT 方便，还要继续补 <img src="https://latex.codecogs.com/png.latex?0"> 至一个大于其次数的 <img src="https://latex.codecogs.com/png.latex?2"> 的幂．</li>
<li>对 <img src="https://latex.codecogs.com/png.latex?A(x)"> 和 <img src="https://latex.codecogs.com/png.latex?B(x)"> 多点求值．</li>
<li>把两个多项式的点值逐点相乘．</li>
<li>多点插值还原 <img src="https://latex.codecogs.com/png.latex?(A*B)(x)"> 的系数．</li>
</ul></li>
<li><p>怎么快速求值？</p>
<ul>
<li>选点选单位根就是 DFT．</li>
<li>消去引理和折半引理使我们可以用 FFT 算法递归地计算 DFT．</li>
<li>推导已经给出了递归的写法，之后还会介绍常数更优的迭代实现．</li>
</ul></li>
<li><p>怎么快速插值？</p>
<ul>
<li>求和引理给出了 DFT 矩阵的逆矩阵．</li>
<li>计算方法很相似，最后逐项除掉一个规模．</li>
</ul></li>
</ul>
</section>
<section id="fft-递归实现---dft-部分" class="level3">
<h3 class="anchored" data-anchor-id="fft-递归实现---dft-部分">FFT 递归实现 - DFT 部分</h3>
<p>方便起见，我们只处理 <img src="https://latex.codecogs.com/png.latex?n"> 为 <img src="https://latex.codecogs.com/png.latex?2"> 的幂的情形．以下 C 风格的代码实现了递归的 DFT 和 IDFT．</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;complex&gt;</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> complex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> ll MXN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4E6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159265358979323846</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">CP tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MXN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> _DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CP A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span>ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-8">    n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-11">    _DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> _DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-12">    CP w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)),</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))),</span> wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++){</span></span>
<span id="cb1-14">        tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>  k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]+</span>wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-15">        tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]-</span>wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-16">        wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CP A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span>ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-19">    _DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]*=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="fft-递归实现---卷积部分" class="level3">
<h3 class="anchored" data-anchor-id="fft-递归实现---卷积部分">FFT 递归实现 - 卷积部分</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// alternatively, use std::__lg() in GCC</span></span>
<span id="cb2-2">ll log2ceil<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span>ll cnt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> cnt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cnt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span> </span>
<span id="cb2-3">CP A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MXN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MXN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MXN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> ll outC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MXN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-4">ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> conv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll inA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span>ll aN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll inB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span>ll bN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-5">    ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">LL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>log2ceil<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>aN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>aN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>inA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>bN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>inB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-8">    DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-10">    DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> outC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>real<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Drawbacks?</p>
<ul>
<li>递归实现慢</li>
<li>临时数组丑</li>
<li>封装性为零</li>
</ul>
</section>
<section id="fft-迭代" class="level3">
<h3 class="anchored" data-anchor-id="fft-迭代">FFT 迭代</h3>
<p>迭代地实现 FFT 不仅在常数上更加优秀，亦更便于使用 C++ 的容器进行封装．这并不困难，只需自底向上模拟 FFT 递归过程即可．</p>
<p>唯一的问题——最底层的顺序？</p>
<p>来观察一轮 <img src="https://latex.codecogs.com/png.latex?2%5E3">-FFT 自顶向下的置换过程 <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bmatrix%7D%0A2%5E3%20&amp;%200/000%20&amp;%201/001%20&amp;%202/010%20&amp;%203/011%20&amp;%204/100%20&amp;%205/101%20&amp;%206/110%20&amp;%207/111%20%5C%5C%0A2%5E2%20&amp;%200/000%20&amp;%202/010%20&amp;%204/100%20&amp;%206/110%20&amp;%201/001%20&amp;%203/011%20&amp;%205/101%20&amp;%207/111%20%5C%5C%0A2%5E1%20&amp;%200/000%20&amp;%204/100%20&amp;%202/010%20&amp;%206/110%20&amp;%201/001%20&amp;%205/101%20&amp;%203/011%20&amp;%207/111%20%5C%5C%0A2%5E0%20&amp;%200/000%20&amp;%204/100%20&amp;%202/010%20&amp;%206/110%20&amp;%201/001%20&amp;%205/101%20&amp;%203/011%20&amp;%207/111%0A%5Cend%7Bmatrix%7D%0A"></p>
<p>你发现了什么？</p>
</section>
<section id="蝶形运算" class="level3">
<h3 class="anchored" data-anchor-id="蝶形运算">蝶形运算</h3>
<p>在计算点值前，<img src="https://latex.codecogs.com/png.latex?2%5En">-FFT 事实上完成了一次 <img src="https://latex.codecogs.com/png.latex?n">-位逆序置换．分解来看，规模为 <img src="https://latex.codecogs.com/png.latex?2%5Ek"> 的层的置换完成了对 <img src="https://latex.codecogs.com/png.latex?2%5E%7Bn-k%7D"> 对应二进制位的分类．</p>
<p>我们有 <img src="https://latex.codecogs.com/png.latex?O(n)"> 的递推方法获得这一置换．</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> spawnrev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-2">    rev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb3-4">        rev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=(</span>rev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]&gt;&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)+((</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&lt;&lt;(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="fft-迭代实现" class="level3">
<h3 class="anchored" data-anchor-id="fft-迭代实现">FFT 迭代实现</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> DFT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CP A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span>ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// rev[] should be spawned in advance</span></span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>rev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]]);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a one-to-one permutation</span></span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-4">        CP w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)),</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))),</span> wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-6">            CP wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++){</span></span>
<span id="cb4-8">                CP x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-9">                A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-10">                wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]*=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>请自行实现更易用的容器封装版本．</p>
</section>
</section>
<section id="ntt" class="level2 page-columns page-full" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="ntt"><span class="header-section-number">2.2</span> NTT</h2>
<section id="ntt-速成" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="ntt-速成">NTT 速成<sup>5</sup></h3>
<p>FFT 的缺点？浮点数带来的大常数与精度问题．</p>
<p><img src="https://latex.codecogs.com/png.latex?998244353=2%5E%7B23%7D%20%5Ctimes%207%20%5Ctimes%2017%20+%201">，同时是一个质数．</p>
<p>我们指出，在系数和点值模 <img src="https://latex.codecogs.com/png.latex?p=998244353"> 的意义下，当规模 <img src="https://latex.codecogs.com/png.latex?n%20%5Cleq%20p"> 时<sup>6</sup>，至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式仍可由其 <img src="https://latex.codecogs.com/png.latex?n"> 个点值唯一确定，故仍可使用系数-点值-系数的方法求得多项式卷积．</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;否则只有 <img src="https://latex.codecogs.com/png.latex?p"> 个不同元素的 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 中根本取不到 <img src="https://latex.codecogs.com/png.latex?n"> 个不同位置的点值．后面会深入讨论．</p></div></div><p>我们指出，对于满足 <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20p-1"> 的 <img src="https://latex.codecogs.com/png.latex?n">，依 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%20:=%203%5E%7B%5Cfrac%7Bp-1%7D%7Bn%7D%7D"> 定义的 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 在模 <img src="https://latex.codecogs.com/png.latex?p"> 意义下与复数域中定义的 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 发挥相同的作用，仍可进行规模至多为 <img src="https://latex.codecogs.com/png.latex?2%5E%7B23%7D"> 的 FFT 作为模 <img src="https://latex.codecogs.com/png.latex?p=998244353"> 意义下 NTT 的快速算法．</p>
<p>只需修改单位根定义，把复数运算改为整数取模，就得到了能算 NTT 的 FFT 的实现．</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> PR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">998244353</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-2">ll w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qpow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,(</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)/(</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>typ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</section>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;NTT 原理需较多笔墨，稍后介绍．</p></div></div><section id="fftntt-in-a-nutshell---小结概念区分" class="level3">
<h3 class="anchored" data-anchor-id="fftntt-in-a-nutshell---小结概念区分">FFT/NTT in a nutshell - 小结：概念区分</h3>
<ul>
<li><p>关于 DFT</p>
<ul>
<li>Discrete Fourier Transform, DFT, 离散傅里叶变换</li>
<li>Fast Fourier Transform, FFT, 快速傅里叶变换</li>
<li>FFT 是计算 DFT 的快速算法</li>
</ul></li>
<li><p>关于 NTT</p>
<ul>
<li>Number Theoretic Transform, NTT, 数论变换</li>
<li>FFT 在复数域上的多项式环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BC%7D%5Bx%5D"> 中进行，而 NTT 在模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_p%5Bx%5D"> 上进行</li>
<li>快速计算 DFT / IDFT, NTT 都用 FFT，故一般不使用”FNTT”的说法</li>
</ul></li>
</ul>
</section>
</section>
</section>
<section id="applications" class="level1 page-columns page-full" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Applications</h1>
<section id="基本应用" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="基本应用"><span class="header-section-number">3.1</span> 基本应用</h2>
<section id="基本应用-1" class="level3">
<h3 class="anchored" data-anchor-id="基本应用-1">基本应用</h3>
<dl>
<dt>大整数乘法</dt>
<dd>
<p>十进制数可拆解为多项式表示，计算卷积后处理进位即可．由于数字最大只是 <img src="https://latex.codecogs.com/png.latex?9">，合理数据范围下卷起来不会爆模数，直接用 NTT 实现即可．</p>
</dd>
<dt>背包计数</dt>
<dd>
<p>两个背包的合并就是多项式卷积．</p>
</dd>
<dt>滤波器</dt>
<dd>
<p>反转多项式的系数数组再做卷积，可以快速得到两个多项式滑动窗口式的内积．</p>
</dd>
<dt>位运算</dt>
<dd>
<p>有些位运算可以写成卷积的形式．模 <img src="https://latex.codecogs.com/png.latex?2"> 意义下”异或”是加法，“与”是乘法，“或”可以通过取反转化为”与”．</p>
</dd>
<dt>字符串</dt>
<dd>
<p>通过巧妙设定字符串距离函数，FFT 可解决更广泛的字符串匹配问题．</p>
</dd>
<dt>值域次数化</dt>
<dd>
<p>当值域较小时，将待计算的值放在多项式次数上统计贡献次数，可以绕开某些极难求解的数值问题．例如 Vandermonde 行列式的快速计算．</p>
</dd>
</dl>
</section>
<section id="基本应用---分治-fft" class="level3">
<h3 class="anchored" data-anchor-id="基本应用---分治-fft">基本应用 - 分治 FFT</h3>
<p>对多个长度相同的多项式的卷积，分治地卷起来可降低时间复杂度．长度不一时，挑小的先卷也可减小常数（用堆维护）．</p>
<p>另有一种 CDQ 风格的分治 FFT．CDQ 长于处理带偏序的二元点对贡献，在处理形如 <img src="https://latex.codecogs.com/png.latex?c_k%20=%20%5Csum_%7Bi%3Ej%7D%20%5Bi+j=k%5D%20a_i%20b_j"> 的带偏序卷积时可以应用．</p>
<p>当卷积的前后项存在依赖关系时，也可使用此法保证处理顺序恰当．然而此类依赖问题往往也可通过解生成函数方程的方法求得封闭形式．</p>
<p>时间复杂度均为 <img src="https://latex.codecogs.com/png.latex?%0AT(n)%20=%202%20T%20%5Cleft(%20%5Cfrac%20n%202%20%5Cright)%20+%20O(n%20%5Clog%20n)%20=%20O(n%20%5Clog%5E2%20n)%0A"></p>
</section>
</section>
<section id="生成函数初步" class="level2 page-columns page-full" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="生成函数初步"><span class="header-section-number">3.2</span> 生成函数初步</h2>
<section id="生成函数初步---导言" class="level3">
<h3 class="anchored" data-anchor-id="生成函数初步---导言">生成函数初步 - 导言</h3>
<p>生成函数是一种对数列的操作技巧．通过将数列表示为多项式或形式幂级数，数列间复杂的和式操作可用简单函数的乘法、复合等运算进行表示，从而大大降低了数列变换技巧的使用门槛．</p>
<p>生成函数在组合数学中应用广泛，且生成函数的部分操作在组合意义下也有较为直观的理解．本节将带大家初窥其中的奥妙．限于篇幅和主讲人能力，我们仅以题带点地讲解，期冀为大家建立构造生成函数的直觉．请感兴趣的同学下来做进一步研究．</p>
<p>熟悉 Taylor 展开的同学或能较快上手此部分内容．</p>
</section>
<section id="ordinary-generating-function" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="ordinary-generating-function">Ordinary Generating Function</h3>
<p>序列 <img src="https://latex.codecogs.com/png.latex?a_n"> 的普通生成函数（Ordinary Generating Function, OGF）定义为其对应的多项式（形式幂级数）<img src="https://latex.codecogs.com/png.latex?A(x)%20=%20%5Csum_%7Bn=0%7D%5E%7B+%5Cinfty%7D%20a_n%20x%5En">．这样书写的目的是为了便于进行数列间的卷积操作．特别的，Taylor 展开（或广义二项式定理）风格的 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%20%7B1-x%7D%20=%201%20+%20x%20+%20x%5E2%20+%20%5Cdots"> 也是常用技巧之一<sup>7</sup>．</p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;多项式求逆等多项式进阶操作，我们后续讲解．</p></div></div><div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-ogf-basic" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 1</strong></span> 写出下列数列的 OGF．下标从 <img src="https://latex.codecogs.com/png.latex?0"> 开始．</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?1,0,0,0%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,1,1,1,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,0,1,0,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,-1,1,-1,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,2,3,4,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,2,4,8,%5Cdots"></li>
</ul>
</div>
</div>
</div>
</div>
</section>
<section id="ogf-组合意义" class="level3">
<h3 class="anchored" data-anchor-id="ogf-组合意义">OGF 组合意义</h3>
<p>OGF 相乘，是背包，是卷积，是两块无标号组合对象的有序拼接．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-ogf-comb" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 2</strong></span> 写出下列计数问题的 OGF，均以 <img src="https://latex.codecogs.com/png.latex?n"> 作为数列的下标．</p>
<ul>
<li>在 <img src="https://latex.codecogs.com/png.latex?m"> 个物品中选出 <img src="https://latex.codecogs.com/png.latex?n"> 个的方案数．</li>
<li>容量为 <img src="https://latex.codecogs.com/png.latex?n"> 的背包装下体积分别为 <img src="https://latex.codecogs.com/png.latex?a_i"> 的 <img src="https://latex.codecogs.com/png.latex?m"> 个物品的方案数．</li>
<li>同上，但每个物品有无限个．</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> 个无标号球放入 <img src="https://latex.codecogs.com/png.latex?r"> 个有标号盒的方案数，要求盒非空．</li>
<li>同上，但盒可空．</li>
<li>将整数 <img src="https://latex.codecogs.com/png.latex?n"> 分拆为若干正整数之和的方案数．</li>
</ul>
</div>
</div>
</div>
</div>
</section>
<section id="exponential-generating-function" class="level3">
<h3 class="anchored" data-anchor-id="exponential-generating-function">Exponential Generating Function</h3>
<p>序列 <img src="https://latex.codecogs.com/png.latex?a_n"> 的指数生成函数（Exponential Generating Function, EGF）定义为 <img src="https://latex.codecogs.com/png.latex?%0AA(x)%20=%20%5Csum_%7Bn=0%7D%5E%7B+%5Cinfty%7D%20a_n%20%5Cfrac%20%7Bx%5En%7D%7Bn!%7D%0A"></p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-egf-basic" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 3</strong></span> 写出下列序列的 EGF，下标从 <img src="https://latex.codecogs.com/png.latex?0"> 开始．</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?1,0,0,0,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,1,1,1,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,2,4,8,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?0,1,0,-1,0,1,0,-1,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?1,0,-1,0,1,0,-1,0,%5Cdots"></li>
<li><img src="https://latex.codecogs.com/png.latex?0,1,-1,2!,-3!,4!,%5Cdots"></li>
</ul>
</div>
</div>
</div>
</div>
</section>
<section id="egf-组合意义" class="level3">
<h3 class="anchored" data-anchor-id="egf-组合意义">EGF 组合意义</h3>
<p>观察两个 EGF 的乘积 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA(x)%20B(x)%20&amp;=%20%5Csum_%7Bi=0%7D%5E%7B+%5Cinfty%7D%20a_i%20%5Cfrac%7Bx%5Ei%7D%7Bi!%7D%20%5Csum_%7Bj=0%7D%5E%7B+%5Cinfty%7D%20b_j%20%5Cfrac%7Bx%5Ej%7D%7Bj!%7D%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=0%7D%5E%7B+%5Cinfty%7D%20%5Csum_%7Bj=0%7D%5E%7B+%5Cinfty%7D%20a_i%20b_j%20%5Cfrac%7Bx%5E%7Bi+j%7D%7D%7Bi!%20j!%7D%20%5C%5C%0A&amp;=%20%5Csum_%7Bn=0%7D%5E%7B+%5Cinfty%7D%20%5Csum_%7Bi=0%7D%5En%20a_i%20b_%7Bn-i%7D%20%5Cfrac%7Bx%5En%7D%7Bi!%20(n-i)!%7D%20%5C%5C%0A&amp;=%20%5Csum_%7Bn=0%7D%5E%7B+%5Cinfty%7D%20%5Csum_%7Bi=0%7D%5En%20a_i%20b_%7Bn-i%7D%20%5Cbinom%20n%20i%20%5Cfrac%7Bx%5En%7D%7Bn!%7D%0A%5Cend%7Baligned%7D%0A"> EGF 的乘积，相当于两块有标号组合对象的有序拼接．</p>
</section>
<section id="egf-组合意义-1" class="level3">
<h3 class="anchored" data-anchor-id="egf-组合意义-1">EGF 组合意义</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0AA(x)%20B(x)%20=%20%5Csum_%7Bi=0%7D%5E%7B+%5Cinfty%7D%20a_i%20%5Cfrac%7Bx%5Ei%7D%7Bi!%7D%20%5Csum_%7Bj=0%7D%5E%7B+%5Cinfty%7D%20b_j%20%5Cfrac%7Bx%5Ej%7D%7Bj!%7D%0A=%20%5Csum_%7Bn=0%7D%5E%7B+%5Cinfty%7D%20%5Csum_%7Bi=0%7D%5En%20a_i%20b_%7Bn-i%7D%20%5Cbinom%20n%20i%20%5Cfrac%7Bx%5En%7D%7Bn!%7D"></p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-egf-comb" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 4</strong></span> 写出下列计数问题的 EGF，均以 <img src="https://latex.codecogs.com/png.latex?n"> 作为数列的下标．</p>
<ul>
<li>长度为 <img src="https://latex.codecogs.com/png.latex?n"> 的排列的构型数．</li>
<li>长度为 <img src="https://latex.codecogs.com/png.latex?n"> 的圆排列的构型数．</li>
<li>将 <img src="https://latex.codecogs.com/png.latex?n"> 个有标号球放入 <img src="https://latex.codecogs.com/png.latex?r"> 个有标号盒的方案数，要求盒非空．</li>
<li>将 <img src="https://latex.codecogs.com/png.latex?n"> 个有标号球放入 <img src="https://latex.codecogs.com/png.latex?r"> 个无标号盒的方案数，要求盒非空．</li>
<li>将 <img src="https://latex.codecogs.com/png.latex?n"> 元集合划分为 <img src="https://latex.codecogs.com/png.latex?r"> 个等价类的方案数．</li>
<li>划分 <img src="https://latex.codecogs.com/png.latex?n"> 元集合的方案数．</li>
</ul>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="mathematics-behind" class="level1 page-columns page-full" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Mathematics behind</h1>
<section id="ntt-原理" class="level2 page-columns page-full" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="ntt-原理"><span class="header-section-number">4.1</span> NTT 原理</h2>
<section id="ntt-原理---导言" class="level3">
<h3 class="anchored" data-anchor-id="ntt-原理---导言">NTT 原理 - 导言</h3>
<p>本节介绍 NTT 的原理．</p>
<p>FFT 加速卷积算法的核心，一是多项式的求值插值原理，二是单位根带来的分治快速算法．我们将在本节中证明，模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 中，只要 <img src="https://latex.codecogs.com/png.latex?n%20%5Cleq%20p">，仍可通过 <img src="https://latex.codecogs.com/png.latex?n"> 个点值唯一确定至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上的多项式，这保证了系数-点值-系数方法的正确性；此外，基于原根构造出的 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上的本原单位根，使得使用与 FFT 相同的分治算法加速 NTT 的计算成为可能．</p>
<p>NTT 原理涉及原根等数论内容．本讲的目标是建立 DFT 变换和 FFT 算法的通用数学框架，而非具体研究其某一特例．故我们只讲解 NTT 所需的基础数论知识，无关的细节则略过处理．对数论感兴趣的同学可前往 OI Wiki 学习．</p>
</section>
<section id="模-p-剩余类域-mathbb-z_p" class="level3">
<h3 class="anchored" data-anchor-id="模-p-剩余类域-mathbb-z_p">模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"></h3>
<p><em>模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域</em> <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 是刻画取模运算下整数加法、乘法运算规律的代数结构，其良定义性由 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0A%20%20%20%20a_1%20%5Cequiv%20a_2%20%5Cpmod%7Bp%7D%20%5C%5C%0A%20%20%20%20b_1%20%5Cequiv%20b_2%20%5Cpmod%7Bp%7D%0A%5Cend%7Bcases%7D%0A%20%20%5Cimplies%0A%5Cbegin%7Bcases%7D%0A%20%20%20%20a_1%20+%20b_1%20%5Cequiv%20a_2%20+%20b_2%20%5Cpmod%7Bp%7D%20%5C%5C%0A%20%20%20%20a_1%20b_1%20%5Cequiv%20a_2%20b_2%20%5Cpmod%7Bp%7D%0A%5Cend%7Bcases%7D%0A"> 保证．</p>
<p>模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域的最大特点是其中每个元素都存在（唯一）逆元．这一点是数论中 Bézout 定理的直接应用．</p>
<p>模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域的另一优良性质是其满足消去律，即 <img src="https://latex.codecogs.com/png.latex?%0Aab%20%5Cequiv%200%20%5Cpmod%20p%20%5Cimplies%20a%20%5Cequiv%200%20%5Clor%20b%20%5Cequiv%200%20%5Cpmod%20p%0A"> 而模一般的数 <img src="https://latex.codecogs.com/png.latex?m"> 形成的代数结构则不满足此性质．</p>
</section>
<section id="mathbb-z_px-上的多点插值" class="level3">
<h3 class="anchored" data-anchor-id="mathbb-z_px-上的多点插值"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 上的多点插值</h3>
<p>之后记系数均在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上的多项式组成的集合为 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D">．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="lem-zp-remainder" class="theorem lemma">
<p><span class="theorem-title"><strong>引理 1 (<img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%20%5Clbrack%20x%20%5Crbrack"> 上的多项式余式定理)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?A(x)%20%5Cin%20%5Cmathbb%20Z_p%5Bx%5D">，用 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 中的一次多项式 <img src="https://latex.codecogs.com/png.latex?(x-a)"> 对 <img src="https://latex.codecogs.com/png.latex?A(x)"> 进行带余除法，得到的余式为至多零次的多项式 <img src="https://latex.codecogs.com/png.latex?A(a)">．</p>
</div>
</div>
</div>
</div>
</section>
<section id="mathbb-z_px-上的多点插值-1" class="level3">
<h3 class="anchored" data-anchor-id="mathbb-z_px-上的多点插值-1"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 上的多点插值</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-lagrange" class="theorem">
<p><span class="theorem-title"><strong>定理 4 (Lagrange 定理)</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?p"> 是一个质数，设 <img src="https://latex.codecogs.com/png.latex?A(x)%20%5Cin%20%5Cmathbb%20Z_p%5Bx%5D">．同余方程 <img src="https://latex.codecogs.com/png.latex?A(x)%20%5Cequiv%200%20%5Cpmod%7Bp%7D"> 只有至多 <img src="https://latex.codecogs.com/png.latex?%5Cdeg%20A(x)"> 个模 <img src="https://latex.codecogs.com/png.latex?p"> 意义下不同的整数解，除非这多项式的系数全为零．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="cor-lagrange-equal" class="theorem corollary">
<p><span class="theorem-title"><strong>推论 1</strong></span> 设 <img src="https://latex.codecogs.com/png.latex?A(x),B(x)%20%5Cin%20%5Cmathbb%20Z_p%5Bx%5D"> 是至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的两个多项式．若同余方程 <img src="https://latex.codecogs.com/png.latex?A(x)%20%5Cequiv%20B(x)%20%5Cpmod%7Bp%7D"> 有 <img src="https://latex.codecogs.com/png.latex?n"> 个不同的模 <img src="https://latex.codecogs.com/png.latex?p"> 意义下的整数解，则两多项式一定相等．</p>
</div>
</div>
</div>
</div>
<p>推论告诉我们，欲确定 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上的一个至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式，只需找到其 <img src="https://latex.codecogs.com/png.latex?n"> 个模 <img src="https://latex.codecogs.com/png.latex?p"> 意义下的点值即可．因此，使用系数 - 点值 - 系数方法加速 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 上的卷积是可行的．</p>
</section>
<section id="本原单位根" class="level3">
<h3 class="anchored" data-anchor-id="本原单位根">本<strong>原</strong>单位<strong>根</strong></h3>
<p>回顾 DFT 中复数域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 上单位根的定义 <img src="https://latex.codecogs.com/png.latex?%0A%5Comega_n%5Ek%20:=%20e%5E%7B%5Cfrac%20%7B2%20%5Cpi%20k%7D%7Bn%7D%20i%7D%20=%20%5Ccos%20%5Cfrac%7B2%20%5Cpi%20k%7D%7Bn%7D%20+%20i%20%5Csin%20%5Cfrac%7B2%20%5Cpi%20k%7D%7Bn%7D,%5Cquad%20k%20%5Cin%20%5Bn%5D%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 是最重要的单位根，因为它生成了所有其它的单位根．</p>
<p>事实上所有的 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%5E%7Bk%7D%20:%20%5Cgcd(n,k)=1"> 也都是重要的，它们的 <img src="https://latex.codecogs.com/png.latex?0"> 至 <img src="https://latex.codecogs.com/png.latex?n-1"> 次方也能生成所有的单位根．这也是数论中 Bézout 定理的直接应用．</p>
<p>我们把这一类重要的单位根称为<em>本原单位根</em>．抽象的来说，<img src="https://latex.codecogs.com/png.latex?n"> 次本原单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 可定义如下 <img src="https://latex.codecogs.com/png.latex?%0A%5Comega_n%5En%20=%201;%5Cquad%20%5Comega_n%5Ek%20%5Cneq%201,%5Cquad%20k=1,2,%5Cdots,n-1%0A"></p>
</section>
<section id="mathbb-z_m-上的阶" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="mathbb-z_m-上的阶"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的阶</h3>
<p>如何定义 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的“本原单位根”呢？</p>
<p>称在模 <img src="https://latex.codecogs.com/png.latex?m"> 意义下使得 <img src="https://latex.codecogs.com/png.latex?a%5En=1"> 的最小正整数 <img src="https://latex.codecogs.com/png.latex?n"> 为 <img src="https://latex.codecogs.com/png.latex?a"> 的<em>阶</em>，记为 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D_m(a)">．在不至混淆的情况下，也简记为 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D(a)">．</p>
<ul>
<li>阶最高有多高？</li>
</ul>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-fermat" class="theorem">
<p><span class="theorem-title"><strong>定理 5 (Fermat 小定理)</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?p"> 是质数，<img src="https://latex.codecogs.com/png.latex?a"> 是非零数，则 <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D">．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-euler" class="theorem">
<p><span class="theorem-title"><strong>定理 6 (Euler 定理)</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,m)=1">，则 <img src="https://latex.codecogs.com/png.latex?a%5E%7B%5Cvarphi(m)%7D%20%5Cequiv%201%20%5Cpmod%7Bm%7D">，其中 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)"> 是数论中的 Euler 函数<sup>8</sup>．</p>
</div>
</div>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;对质数 <img src="https://latex.codecogs.com/png.latex?p">，<img src="https://latex.codecogs.com/png.latex?%5Cvarphi(p)=p-1">．故 Euler 定理是 Fermat 小定理的一个推广．</p></div></div></section>
<section id="euler-定理的证明---简化剩余系" class="level3">
<h3 class="anchored" data-anchor-id="euler-定理的证明---简化剩余系">Euler 定理的证明 - 简化剩余系</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m%5ER%20:=%20%5C%7Ba%20%5Cin%20%5Cmathbb%20Z_m:%20%5Cgcd(a,m)=1%20%5C%7D"> 被称为 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 的<em>简化剩余系</em>．简化剩余系对模 <img src="https://latex.codecogs.com/png.latex?m"> 乘法封闭．简化剩余系中的每个元素都具有模 <img src="https://latex.codecogs.com/png.latex?m"> 意义下的唯一逆元，且其也在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m%5ER"> 中．此二性质易由 <img src="https://latex.codecogs.com/png.latex?%5Cgcd"> 的线性组合意义证明．</p>
<p>简化剩余系的大小即 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)">．这是 Euler 函数的其中一种定义．</p>
<p>设 <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Cmathbb%20Z_m%5ER">，其在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 中存在逆元，故我们有 <img src="https://latex.codecogs.com/png.latex?%0A%5Cforall%20x,y%20%5Cin%20%5Cmathbb%20Z_m,%5Cquad%20x%20%5Cequiv%20y%20%5Cpmod%7Bm%7D%20%5Ciff%20ax%20%5Cequiv%20ay%20%5Cpmod%7Bm%7D%0A"> 当限定 <img src="https://latex.codecogs.com/png.latex?x,y%20%5Cin%20%5Cmathbb%20Z_m%5ER"> 时，结合 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m%5ER"> 上述两个性质，就有 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20Z_m%5ER%20=%20a%20%5Cmathbb%20Z_m%5ER%20=%20%5C%7B%20ax%20%5Cbmod%20m%20:%20x%20%5Cin%20%5Cmathbb%20Z_m%5ER%20%5C%7D%0A"> 故 <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B%5Cvarphi(m)%7D%20%5Cprod_%7Bx%20%5Cin%20%5Cmathbb%20Z_m%5ER%7D%20x%20%5Cequiv%20%5Cprod_%7Bx%20%5Cin%20%5Cmathbb%20Z_m%5ER%7D%20ax%20%5Cequiv%20%5Cprod_%7Bx%20%5Cin%20a%20%5Cmathbb%20Z_m%5ER%7D%20x%20%5Cequiv%20%5Cprod_%7Bx%20%5Cin%20%5Cmathbb%20Z_m%5ER%7D%20x%20%5Cimplies%20a%5E%7B%5Cvarphi(m)%7D%20%5Cequiv%201%20%5Cpmod%7Bm%7D%0A"></p>
</section>
<section id="an-的取值---a-m-互质时" class="level3">
<h3 class="anchored" data-anchor-id="an-的取值---a-m-互质时"><img src="https://latex.codecogs.com/png.latex?a%5En"> 的取值 - <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?m"> 互质时</h3>
<p>补充讨论 <img src="https://latex.codecogs.com/png.latex?a%5En%20%5Cbmod%20m,%5C,%20n%20%5Cin%20%5Cmathbb%20Z_%7B+%7D"> 可取得哪些 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 中的元素．</p>
<p>当 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,m)=1"> 时，用 <img src="https://latex.codecogs.com/png.latex?%5Cgcd"> 的线性组合含义，有 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cgcd(a,m)=1%20&amp;%5Cimplies%20%5Cexists%20x_0,%5Cquad%20a%20x_0%20=%201%20%5Cpmod%7Bm%7D%20%5C%5C%0A&amp;%5Cimplies%20%5Cexists%20x_0,%5Cquad%20a%5En%20x_0%5En%20=%201%20%5Cpmod%7Bm%7D%20%5C%5C%0A&amp;%5Cimplies%20%5Cgcd(a%5En,m)=1%0A%5Cend%7Baligned%7D%0A"> 故此时 <img src="https://latex.codecogs.com/png.latex?a%5En%20%5Cbmod%20m"> 只可能取得 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 的简化剩余系 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m%5ER"> 中的元素．</p>
</section>
<section id="an-的取值---一般情况" class="level3">
<h3 class="anchored" data-anchor-id="an-的取值---一般情况"><img src="https://latex.codecogs.com/png.latex?a%5En"> 的取值 - 一般情况<sup>9</sup></h3>
<p>当 <img src="https://latex.codecogs.com/png.latex?d_1%20=%20%5Cgcd(a,m)%20%5Cneq%201"> 时，设 <img src="https://latex.codecogs.com/png.latex?a%20=%20d_1%20a_1,%5C,%20m%20=%20d_1%20m_1">，当 <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%201"> 时， <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aa%5En%20%5Cbmod%20m%20&amp;=%20d_1%20a_1%20a%5E%7Bn-1%7D%20%5Cbmod%20d_1%20m_1%20=%20d_1%20%5Cleft(%20a_1%20a%5E%7Bn-1%7D%20%5Cbmod%20m_1%20%5Cright)%0A%5Cend%7Baligned%7D"> 此时 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a_1,m_1)=1">，根据线性同余方程理论，括号内表达式的取值集合仅与 <img src="https://latex.codecogs.com/png.latex?a%5E%7Bn-1%7D%20%5Cbmod%20m_1"> 有关．此时若 <img src="https://latex.codecogs.com/png.latex?d_2%20=%20%5Cgcd(a,m_1)"> 仍不等于 <img src="https://latex.codecogs.com/png.latex?1">，则令 <img src="https://latex.codecogs.com/png.latex?a_1%20=%20d_2%20a_2,%5C,%20m_1%20=%20d_2%20m_2">．类似地继续化归，最终有 <img src="https://latex.codecogs.com/png.latex?d_%7Bk+1%7D%20=%20%5Cgcd(a,m_k)%20=%201">， <img src="https://latex.codecogs.com/png.latex?%0Aa%5En%20%5Cbmod%20m%20=%20d_1%20%5Cleft(%20a_1%20d_2%20%5Cleft(%20%5Cdots%20a_%7Bk-1%7D%20d_k%20(a_k%20a%5E%7Bn-k%7D%20%5Cbmod%20m_k)%20%5Cdots%20%5Cright)%20%5Cbmod%20m_1%20%5Cright)%0A"> 故当 <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%20k"> 时，<img src="https://latex.codecogs.com/png.latex?a%5En%20%5Cbmod%20m"> 的取值集合为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5C%7B%20d_1%20d_2%20%5Cdots%20d_k%20(a%5Et%20%5Cbmod%20m_k)%20:%20t%20%5Cin%20%5Cmathbb%20Z_+%20%5Cright%5C%7D%20%5Csubset%20d_1%20d_2%20%5Cdots%20d_k%20%5Cmathbb%20Z_%7Bm_k%7D%5ER%0A"> 事实上，<img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bi=1%7D%5Ek%20d_i"> 恰为 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,m)"> 的各素因子在 <img src="https://latex.codecogs.com/png.latex?m"> 中全部成分的乘积．</p>
</section>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;ExBSGS 求解离散对数 <span class="citation" data-cites="oiwiki-discretelog">[5]</span> 的推导与此相似．</p></div><div id="fn10"><p><sup>10</sup>&nbsp;部分证明稍复杂，我们略过处理．感兴趣的同学请参考 OI Wiki <span class="citation" data-cites="oiwiki-pr">[6]</span>．</p></div></div><section id="原根" class="level3">
<h3 class="anchored" data-anchor-id="原根">原根<sup>10</sup></h3>
<p>需要注意的是，Euler 定理只给出了 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上元素阶的一个上界．换言之，其说明 <img src="https://latex.codecogs.com/png.latex?%0A%5Cforall%20a%20%5Cin%20%5Cmathbb%20Z_m%5ER%20%5Cimplies%20%5Coperatorname%7Bord%7D_m(a)%20%5Cmid%20%5Cvarphi(m)%0A"> 而对于那些使得 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,m)%20%5Cneq%201"> 的元素 <img src="https://latex.codecogs.com/png.latex?a">，用 <img src="https://latex.codecogs.com/png.latex?%5Cgcd"> 的线性组合性质容易证明其永远不可能通过自乘变为 <img src="https://latex.codecogs.com/png.latex?1">．我们设定这类元素的阶为 <img src="https://latex.codecogs.com/png.latex?0">．</p>
<p>称 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上那些确能达到阶数上界 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)"> 的元素是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的<em>原根</em>，用符号 <img src="https://latex.codecogs.com/png.latex?g"> 表示．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-pr-exist" class="theorem">
<p><span class="theorem-title"><strong>定理 7 (原根存在定理)</strong></span> <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上存在原根，当且仅当 <img src="https://latex.codecogs.com/png.latex?m=2,4,p%5E%7B%5Calpha%7D,2p%5E%7B%5Calpha%7D"> ，其中 <img src="https://latex.codecogs.com/png.latex?p"> 是一奇质数．</p>
</div>
</div>
</div>
</div>
</section>
<section id="求阶和原根" class="level3">
<h3 class="anchored" data-anchor-id="求阶和原根">求阶和原根</h3>
<ul>
<li>求阶，用定理 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D_m(a)%20%5Cmid%20%5Cvarphi(m)">，求因子 + 快速幂即可 <img src="https://latex.codecogs.com/png.latex?O(%5Csqrt%20m%20%5Clog%20m)">．</li>
<li>找原根，从小到大用上述求阶方法暴力即可．最小原根一般不会太大．</li>
<li>更快的方法请参考洛谷求原根模板题题解．</li>
</ul>
<p>下面再介绍原根的两个定理．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-pr-check" class="theorem">
<p><span class="theorem-title"><strong>定理 8 (原根判定定理)</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(g,m)=1">，则 <img src="https://latex.codecogs.com/png.latex?g"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上原根的充要条件是，对 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)"> 的每个素因数 <img src="https://latex.codecogs.com/png.latex?p">，都有 <img src="https://latex.codecogs.com/png.latex?g%5E%7B%5Cfrac%7B%5Cvarphi(m)%7D%7Bp%7D%7D%5Cnot%5Cequiv%201%5Cpmod%20m">.</p>
</div>
</div>
</div>
</div>
<p>必要性显然．充分性，反证出所有 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(m)"> 的非平凡因子均不是 <img src="https://latex.codecogs.com/png.latex?g"> 的阶即可．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-pr-num" class="theorem">
<p><span class="theorem-title"><strong>定理 9 (原根个数定理)</strong></span> 若 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上存在原根，则它原根的个数为 <img src="https://latex.codecogs.com/png.latex?%5Cvarphi(%5Cvarphi(m))">.</p>
</div>
</div>
</div>
</div>
</section>
<section id="mathbb-z_m-上的本原单位根构造" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="mathbb-z_m-上的本原单位根构造"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的本原单位根构造</h3>
<p>设 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上一元素，当 <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20%5Coperatorname%7Bord%7D_m(a)">，令 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%20=%20a%5E%7B%5Cfrac%7B%5Coperatorname%7Bord%7D_m(a)%7D%7Bn%7D%7D">，容易发现 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 就是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 次本原单位根．</p>
<p>使用数论中 Bézout 定理，<strong><img src="https://latex.codecogs.com/png.latex?%5Comega_n%5Ek"> 是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20n%20%7B%5Cgcd(n,k)%7D"> 次本原单位根</strong>．这是 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上本原单位根的<strong>消去引理</strong>．</p>
<p>遗憾的是，<strong>一般的 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 中，本原单位根不一定满足求和引理</strong><sup>11</sup> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%20n%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_%7Bn%7D%5E%7Bik%7D%20=%20%5Bn%20%5Cmid%20i%5D">．这是因为，求和引理的证明中使用了等比数列求和和消去律，但<strong>一般的 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 中消去律并不成立</strong>．</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;这是后文所述定理“整环上的本原单位根也是主要单位根”在一般环上的一个反例．</p></div></div></section>
<section id="mathbb-z_m-上的-ntt---m-是质数" class="level3">
<h3 class="anchored" data-anchor-id="mathbb-z_m-上的-ntt---m-是质数"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的 NTT - <img src="https://latex.codecogs.com/png.latex?m"> 是质数</h3>
<p>求和引理是保障 NTT 逆变换对应矩阵确为 <img src="https://latex.codecogs.com/png.latex?n%5E%7B-1%7D%20%5Cbegin%7Bpmatrix%7D%20%5Comega_n%5E%7B-ij%7D%20%5Cend%7Bpmatrix%7D_%7B(i,j)%5Cin%20n%20%5Ctimes%20n%7D"> 的关键性质．如果我们还想保留这一点，就必须要求 <img src="https://latex.codecogs.com/png.latex?m"> 是质数．</p>
<p>为保证 <img src="https://latex.codecogs.com/png.latex?n"> 在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 中存在逆元，必须要求 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(n,m)=1">．已经要求 <img src="https://latex.codecogs.com/png.latex?m"> 是质数，故无需做出额外要求．</p>
<p>综上，<strong>逆变换矩阵确为 <img src="https://latex.codecogs.com/png.latex?n%5E%7B-1%7D%20%5Cbegin%7Bpmatrix%7D%20%5Comega_n%5E%7B-ij%7D%20%5Cend%7Bpmatrix%7D_%7B(i,j)%5Cin%20n%20%5Ctimes%20n%7D"> 的 <img src="https://latex.codecogs.com/png.latex?n"> 点 NTT 要求 <img src="https://latex.codecogs.com/png.latex?m"> 是质数，且 <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20%5Coperatorname%7Bord%7D_m(a)"></strong>．已经要求 <img src="https://latex.codecogs.com/png.latex?m"> 是质数，故 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 中必存在原根，不妨直接取 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 的一个原根 <img src="https://latex.codecogs.com/png.latex?g"> 构造 <img src="https://latex.codecogs.com/png.latex?n"> 次本原单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%20=%20g%5E%7B%5Cfrac%7B%5Cvarphi(m)%7D%7Bn%7D%7D%20=%20g%5E%7B%5Cfrac%7Bm-1%7D%7Bn%7D%7D">，这样的构造支持至多 <img src="https://latex.codecogs.com/png.latex?m-1"> 次单位根的存在，显然是最优的选择．</p>
</section>
<section id="mathbb-z_m-上的-fft-与卷积加速---998244353" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="mathbb-z_m-上的-fft-与卷积加速---998244353"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的 FFT 与卷积加速 - 998244353</h3>
<p>为满足 FFT 对 <img src="https://latex.codecogs.com/png.latex?2%5Em"> 次本原单位根的需求，只需选择 <img src="https://latex.codecogs.com/png.latex?p%20=%20k%202%5Em%20+%201"> 型的奇质数 <img src="https://latex.codecogs.com/png.latex?p">，就可以在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上支持规模至多为 <img src="https://latex.codecogs.com/png.latex?2%5Em"> 的 NTT/FFT 及其逆变换运行．</p>
<p><img src="https://latex.codecogs.com/png.latex?998244353=2%5E%7B23%7D%20%5Ctimes%207%20%5Ctimes%2017%20+%201">，同时是一个质数，在 <code>int</code> 型中的单次加减操作不会溢出，是 OI/XCPC 计数题中不可多得的优秀模数<sup>12</sup>．</p>
<div class="no-row-height column-margin column-container"><div id="fn12"><p><sup>12</sup>&nbsp;网传此模数由 UOJ 站长 vfleaking 提出并推广．在所有需要取模的题目中使用该模数，可使选手无法通过模数判断题目的做法．</p></div></div><p>结合前述关于 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 上多点插值的讨论，通过 NTT/FFT 加速卷积运算的正确性得到完整证明．</p>
</section>
<section id="mathbb-z_m-上的-ntt---对一般的-m" class="level3">
<h3 class="anchored" data-anchor-id="mathbb-z_m-上的-ntt---对一般的-m"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的 NTT - 对一般的 <img src="https://latex.codecogs.com/png.latex?m"></h3>
<p>当 <img src="https://latex.codecogs.com/png.latex?m"> 不一定是质数时，NTT 逆变换不能表示为 <img src="https://latex.codecogs.com/png.latex?n%5E%7B-1%7D%20%5Cbegin%7Bpmatrix%7D%20%5Comega_n%5E%7B-ij%7D%20%5Cend%7Bpmatrix%7D_%7B(i,j)%5Cin%20n%20%5Ctimes%20n%7D"> 的形式．但这并不代表 NTT 不可逆．因此，尽管不再实用，一般 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的 NTT 变换仍有讨论价值，即研究 <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bpmatrix%7D%20%5Comega_n%5E%7Bij%7D%20%5Cend%7Bpmatrix%7D_%7B(i,j)%5Cin%20n%20%5Ctimes%20n%7D"> 的可逆性．</p>
<p>我们找到一篇有关该问题的参考文献<span class="citation" data-cites="agarwal1974fast">[7, section 3 and appendix B]</span>，但尚不确定其证明的正确性．友情提示读者：<img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 不是域，甚至不是整环，故线性空间中矩阵的性质不能直接应用于 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_m"> 上的矩阵，讨论可逆性时还需小心谨慎．</p>
</section>
<section id="从分析到代数" class="level3">
<h3 class="anchored" data-anchor-id="从分析到代数">从分析到代数</h3>
<p>后续数学内容导读 NTT 原理虽已非常”数学”，但也只是 DFT 在有限域上的一个实例．本节往后，我们要尝试为多项式系数位于复数域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 上的 DFT、位于模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上的 NTT 及它们的快速算法 FFT 建立一个统一的数学框架．这需要我们剖析求值插值的基本原理，提炼出 FFT 算法成立的根本要求．</p>
<p>后续数学内容不再要求掌握．望同学们在纷繁的定理定义中抓住要旨，窥见抽象数学背后蕴藏的规律．熟悉高等代数和抽象代数的同学或会对某些内容感到熟悉．抽象地讨论 FFT 的资料并不多见，后续内容多为主讲人的新进探索，或有谬误，望不吝指正．</p>
</section>
</section>
<section id="求值与插值" class="level2 page-columns page-full" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="求值与插值"><span class="header-section-number">4.2</span> 求值与插值</h2>
<section id="求值与插值---导言" class="level3">
<h3 class="anchored" data-anchor-id="求值与插值---导言">求值与插值 - 导言</h3>
<p>本节将重新审视已经熟知的多项式，把抽象的、代数的多项式和具体的、分析的多项式函数区分开来．我们指出，多项式和多项式函数不同但关联紧密，形式幂级数与幂级数亦有此类联系．这些抽象的讨论将帮助我们剖析多项式求值插值的基本原理．</p>
<p>除常见代数书目（如<span class="citation" data-cites="qiu-algebra">[8]</span>），也推荐参考 OI Wiki 的多项式基础<span class="citation" data-cites="oiwiki-polynomial">[9]</span>和 Wikipedia 的形式幂级数<span class="citation" data-cites="wikipedia-formalpowerseries">[10]</span>．</p>
</section>
<section id="多项式" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="多项式">多项式</h3>
<p>设（无穷）序列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_n%20%5C%7D"> 是一个只有有限个非零项的序列，其元素均在环 <img src="https://latex.codecogs.com/png.latex?R"> 上．环 <img src="https://latex.codecogs.com/png.latex?R"> 上的<em>多项式环</em><sup>13</sup> <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"> 是所有满足上述条件的序列构成的集合以及在它们之间定义的两种运算 <img src="https://latex.codecogs.com/png.latex?+,%20%5Ctimes"> 的合称．此语境下，我们也将构成 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"> 的序列称为 <img src="https://latex.codecogs.com/png.latex?R"> 上的<em>多项式</em>．序列中的元素被称为多项式的系数．<strong>序列间定义的加法和乘法是普通序列升级为多项式的关键．</strong></p>
<div class="no-row-height column-margin column-container"><div id="fn13"><p><sup>13</sup>&nbsp;一般语境下讨论的多项式环是在域上的 <img src="https://latex.codecogs.com/png.latex?K%5Bx%5D">，而非环上的 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D">．</p></div></div><p>多项式环上的加法、乘法的定义已经为大家所熟知．系数所处的环保证了多项式加法和乘法的良定义，而在这两种运算下，<img src="https://latex.codecogs.com/png.latex?R"> 上多项式的集合也构成一个环的结构．</p>
<div class="proof remark page-columns page-full">
<p><span class="proof-title"><em>注记</em> (群、环、域). </span>群、环、域都是常见的代数结构，其中的元素在给定运算下封闭，并满足特定的运算性质．简单来说，环<sup>14</sup>上定义了加法和可能不可逆的、不一定交换的乘法，域上定义了加减乘除所有四则运算．交换环中的乘法满足交换律．除环中的所有元素有乘法逆元．域是交换除环．</p>
<div class="no-row-height column-margin column-container"><div id="fn14"><p><sup>14</sup>&nbsp;本篇中环的定义包含乘法单位元，即幺环．</p></div></div></div>
</section>
<section id="多项式-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="多项式-1">多项式</h3>
<p>习惯上也会将多项式 <img src="https://latex.codecogs.com/png.latex?A"> 写为 <img src="https://latex.codecogs.com/png.latex?A(x)%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_k%20x%5Ek"> 的形式．其中未定元 <img src="https://latex.codecogs.com/png.latex?x"> 只是一个符号，仅为方便加、乘法的理解而使用，并无任何含义．</p>
<p>多项式 <img src="https://latex.codecogs.com/png.latex?A"> 的<em>次数</em> <img src="https://latex.codecogs.com/png.latex?%5Cdeg%20A"> 定义为其最高非零项所处的位置下标．特别的，定义零多项式的次数为 <img src="https://latex.codecogs.com/png.latex?-%5Cinfty">．对任意多项式 <img src="https://latex.codecogs.com/png.latex?A,B%20%5Cin%20R%5Bx%5D">，<img src="https://latex.codecogs.com/png.latex?%5Cdeg(A+B)%20%5Cleq%20%5Cmax%5C%7B%20%5Cdeg%20A,%20%5Cdeg%20B%20%5C%7D">．当 <img src="https://latex.codecogs.com/png.latex?R"> 是整环<sup>15</sup>时，<img src="https://latex.codecogs.com/png.latex?A,B"> 的首项乘积非零，故 <img src="https://latex.codecogs.com/png.latex?%5Cdeg(A*B)%20=%20%5Cdeg%20A%20+%20%5Cdeg%20B">．</p>
<div class="no-row-height column-margin column-container"><div id="fn15"><p><sup>15</sup>&nbsp;无零因子的交换幺环，稍后介绍．</p></div></div><p>下面额外为多项式定义一种新的运算．多项式 <img src="https://latex.codecogs.com/png.latex?A"> 和多项式 <img src="https://latex.codecogs.com/png.latex?B"> 的<em>复合</em> <img src="https://latex.codecogs.com/png.latex?A%20%5Ccirc%20B"> 定义为 <img src="https://latex.codecogs.com/png.latex?%0AA%20%5Ccirc%20B%20:=%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20a_k%20B%5Ek%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?B%5Ek"> 代表 <img src="https://latex.codecogs.com/png.latex?k"> 个多项式 <img src="https://latex.codecogs.com/png.latex?B"> 的乘积．习惯上也会将多项式 <img src="https://latex.codecogs.com/png.latex?A"> 和多项式 <img src="https://latex.codecogs.com/png.latex?B"> 的复合写为 <img src="https://latex.codecogs.com/png.latex?A(B(x))%20=%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20a_k%20B%5Ek(x)"> 的形式．由于多项式的次数有限，复合运算中仅包含了有限次多项式加法和乘法．</p>
</section>
<section id="形式幂级数" class="level3">
<h3 class="anchored" data-anchor-id="形式幂级数">形式幂级数</h3>
<p><em>形式幂级数</em>定义与多项式的唯一区别是其不要求 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_n%20%5C%7D"> 只有有限项非零．类似的，<img src="https://latex.codecogs.com/png.latex?R"> 上的形式幂级数环记为 <img src="https://latex.codecogs.com/png.latex?R%5B%5Bx%5D%5D">．</p>
<p>由于涉及无限次运算，形式幂级数的复合运算需考虑环 <img src="https://latex.codecogs.com/png.latex?R"> 上的收敛问题．为回避此问题，一般规定复合右侧函数的常数项须为零．</p>
<div class="proof remark">
<p><span class="proof-title"><em>注记</em>. </span>DFT, NTT 与多项式环 DFT/FFT 加速的多项式卷积在复数域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 上的多项式环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5Bx%5D"> 中进行，NTT/FFT 加速的多项式卷积在模 <img src="https://latex.codecogs.com/png.latex?p"> 剩余类域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p"> 上的多项式环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 中进行．</p>
</div>
</section>
<section id="带余除法" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="带余除法">带余除法</h3>
<p><em>整环</em>是无零因子的交换幺环．所谓无零因子，即环中任意元素 <img src="https://latex.codecogs.com/png.latex?a,b"> 满足 <img src="https://latex.codecogs.com/png.latex?ab%20=%200%20%5Cimplies%20a=0%20%5Clor%20b=0">．所有域都是整环．当 <img src="https://latex.codecogs.com/png.latex?R"> 是整环时，<img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"> 也是整环<sup>16</sup>．整环上可以定义整除相关理论．</p>
<div class="no-row-height column-margin column-container"><div id="fn16"><p><sup>16</sup>&nbsp;可用前述多项式乘积次数公式证明．</p></div><div id="fn17"><p><sup>17</sup>&nbsp;试试在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z%5Bx%5D"> 上用 <img src="https://latex.codecogs.com/png.latex?2x+1"> 去除 <img src="https://latex.codecogs.com/png.latex?x+1">．</p></div></div><p>定义有带余除法的环被称为 <em>Euclid 整环</em>．域上的多项式环都是 Euclid 整环<span class="citation" data-cites="qiu-algebra">[8, 第 7 章第 2 节定理 3, p.&nbsp;11]</span>．值得注意的是，<img src="https://latex.codecogs.com/png.latex?R"> 的 Euclid 性不可传递至 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"><sup>17</sup>．</p>
<p>如在带余除法中保证除式是首一多项式<sup>18</sup>，则带余除法的良定义和进行过程也均可在整环上实现．</p>
<div class="no-row-height column-margin column-container"><div id="fn18"><p><sup>18</sup>&nbsp;首项为 <img src="https://latex.codecogs.com/png.latex?1"> 的多项式．</p></div></div></section>
<section id="多项式函数-幂级数" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="多项式函数-幂级数">多项式函数 / 幂级数</h3>
<p>刚刚强调，多项式 / 形式幂级数只是定义了加法和乘法的序列．现在介绍多项式函数和幂级数．它们不是序列，而是映射<sup>19</sup>．</p>
<div class="no-row-height column-margin column-container"><div id="fn19"><p><sup>19</sup>&nbsp;函数和映射几乎是等价名词．有时函数特指值域包含于复数域 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C"> 的映射．</p></div><div id="fn20"><p><sup>20</sup>&nbsp;为良定义 <img src="https://latex.codecogs.com/png.latex?x%5E0">，环 <img src="https://latex.codecogs.com/png.latex?R"> 必须有单位元．</p></div><div id="fn21"><p><sup>21</sup>&nbsp;这里再次涉及环 <img src="https://latex.codecogs.com/png.latex?R"> 上的收敛问题．由于实践中只关心形式幂级数的前有限项，后续讨论系数-点值-系数法转换卷积时不需要用到幂级数理论，可以回避．</p></div></div><p>多项式 <img src="https://latex.codecogs.com/png.latex?A"> 对应的环 <img src="https://latex.codecogs.com/png.latex?R"> 上的<em>多项式函数</em> <img src="https://latex.codecogs.com/png.latex?A(x)"> 定义为映射<sup>20</sup> <img src="https://latex.codecogs.com/png.latex?%0AA:%20R%20%5Cto%20R,%5Cquad%20x%20%5Cmapsto%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20a_k%20x%5Ek%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_n%20%5C%7D"> 只有有限项非零．环 <img src="https://latex.codecogs.com/png.latex?R"> 上的幂级数则无此限制<sup>21</sup>．</p>
<p>与多项式 / 形式幂级数不同，这里的 <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20R"> 代表函数的自变量，是会按环 <img src="https://latex.codecogs.com/png.latex?R"> 上运算法则参与运算的有意义的变量．</p>
<p>多项式函数的加法和乘法定义为函数的加法和乘法，即 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA+B:%20x%20&amp;%5Cmapsto%20A(x)+B(x)%20%5C%5C%0AA%20%5Cotimes%20B:%20x%20&amp;%5Cmapsto%20A(x)B(x)%0A%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="求值" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="求值">求值</h3>
<p>多项式和多项式函数似乎在许多情况下有着平行的关系．下面介绍一个较直观的结论．</p>
<p><strong>若环 <img src="https://latex.codecogs.com/png.latex?R"> 是交换环，则环 <img src="https://latex.codecogs.com/png.latex?R"> 上每个多项式都唯一确定一个 <img src="https://latex.codecogs.com/png.latex?R"> 上的多项式函数，且该映射保持加法和乘法运算</strong><sup>22</sup>．形式化地可以记为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20%20%20(A+B)(x)%20&amp;=%20A(x)+B(x)%20%5C%5C%0A%20%20%20%20(A*B)(x)%20&amp;=%20A(x)B(x)%0A%20%20%20%20%5Cend%7Baligned%7D%0A"> 可用于证明上述结论的定理证明见<span class="citation" data-cites="qiu-algebra">[8, 第 7 章第 1 节定理 4, p.&nbsp;7]</span><sup>23</sup>．由于多项式的复合由多项式加法和乘法组成，而多项式函数的复合（定义为函数的复合）亦可在环上平行地展开，故上述映射也保持了复合运算．</p>
<div class="no-row-height column-margin column-container"><div id="fn22"><p><sup>22</sup>&nbsp;这种保持结构不变的映射被称为同态（homomorphism）．</p></div><div id="fn23"><p><sup>23</sup>&nbsp;其证明了域上一元多项式环的通用性质．仿照该证明应可证明环上的版本，从而证明这一同态关系．</p></div></div><p>多项式和多项式函数的这一关系为多项式在任意点的求值操作提供了理论基础．在多项式函数的 <img src="https://latex.codecogs.com/png.latex?t"> 处求值也被称为用 <img src="https://latex.codecogs.com/png.latex?t"> 代入多项式 <img src="https://latex.codecogs.com/png.latex?A">，记为 <img src="https://latex.codecogs.com/png.latex?A(t)">．</p>
</section>
<section id="插值" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="插值">插值</h3>
<p>需要注意的是，前述结论的逆命题不一定成立，即<strong>环 <img src="https://latex.codecogs.com/png.latex?R"> 上的一个多项式函数不一定与 <img src="https://latex.codecogs.com/png.latex?R"> 上多项式一一对应</strong>．一个经典反例是有限域上多项式环 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20Z_p%5Bx%5D"> 上的 <img src="https://latex.codecogs.com/png.latex?(x+1)%5Ep%20%5Cequiv%20x%5Ep%20+%201%20%5Cpmod%7Bp%7D">．我们指出其成立的一个充分条件是 <strong><img src="https://latex.codecogs.com/png.latex?R"> 是无限整环</strong><sup>24</sup>．</p>
<div class="no-row-height column-margin column-container"><div id="fn24"><p><sup>24</sup>&nbsp;该定理是下方高亮定理的一个自然的推论．</p></div></div><p>该逆命题的本质是通过多项式函数的所有函数值反过来确定多项式（系数）的过程．而如果在确定时只使用一部分函数值，就是所谓的多点插值过程．很多时候待求多项式的次数是已知的，这在相当程度上缩小了待定多项式的范围．我们指出，<strong>只要 <img src="https://latex.codecogs.com/png.latex?R"> 是整环，就可以通过多项式任意 <img src="https://latex.codecogs.com/png.latex?n"> 个不同位置的点值确定一个至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式．</strong></p>
<p>证明的关键是用带余除法<sup>25</sup>讨论多项式根与其一次因式的关系，即多项式余式定理或小 Bézout 定理<span class="citation" data-cites="qiu-algebra">[8, 第 7 章第 6 节定理 6, p.&nbsp;35]</span>．</p>
<div class="no-row-height column-margin column-container"><div id="fn25"><p><sup>25</sup>&nbsp;由于一次因式均为首一多项式，可以在整环上对其使用带余除法．</p></div></div><p>需要强调，上述结论只能说明，只有那些确实可通过多项式 <img src="https://latex.codecogs.com/png.latex?n"> 点求值得到的点值组，才能与多项式建立保持加法和乘法运算的双射．对于任取的 <img src="https://latex.codecogs.com/png.latex?R"> 中的一个 <img src="https://latex.codecogs.com/png.latex?n"> 元组，则无法确定是否存在与之对应的多项式．</p>
</section>
<section id="求值与插值的线性表示" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="求值与插值的线性表示">求值与插值的线性表示</h3>
<p>到这里，多项式的求值与插值的线性表示已经呼之欲出了．若将交换环 <img src="https://latex.codecogs.com/png.latex?R"> 上的至多 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的多项式看做模<sup>26</sup> <img src="https://latex.codecogs.com/png.latex?R%5En"> 中的一个向量，则多项式多点求值的过程就是 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的一个线性变换（记为 <img src="https://latex.codecogs.com/png.latex?V">），其矩阵表示正是 Vandermonde 矩阵．由先前对求值的讨论，我们还知道其保持模 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的加法运算，并将结果不超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 次的卷积运算转化为 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的逐项乘法．</p>
<div class="no-row-height column-margin column-container"><div id="fn26"><p><sup>26</sup>&nbsp;模是定义在环上的“线性空间”．</p></div><div id="fn27"><p><sup>27</sup>&nbsp;Lagrange 插值的构造用到了除法，且行列式非零推出矩阵可逆仅在域上的线性空间中适用，因此必须要求 <img src="https://latex.codecogs.com/png.latex?R"> 是域．</p></div></div><p>若将对 <img src="https://latex.codecogs.com/png.latex?R"> 的要求<strong>加强到域</strong>，注意到 Vandermonde 行列式在参数互不相同时非零，故此时 <img src="https://latex.codecogs.com/png.latex?V"> 可逆．事实上，<strong>Vandermonde 矩阵求逆的过程就是 Lagrange 插值</strong>，从而给出了将任意 <img src="https://latex.codecogs.com/png.latex?R%5En"> 中向量还原为其对应多项式的构造方法<sup>27</sup>．这与数论中中国剩余定理的构造有异曲同工之妙<span class="citation" data-cites="wikipedia-lagrange">[11, section: A perspective from linear algebra]</span>．</p>
</section>
<section id="求值与插值---小结" class="level3">
<h3 class="anchored" data-anchor-id="求值与插值---小结">求值与插值 - 小结</h3>
<p>本节的核心是多项式和多项式函数的区别与联系，两个方向的”确定”分别给出了多项式多点求值和多点插值的理论基础．</p>
<p>由于多项式和多项式函数这种若即若离的关系，往往在记号上也有意无意地混淆了它们，某些情况下加大了区分的难度．本篇使用的记号体系将尽量用单个字母 <img src="https://latex.codecogs.com/png.latex?A"> 表示多项式，用 <img src="https://latex.codecogs.com/png.latex?A(x)"> 表示多项式 <img src="https://latex.codecogs.com/png.latex?A"> 对应的多项式函数，用 <img src="https://latex.codecogs.com/png.latex?A(t)"> 表示用 <img src="https://latex.codecogs.com/png.latex?t"> 代入多项式 <img src="https://latex.codecogs.com/png.latex?A">，同时在需要区分的符号前加上适当的名词．</p>
</section>
</section>
<section id="环上的-dft" class="level2 page-columns page-full" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="环上的-dft"><span class="header-section-number">4.3</span> 环上的 DFT</h2>
<section id="环上的-dft---导言" class="level3">
<h3 class="anchored" data-anchor-id="环上的-dft---导言">环上的 DFT - 导言</h3>
<p>前面讨论了在多项式任意点处求值插值的基本原理，但 DFT/FFT 的运行只需在单位根处求值和插值．本节将进一步放宽对多项式环的限制，介绍定义在有主要单位根的环上的一般的 DFT 及其快速算法 FFT．</p>
<p>本节内容主要参考了 <span class="citation" data-cites="furer2009faster">[12, section 2, pp.&nbsp;983–984]</span> 和 <span class="citation" data-cites="wikipedia-dft-over-ring">[13]</span>．</p>
</section>
<section id="环上的单位根---两个定义" class="level3">
<h3 class="anchored" data-anchor-id="环上的单位根---两个定义">环上的单位根 - 两个定义</h3>
<p>定义环 <img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 次<em>主要单位根</em>（principal n-th root of unity）<img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 是满足如下条件的环 <img src="https://latex.codecogs.com/png.latex?R"> 中的一个元素： <img src="https://latex.codecogs.com/png.latex?%0A%5Comega_n%5En%20=%201;%5Cquad%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bik%7D%20=%200,%5Cquad%20i=1,2,%5Cdots,n-1%0A"> 由定义立得 <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bik%7D%20=%20%5Bn%20%5Cmid%20i%5D%20n">，可见主要单位根的定义即求和引理本身．</p>
<p>定义环 <img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 次<em>本原单位根</em>（primitive n-th root of unity）<img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 是满足如下条件的环 <img src="https://latex.codecogs.com/png.latex?R"> 中的一个元素： <img src="https://latex.codecogs.com/png.latex?%0A%5Comega_n%5En%20=%201;%5Cquad%20%5Comega_n%5Ek%20%5Cneq%201,%5Cquad%20k=1,2,%5Cdots,n-1%0A"></p>
<p>本原单位根在许多情况下与主要单位根等价，但亦非完全相同．</p>
</section>
<section id="环上的单位根---区别与联系" class="level3">
<h3 class="anchored" data-anchor-id="环上的单位根---区别与联系">环上的单位根 - 区别与联系</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-root-relation-1" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 1</strong></span> 若环 <img src="https://latex.codecogs.com/png.latex?R"> 是整环，则环上的本原单位根也是一个主要单位根．</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>对任意正整数 <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5Bn%5D">，令 <img src="https://latex.codecogs.com/png.latex?S%20=%20%5Csum_%7Bk=0%7D%5En%20%5Comega_n%5E%7Bik%7D">，则 <img src="https://latex.codecogs.com/png.latex?(1-%5Comega_n%5Ei)%20S%20=%20S%20-%20%5Comega_n%5Ei%20S%20=%201%20-%20%5Comega_n%5En%20=%200">，由 <img src="https://latex.codecogs.com/png.latex?R"> 是整环及 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%5Ei=0"> 得 <img src="https://latex.codecogs.com/png.latex?S=0">．</p>
</div>
</section>
<section id="环上的单位根---区别与联系-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="环上的单位根---区别与联系-1">环上的单位根 - 区别与联系</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-root-relation-2" class="theorem proposition">
<p><span class="theorem-title"><strong>命题 2</strong></span> 若环 <img src="https://latex.codecogs.com/png.latex?R"> 的特征<sup>28</sup> <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bchar%7DR"> 满足 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bchar%7DR%20%5Cnmid%20n">，则环上的主要单位根也是一个本原单位根．</p>
</div>
</div>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="fn28"><p><sup>28</sup>&nbsp;使得 <img src="https://latex.codecogs.com/png.latex?m%201%20=%20%5Csum_%7Bk=0%7D%5E%7Bm-1%7D1%20=%200"> 的最小正整数 <img src="https://latex.codecogs.com/png.latex?m">．不存在则记为 <img src="https://latex.codecogs.com/png.latex?0">．<img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bchar%7D%5Cmathbb%20C%20=%200">，<img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bchar%7D%5Cmathbb%20Z_p%20=%20p">．可以证明域的特征一定是 <img src="https://latex.codecogs.com/png.latex?0"> 或一质数<span class="citation" data-cites="qiu-algebra">[8, 第 7 章第 11 节定理 3，p.&nbsp;70]</span>．</p></div></div><div class="proof">
<p><span class="proof-title"><em>证明</em>. </span>反证．若存在一正整数 <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5Bn%5D"> 使得 <img src="https://latex.codecogs.com/png.latex?n"> 次主要单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 的某一幂次 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%5Ei=1">，则 <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bik%7D%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%201%5Ek%20=%20n%201%20%5Cneq%200">，与主要单位根定义矛盾．</p>
</div>
</section>
<section id="环上的单位根---其它性质" class="level3">
<h3 class="anchored" data-anchor-id="环上的单位根---其它性质">环上的单位根 - 其它性质</h3>
<p>分别根据定义和数论中的 Bézout 定理，容易证明主要单位根和本原单位根的消去引理：设 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7Bn%7D"> 是环上的 <img src="https://latex.codecogs.com/png.latex?n"> 次主要（本原）单位根，则 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7Bn%7D%5E%7Bk%7D"> 是环上的 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20n%20%7B%5Cgcd(n,k)%7D"> 次主要（本原）单位根．</p>
<p>注意到 <img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Comega_%7B2n%7D%5En%20%5Cright)%5E2=1%20%5Cimplies%20(%5Comega_%7B2n%7D%5En%20+%201)(%5Comega_%7B2n%7D%5En%20-%201)=0">，故整环上的 <img src="https://latex.codecogs.com/png.latex?2n"> 次主要单位根或本原单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D"> 均满足 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D%5En%20=%20-1">．</p>
<p>环上的 <img src="https://latex.codecogs.com/png.latex?n"> 次主要单位根或本原单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 都存在逆元 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%5E%7B-1%7D%20=%20%5Comega_n%5E%7Bn-1%7D">．</p>
</section>
<section id="环上的-dft-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="环上的-dft-1">环上的 DFT</h3>
<p>设 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 是环 <img src="https://latex.codecogs.com/png.latex?R"> 上的一个 <img src="https://latex.codecogs.com/png.latex?n"> 次主要单位根，其对应的 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的 <em><img src="https://latex.codecogs.com/png.latex?n"> 点 DFT</em> 定义为线性映射（或矩阵） <img src="https://latex.codecogs.com/png.latex?%0AF%20=%20%5Cleft(%20%5Comega_n%5E%7Bij%7D%20%5Cright)_%7B(i,j)%20%5Cin%20n%20%5Ctimes%20n%7D%20=%20%5Cbegin%7Bpmatrix%7D%0A%20%20%20%201%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A%20%20%20%201%20&amp;%20%5Comega_n%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20%5C%5C%0A%20%20%20%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%20%20%20%201%20&amp;%20%5Comega_n%5E%7Bn-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B(n-1)(n-1)%7D%0A%20%20%20%20%5Cend%7Bpmatrix%7D%0A"> 若 <img src="https://latex.codecogs.com/png.latex?n%201"> 在环 <img src="https://latex.codecogs.com/png.latex?R"> 中存在乘法逆元，则 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的 DFT 可逆，其逆映射为<sup>29</sup> <img src="https://latex.codecogs.com/png.latex?%0AF%5E%7B-1%7D%20=%20(n%201)%5E%7B-1%7D%20%5Cleft(%20%5Comega_n%5E%7B-ij%7D%20%5Cright)_%7B(i,j)%20%5Cin%20n%20%5Ctimes%20n%7D%20=%20(n%201)%5E%7B-1%7D%20%5Cbegin%7Bpmatrix%7D%0A%20%20%20%201%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A%20%20%20%201%20&amp;%20%5Comega_n%5E%7B-1%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B-(n-1)%7D%20%5C%5C%0A%20%20%20%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%20%20%20%201%20&amp;%20%5Comega_n%5E%7B-(n-1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_n%5E%7B-(n-1)(n-1)%7D%0A%20%20%20%20%5Cend%7Bpmatrix%7D%0A"></p>
<div class="no-row-height column-margin column-container"><div id="fn29"><p><sup>29</sup>&nbsp;证明使用主要单位根的定义（求和引理）即可．</p></div></div></section>
<section id="环上的-fft" class="level3">
<h3 class="anchored" data-anchor-id="环上的-fft">环上的 FFT</h3>
<p>除无法在任意环上使用 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D%5En%20=%20-1">，现有的抽象已足够让我们写出与之前类似的推导 FFT 的过程．</p>
<p>设 <img src="https://latex.codecogs.com/png.latex?R"> 是任意环，<img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D"> 是环 <img src="https://latex.codecogs.com/png.latex?R"> 上的一个 <img src="https://latex.codecogs.com/png.latex?2n"> 次主要单位根．由主要单位根的消去引理，<img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D%5E2"> 是环 <img src="https://latex.codecogs.com/png.latex?R"> 上的 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20%7B2n%7D%7B%5Cgcd(2n,2)%7D%20=%20n"> 次主要单位根．方便起见，记 <img src="https://latex.codecogs.com/png.latex?%5Comega_n%20=%20%5Comega_%7B2n%7D%5E2">．</p>
<p>考虑对模 <img src="https://latex.codecogs.com/png.latex?R%5E%7B2n%7D"> 中向量 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a%20=%20%5Cleft(%20a_0,a_1,%5Cdots,a_%7B2n-1%7D%20%5Cright)%5ET"> 做 <img src="https://latex.codecogs.com/png.latex?%5Comega_%7B2n%7D"> 对应的 <img src="https://latex.codecogs.com/png.latex?2n"> 点 DFT 变换，得到向量 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cboldsymbol%20a%7D%20=%20%5Cleft(%20%5Chat%20a_0,%20%5Chat%20a_1,%20%5Cdots,%20%5Chat%20a_%7B2n-1%7D%20%5Cright)%5ET">，其中 <img src="https://latex.codecogs.com/png.latex?%5Chat%20a_i%20=%20%5Csum_%7Bk=0%7D%5E%7B2n-1%7D%20a_k%20%5Comega_%7B2n%7D%5E%7Bik%7D">．将其奇偶分项为 <img src="https://latex.codecogs.com/png.latex?%5Chat%20a_i=A_0(i)+A_1(i)%20%5Comega_%7B2n%7D%5Ei">，其中 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20%20%20A_0(i)%20&amp;:=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_%7B2k%7D%20%5Comega_%7Bn%7D%5E%7Bik%7D%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_%7B2k%7D%20%5Comega_%7B2n%7D%5E%7B2ik%7D%20%5C%5C%0A%20%20%20%20A_1(i)%20&amp;:=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_%7B2k+1%7D%20%5Comega_%7Bn%7D%5E%7Bik%7D%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_%7B2k+1%7D%20%5Comega_%7B2n%7D%5E%7B2ik%7D%0A%20%20%20%20%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="环上的-fft-1" class="level3">
<h3 class="anchored" data-anchor-id="环上的-fft-1">环上的 FFT</h3>
<p>注意到 <img src="https://latex.codecogs.com/png.latex?A_0(i)=A_0(n+i)">，<img src="https://latex.codecogs.com/png.latex?A_1(i)=A_1(n+i)">，故 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20%20%20%5Chat%20a_i%20%20%20%20%20&amp;=%20A_0(i)%20+%20A_1(i)%20%5Comega_%7B2n%7D%5Ei%20%5C%5C%0A%20%20%20%20%5Chat%20a_%7Bn+i%7D%20&amp;=%20A_0(i)%20+%20A_1(i)%20%5Comega_%7B2n%7D%5E%7Bn+i%7D%0A%20%20%20%20%5Cend%7Baligned%7D,%5Cquad%20i%20%5Cin%20%5Bn%5D%0A"> 而 <img src="https://latex.codecogs.com/png.latex?A_0(i),%5C,%20i%20%5Cin%20%5Bn%5D"> 的计算即计算向量 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Ba_0%7D%20=%20%5Cleft(%20a_0,%20a_2,%20%5Cdots,%20a_%7B2n-2%7D%20%5Cright)"> 对应于 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT 的过程；<img src="https://latex.codecogs.com/png.latex?A_1(i),%5C,%20i%20%5Cin%20%5Bn%5D"> 的计算即计算向量 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Ba_1%7D%20=%20%5Cleft(%20a_1,%20a_3,%20%5Cdots,%20a_%7B2n-1%7D%20%5Cright)"> 对应于 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT 的过程．</p>
<p>因此，令 <img src="https://latex.codecogs.com/png.latex?n%20=%202%5Em">，则只要环 <img src="https://latex.codecogs.com/png.latex?R"> 上存在 <img src="https://latex.codecogs.com/png.latex?2%5Em"> 次主要单位根，如上形式的 FFT 递归算法就可在 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)"> 的时间复杂度内快速计算 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 点 DFT．而若 <img src="https://latex.codecogs.com/png.latex?2%5Ek%201,%5C,%200%20%5Cleq%20k%20%5Cleq%20m"> 在 <img src="https://latex.codecogs.com/png.latex?R"> 内均存在逆元，<img src="https://latex.codecogs.com/png.latex?R%5En"> 上的 <img src="https://latex.codecogs.com/png.latex?n"> 点 IDFT 也可类似地快速计算．</p>
</section>
</section>
<section id="循环卷积与卷积定理" class="level2 page-columns page-full" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="循环卷积与卷积定理"><span class="header-section-number">4.4</span> 循环卷积与卷积定理</h2>
<section id="循环卷积与卷积定理---导言" class="level3">
<h3 class="anchored" data-anchor-id="循环卷积与卷积定理---导言">循环卷积与卷积定理 - 导言</h3>
<p>上一节中，我们建立了在有主要单位根的环上的 DFT 及其快速算法 FFT 的相关理论，但由于放宽了对多项式环 <img src="https://latex.codecogs.com/png.latex?R%5Bx%5D"> 的限制，多项式的求值插值理论无法在此直接得到应用，环上 DFT 加速多项式卷积的理论尚需重新构建．</p>
<p>在求值与插值部分已经介绍求值变换 <img src="https://latex.codecogs.com/png.latex?V"> 在 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的线性表示，其保持 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的加法运算，并将规模不超过 <img src="https://latex.codecogs.com/png.latex?n"> 的两向量的卷积转化为 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的逐项乘法．本节中，我们来证明 DFT 变换 <img src="https://latex.codecogs.com/png.latex?F"> 也满足同样的性质，且将这一结果推广到卷积规模超过 <img src="https://latex.codecogs.com/png.latex?n"> 时的情况．</p>
</section>
<section id="循环卷积" class="level3">
<h3 class="anchored" data-anchor-id="循环卷积">循环卷积</h3>
<p>设 <img src="https://latex.codecogs.com/png.latex?R"> 是<strong>交换环</strong>，我们记 <img src="https://latex.codecogs.com/png.latex?A%20%5Cotimes%20B"> 代表模 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上两个向量的逐项乘法．</p>
<p>设 <img src="https://latex.codecogs.com/png.latex?F"> 是 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上主要单位根 <img src="https://latex.codecogs.com/png.latex?%5Comega_n"> 对应的 <img src="https://latex.codecogs.com/png.latex?n"> 点可逆 DFT 变换，<img src="https://latex.codecogs.com/png.latex?A,B"> 是 <img src="https://latex.codecogs.com/png.latex?R%5En"> 中两个任意取定的向量．显然 <img src="https://latex.codecogs.com/png.latex?F(A+B)=FA+FB">，故 DFT 变换保持 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上的加法运算．现在的主要问题是，求值与插值部分计算卷积的方法 <img src="https://latex.codecogs.com/png.latex?F%5E%7B-1%7D(FA%20%5Cotimes%20FB)"> 在放宽环限制的 <img src="https://latex.codecogs.com/png.latex?R%5En"> 上进行时，将会得到什么结果？</p>
<p>令 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bgathered%7D%0A%20%20%20%20%5Chat%7B%5Cboldsymbol%20a%7D%20=%20F%20%5Cboldsymbol%20a,%5Cquad%20%5Chat%7B%5Cboldsymbol%20b%7D%20=%20F%20%5Cboldsymbol%20b%20%5C%5C%0A%20%20%20%20%5Chat%20%7B%5Cboldsymbol%20c%7D=%20%5Chat%7B%5Cboldsymbol%20a%7D%20%5Cotimes%20%5Chat%7B%5Cboldsymbol%20b%7D,%5Cquad%20%5Cboldsymbol%20c%20=%20F%5E%7B-1%7D%20%5Chat%7B%5Cboldsymbol%20c%7D%0A%20%20%20%20%5Cend%7Bgathered%7D%0A"> 则 <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20a_i%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20a_j%20%5Comega_n%5E%7Bij%7D,%5Cquad%20%5Chat%20b_i%20=%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20b_k%20%5Comega_n%5E%7Bik%7D%0A"></p>
</section>
<section id="循环卷积-1" class="level3">
<h3 class="anchored" data-anchor-id="循环卷积-1">循环卷积</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20c_i%20=%20%5Chat%20a_i%20%5Chat%20b_i%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20a_j%20%5Comega_n%5E%7Bij%7D%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20b_k%20%5Comega_n%5E%7Bik%7D%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_j%20b_k%20%5Comega_n%5E%7Bi(j+k)%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ac_i%20=%20%5Csum_%7Bt=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7B-it%7D%20%5Chat%20c_t%20=%20%20%5Csum_%7Bt=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7B-it%7D%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_j%20b_k%20%5Comega_n%5E%7Bt(j+k)%7D%0A%20%20%20%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_j%20b_k%20%5Csum_%7Bt=0%7D%5E%7Bn-1%7D%20%5Comega_n%5E%7Bt(j+k-i)%7D%0A"> 对最里侧的求和使用主要单位根的定义（求和引理），就有 <img src="https://latex.codecogs.com/png.latex?%0Ac_i%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20%5Csum_%7Bk=0%7D%5E%7Bn-1%7D%20a_j%20b_k%20%5Bn%20%5Cmid%20j+k-i%5D%20=%20%5Csum_%7Bj+k%20%5Cequiv%20i%20%5Cbmod%7Bn%7D%7D%20a_j%20b_k%0A"> 这便是所谓的循环卷积．以后将 <img src="https://latex.codecogs.com/png.latex?R%5En"> 中向量 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a"> 和 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20b"> 的循环卷积记为 <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20a%20*%20%5Cboldsymbol%20b">．形象地来看，循环卷积中，次数超过 <img src="https://latex.codecogs.com/png.latex?n-1"> 的卷积项被模意义地地叠加到了以次数为 <img src="https://latex.codecogs.com/png.latex?0"> 为始的项上．</p>
</section>
<section id="卷积定理" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="卷积定理">卷积定理</h3>
<p>前述讨论已经证明<sup>30</sup> <img src="https://latex.codecogs.com/png.latex?%0AF(A%20*%20B)%20=%20FA%20%5Cotimes%20FB%0A"> 这便是一般交换环上 DFT 变换的（循环）卷积定理．</p>
<div class="no-row-height column-margin column-container"><div id="fn30"><p><sup>30</sup>&nbsp;虽然前面用到了 <img src="https://latex.codecogs.com/png.latex?F"> 可逆的要求，但该定理在 <img src="https://latex.codecogs.com/png.latex?F"> 不可逆时也成立．只需类似地验证两边相等即可．</p></div><div id="fn31"><p><sup>31</sup>&nbsp;具体来说，该变换只能是 DFT 矩阵的某个行置换．在 <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20C%5En"> 上的证明可参见<span class="citation" data-cites="baraquin2023uniqueness">[14]</span>，主讲人目前正在研究整环上的版本，欢迎讨论．</p></div></div><p>我们指出，当要求所作变换可逆时，卷积定理反过来也要求所作变换是一类似 DFT 映射的变换<sup>31</sup>．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-2timesdft" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 5</strong></span> 尝试将任意序列 DFT 两次，观察结果．证明你的结论．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-detdft" class="theorem exercise">
<p><span class="theorem-title"><strong>习题 6</strong></span> 求 DFT 矩阵的行列式．尽可能缩小可行解范围．</p>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="advanced-operations" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Advanced Operations</h1>
<section id="多项式全家桶---序言" class="level3">
<h3 class="anchored" data-anchor-id="多项式全家桶---序言">多项式全家桶 - 序言</h3>
<ul>
<li><p>有哪些？</p>
<ul>
<li>求逆、开根、对数、指数、快速幂、复合等</li>
</ul></li>
<li><p>咋推的？</p>
<ul>
<li>求解思路几乎都是倍增，时间复杂度几乎都是大常数 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)"></li>
<li>Newton 迭代法是推导全家桶迭代公式的通法</li>
<li>严格化需要进一步的形式幂级数理论，主讲人不会</li>
</ul></li>
<li><p>有啥用？</p>
<ul>
<li>当你一波操作化出生成函数发现不会求系数</li>
</ul></li>
<li><p>怎么讲？</p>
<ul>
<li>受限于篇幅和主讲人能力，我们讲不完</li>
<li>只讲求逆和对数，其余请左转 OI Wiki</li>
</ul></li>
</ul>
</section>
<section id="多项式求逆" class="level3">
<h3 class="anchored" data-anchor-id="多项式求逆">多项式求逆</h3>
<p>给定一多项式 <img src="https://latex.codecogs.com/png.latex?A(x)">，求解满足 <img src="https://latex.codecogs.com/png.latex?A(x)%20B(x)%20=%201%20%5Cpmod%7Bx%5E%7Bn%7D%7D"> 的多项式 <img src="https://latex.codecogs.com/png.latex?B(x)">．</p>
<p>多项式逆元存在的充分必要条件是其常数项非零（这是因为边界条件 <img src="https://latex.codecogs.com/png.latex?b_0%20=%20%5Cfrac%201%20%7Ba_0%7D">），若存在则在模意义下一定唯一．这结论可直接由下述求解方法得到．不失一般性，只研究 <img src="https://latex.codecogs.com/png.latex?A(x)"> 的次数至多为奇数 <img src="https://latex.codecogs.com/png.latex?2n-1"> 的情况．设 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA(x)%20&amp;=%20A_0(x)%20+%20x%5En%20A_1(x)%20%5C%5C%0AB(x)%20&amp;=%20B_0(x)%20+%20x%5En%20B_1(x)%0A%5Cend%7Baligned%7D%0A"> 考虑递归地在已知 <img src="https://latex.codecogs.com/png.latex?%0AA(x)%20B_0(x)%20=%20A_0(x)%20B_0(x)%20=%201%20%5Cpmod%7Bx%5En%7D%0A"> 的基础上求解 <img src="https://latex.codecogs.com/png.latex?A(x)"> 的逆元．先指出该方法的时间复杂度为 <img src="https://latex.codecogs.com/png.latex?%0AT(n)%20=%20T(%5Cfrac%20n%202)%20+%20O(n%20%5Clog%20n)%20=%20O(n%20%5Clog%20n)%0A"></p>
</section>
<section id="多项式求逆-1" class="level3">
<h3 class="anchored" data-anchor-id="多项式求逆-1">多项式求逆</h3>
<p>以下简记 <img src="https://latex.codecogs.com/png.latex?A(x)"> 为 <img src="https://latex.codecogs.com/png.latex?A">，其它多项式同理．注意到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0AA%20B_0%20=%201%20%5Cpmod%7Bx%5En%7D%20%5C%5C%0AA%20B%20=%201%20%5Cpmod%7Bx%5En%7D%0A%5Cend%7Bcases%7D%20%5Cimplies%20A%20(B-B_0)%20=%200%20%5Cpmod%7Bx%5En%7D%0A"> 由于 <img src="https://latex.codecogs.com/png.latex?A%20%5Cbmod%7Bx%5En%7D"> 非零，故 <img src="https://latex.codecogs.com/png.latex?%0AB-B_0%20=%200%20%5Cpmod%7Bx%5En%7D%0A"> 这也说明，多项式逆元在模不同 <img src="https://latex.codecogs.com/png.latex?x%5En"> 下的前缀保持一致．</p>
<p>两边平方得 <img src="https://latex.codecogs.com/png.latex?B%5E2%20-%202%20B%20B_0%20+%20B_0%5E2%20=%200%20%5Cpmod%7Bx%5E%7B2n%7D%7D"> 两侧同乘 <img src="https://latex.codecogs.com/png.latex?A"> 并移项得 <img src="https://latex.codecogs.com/png.latex?%0AB%20=%202%20B_0%20-%20A%20B_0%5E2%20%5Cpmod%7Bx%5E%7B2n%7D%7D%0A"></p>
</section>
<section id="多项式求逆---实现" class="level3">
<h3 class="anchored" data-anchor-id="多项式求逆---实现">多项式求逆 - 实现</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1">Poly inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb6-2">    ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> Poly B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb6-4">        B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>subpoly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>resize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>hf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>resize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<ul>
<li>常数巨大的写法，仅作演示，请勿学习．</li>
<li>正确的写法是在 DFT 后的点值上操作多项式，请小心实现封装．</li>
</ul>
</section>
<section id="多项式-ln" class="level3">
<h3 class="anchored" data-anchor-id="多项式-ln">多项式 <img src="https://latex.codecogs.com/png.latex?%5Cln"></h3>
<p>给定一多项式 <img src="https://latex.codecogs.com/png.latex?A(x)">，求解满足 <img src="https://latex.codecogs.com/png.latex?B(x)%20=%20%5Cln%20A(x)%20%5Cpmod%7Bx%5E%7Bn%7D%7D"> 的多项式 <img src="https://latex.codecogs.com/png.latex?B(x)">．</p>
<p>次数为 <img src="https://latex.codecogs.com/png.latex?+%5Cinfty"> 的形式幂级数的 <img src="https://latex.codecogs.com/png.latex?%5Cln"> 存在的充分必要条件为其常数项非零（这是因为边界条件 <img src="https://latex.codecogs.com/png.latex?b_0%20=%20%5Cln%20a_0">），同样一旦存在则唯一．注意到仅整数 <img src="https://latex.codecogs.com/png.latex?a_0=1"> 时，<img src="https://latex.codecogs.com/png.latex?%5Cln%20a_0"> 可取得整数，故合理的 <img src="https://latex.codecogs.com/png.latex?a_0"> 只能是 <img src="https://latex.codecogs.com/png.latex?1">．</p>
<p>推导是容易的．方程两侧同时求导得 <img src="https://latex.codecogs.com/png.latex?%0AB'(x)%20=%20%5Cfrac%7BA'(x)%7D%7BA(x)%7D%20%5Cpmod%7Bx%5E%7Bn-1%7D%7D%0A"> 两侧再积分得 <img src="https://latex.codecogs.com/png.latex?%0AB(x)%20=%20%5Cint%20%5Cfrac%7BA'(x)%7D%7BA(x)%7D%20%5Coperatorname%7Bd%7D%5C!x%20+%20C%20%5Cpmod%7Bx%5E%7Bn%7D%7D%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?C=%20%5Cln%20a_0">．多项式求逆、求导、积分即可．时间复杂度 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">．</p>
</section>
<section id="多项式-ln---实现" class="level3">
<h3 class="anchored" data-anchor-id="多项式-ln---实现">多项式 <img src="https://latex.codecogs.com/png.latex?%5Cln"> - 实现</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1">Poly drv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Poly A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// derivative</span></span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-5">Poly itg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Poly A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// integral</span></span>
<span id="cb7-6">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--)</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]*</span>inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-9">Poly ln<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> itg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>drv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*</span>inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>subpoly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*log(A[0])*/</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<ul>
<li><p>感谢 <code>keke_046</code> 学长教授 FFT、集合幂级数与生成函数．微言大义，博大精深，至今仍在消化．</p></li>
<li><p>感谢队友 <code>ItzDesert</code> 提供位运算典题一道并提供内容编排建议．</p></li>
</ul>
</section>
<section id="题单" class="level3 allowframebreaks">
<h3 class="allowframebreaks anchored" data-anchor-id="题单">题单</h3>
<p>主讲人练题少，仅供参考．</p>
<dl>
<dt>模板</dt>
<dd>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P3803">洛谷 P3803</a> 【模板】多项式乘法（FFT）</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P6091">洛谷 P6091</a> 【模板】原根</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4238">洛谷 P4238</a> 【模板】多项式乘法逆</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P5205">洛谷 P5205</a> 【模板】多项式开根</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4725">洛谷 P4725</a> 【模板】多项式对数函数（多项式 ln）</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4726">洛谷 P4726</a> 【模板】多项式指数函数（多项式 exp）</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P5245">洛谷 P5245</a> 【模板】多项式快速幂</p></li>
</ul>
</dd>
<dt>大整数乘法</dt>
<dd>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1919">洛谷 P1919</a> 【模板】A*B Problem 升级版（FFT 快速傅里叶变换）</li>
</ul>
</dd>
<dt>基础计数</dt>
<dd>
<ul>
<li><p><a href="https://www.spoj.com/problems/TSUM/">SPOJ-TSUM</a> Triple Sums</p></li>
<li><p>BZOJ3513-MUTC2013 Idiots</p>
<p>上面两道题都是 OGF 消序，较 EGF 消序困难．一般的方法是使用 Polya 计数原理．</p></li>
</ul>
</dd>
<dt>位运算</dt>
<dd>
<ul>
<li><p><a href="https://atcoder.jp/contests/abc291/tasks/abc291_g">ABC291G</a> OR Sum</p>
<p>也是滤波器的应用．</p></li>
</ul>
</dd>
<dt>分治 FFT</dt>
<dd>
<ul>
<li><p>百度之星 2023 初赛第二场 T8</p>
<p>容斥后需要计算若干一次多项式乘积，分治 NTT 即可．</p></li>
<li><p><a href="https://www.bilibili.com/video/BV1p14y1z7sF">百度之星 2023 初赛第一场 T6</a></p>
<p>求 <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi%3Ej%7D%20%5Cfrac%7Ba_i%7D%7Ba_i%20+%20a_j%7D">．值域次数化后 CDQ 处理偏序．</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4721">洛谷 P4721</a> 【模板】分治 FFT</p>
<p>CDQ 偏序化处理前后项依赖．也可解生成函数方程再多项式求逆．</p></li>
</ul>
</dd>
<dt>字符串</dt>
<dd>
<ul>
<li><p><a href="https://atcoder.jp/contests/abc196/tasks/abc196_f">ABC196F</a> Substring 2</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4173">洛谷 P4173</a> 残缺的字符串</p>
<p>带单字符通配符的字符串匹配．体会设定字符串距离函数的方法．</p></li>
</ul>
</dd>
<dt>全家桶</dt>
<dd>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P4721">洛谷 P4721</a> 【模板】分治 FFT</p>
<p>体验生成函数简化复杂数列递推的威力．</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4389">洛谷 P4389</a> 付公主的背包</p>
<p>解决此问题的方法也可用于分拆数计算．</p></li>
<li><p><a href="https://www.luogu.com.cn/problem/P4841">洛谷 P4841</a> 【集训队作业2013】城市规划</p>
<p>EGF 消序划分典题．体验生成函数风格的计数方法．</p></li>
<li><p><a href="https://loj.ac/p/6538">LOJ6538</a> 烷基计数 - 加强版 - 加强版</p>
<p>对生成函数使用的 Polya 计数．</p>
<p>Polya ex. 苯环碳接 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7B-C_4H_9%7D"> 同分异构体计数</p></li>
</ul>
</dd>
<dt>其它</dt>
<dd>
<ul>
<li><p><a href="https://qoj.ac/problem/5748">QOJ5748</a>-UCUP2023-Stage7-K Determinant, or...?</p>
<p>看似人畜无害的 <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20a_%7Bi%20%5Coperatorname%7Bor%7D%20j%7D%20%5Cright)_%7B(i,j)%20%5Cin%20n%20%5Ctimes%20n%7D"> 行列式求值，解法的背后却潜藏 FMT 的思想．此类行列式与各类反演、卷积有密切联系，我们给出一篇研究了其与偏序集上反演的关系的参考文献<span class="citation" data-cites="wilf1968hadamard">[15]</span>，欢迎讨论．</p></li>
</ul>
</dd>
</dl>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-oiwiki-lagrange" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">OI-Wiki, <span>《拉格朗日插值》</span>. <a href="https://oi-wiki.org/math/numerical/lagrange/" class="uri">https://oi-wiki.org/math/numerical/lagrange/</a>.</div>
</div>
<div id="ref-euler-formula" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">张筑生, <span>《数学分析新讲（重排本）（第二册）》</span>, 2 本北京: 北京大学出版社, 2021, 页 256–262.</div>
</div>
<div id="ref-trigonometry" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">杨树森, <span>《三角函数的严格定义》</span>. <a href="https://zhuanlan.zhihu.com/p/58814328/" class="uri">https://zhuanlan.zhihu.com/p/58814328/</a>, 2023年.</div>
</div>
<div id="ref-algointro" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">T. H. Cormen, C. E. Leiserson, R. L. Rivest, 和 C. Stein, <span>《算法导论（原书第三版）》</span>, 北京: 机械工业出版社, 2013.</div>
</div>
<div id="ref-oiwiki-discretelog" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">OI-Wiki, <span>《离散对数》</span>. <a href="https://oi-wiki.org/math/number-theory/discrete-logarithm/" class="uri">https://oi-wiki.org/math/number-theory/discrete-logarithm/</a>.</div>
</div>
<div id="ref-oiwiki-pr" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">OI-Wiki, <span>《原根》</span>. <a href="https://oi-wiki.org/math/number-theory/primitive-root/" class="uri">https://oi-wiki.org/math/number-theory/primitive-root/</a>.</div>
</div>
<div id="ref-agarwal1974fast" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">R. Agarwal 和 C. Burrus, <span>《Fast Convolution using fermat number transforms with applications to digital filtering》</span>, <em>IEEE Transactions on Acoustics, Speech, and Signal Processing</em>, 卷 22, 期 2, 页 87–97, 1974, doi: <a href="https://doi.org/10.1109/TASSP.1974.1162555">10.1109/TASSP.1974.1162555</a>.</div>
</div>
<div id="ref-qiu-algebra" class="csl-entry">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline">丘维声, <span>《高等代数&nbsp;下册》</span>, 3 本北京: 高等教育出版社, 2015.</div>
</div>
<div id="ref-oiwiki-polynomial" class="csl-entry">
<div class="csl-left-margin">[9] </div><div class="csl-right-inline">OI-Wiki, <span>《多项式与生成函数简介》</span>. <a href="https://oi-wiki.org/math/poly/intro/" class="uri">https://oi-wiki.org/math/poly/intro/</a>.</div>
</div>
<div id="ref-wikipedia-formalpowerseries" class="csl-entry">
<div class="csl-left-margin">[10] </div><div class="csl-right-inline">Wikipedia, <span>《Formal power series》</span>. <a href="https://en.wikipedia.org/wiki/Formal_power_series" class="uri">https://en.wikipedia.org/wiki/Formal_power_series</a>.</div>
</div>
<div id="ref-wikipedia-lagrange" class="csl-entry">
<div class="csl-left-margin">[11] </div><div class="csl-right-inline">Wikipedia, <span>《Lagrange polynomial》</span>. <a href="https://en.wikipedia.org/wiki/Lagrange_polynomial" class="uri">https://en.wikipedia.org/wiki/Lagrange_polynomial</a>.</div>
</div>
<div id="ref-furer2009faster" class="csl-entry">
<div class="csl-left-margin">[12] </div><div class="csl-right-inline">M. Fürer, <span>《Faster Integer Multiplication》</span>, <em>SIAM Journal on Computing</em>, 卷 39, 期 3, 页 979–1005, 2009, doi: <a href="https://doi.org/10.1137/070711761">10.1137/070711761</a>.</div>
</div>
<div id="ref-wikipedia-dft-over-ring" class="csl-entry">
<div class="csl-left-margin">[13] </div><div class="csl-right-inline">Wikipedia, <span>《Discrete Fourier transform over a ring》</span>. <a href="https://en.wikipedia.org/wiki/Discrete_Fourier_transform_over_a_ring" class="uri">https://en.wikipedia.org/wiki/Discrete_Fourier_transform_over_a_ring</a>.</div>
</div>
<div id="ref-baraquin2023uniqueness" class="csl-entry">
<div class="csl-left-margin">[14] </div><div class="csl-right-inline">I. Baraquin 和 N. Ratier, <span>《Uniqueness of the discrete Fourier transform》</span>, <em>Signal Processing</em>, 卷 209, 页 109041, 2023.</div>
</div>
<div id="ref-wilf1968hadamard" class="csl-entry">
<div class="csl-left-margin">[15] </div><div class="csl-right-inline">H. S. Wilf, <span>《Hadamard determinants M<span>ö</span>bius functions, and the chromatic number of a graph》</span>, 1968.</div>
</div>
</div></section></div> ]]></description>
  <category>algorithm</category>
  <category>math</category>
  <category>lecture notes</category>
  <category>slides</category>
  <guid>https://blog.sun123zxy.top/posts/20230928-dft/</guid>
  <pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Wallis 公式、Stirling 公式与正态分布</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230423-stirling/</link>
  <description><![CDATA[ 




<p>参考：</p>
<ul>
<li>张筑生《数学分析新讲》第二册<span class="citation" data-cites="analysis">[1]</span></li>
<li>张颢《概率论》<span class="citation" data-cites="prob">[2]</span></li>
<li>Wikipedia, Math StackExchange, etc.</li>
</ul>
<section id="warm-up" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="warm-up"><span class="header-section-number">1</span> Warm up</h2>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-double-factorial" class="theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B1%20%5Ctimes%203%20%5Ctimes%205%20%5Ctimes%20%5Cdots%20%5Ctimes%20(2n-1)%7D%7B2%20%5Ctimes%204%20%5Ctimes%206%20%5Ctimes%20%5Cdots%20%5Ctimes%202n%7D%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof solution">
<p><span class="proof-title"><em>Solution</em>. </span>用放缩 <img src="https://latex.codecogs.com/png.latex?%0A2k%20%3E%20%5Csqrt%7B(2k-1)(2k+1)%7D%0A"> 拆分母即得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%3C%20%5Cfrac%201%20%7B%5Csqrt%7B2n+1%7D%7D%20%5Csim%200%0A"></p>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-binomial" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 (中心二项式系数)</strong></span> 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%7B2%5E%7B2n%7D%7D%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof solution">
<p><span class="proof-title"><em>Solution</em>. </span><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%7B2%5E%7B2n%7D%7D%20=%20%5Cfrac%7B(2n)!%7D%7B2%5E%7B2n%7D%20(n!)%5E2%7D%20=%20%5Cfrac%7B(2n)!%7D%7B(2%5En%20n!)%5E2%7D%20=%20%5Cfrac%7B(2n)!%7D%7B((2n)!!)%5E2%7D%20=%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%3C%20%5Cfrac%201%20%7B%5Csqrt%7B2n+1%7D%7D%20%5Csim%200%0A"></p>
</div>
<p>上两例有没有更精确的渐进估计？这便是我们马上要研究的问题．</p>
</section>
<section id="wallis-公式" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="wallis-公式"><span class="header-section-number">2</span> Wallis 公式</h2>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="lem-wallis-integral" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 1 (Wallis 积分公式)</strong></span> 定积分系列 <img src="https://latex.codecogs.com/png.latex?%0AJ_n%20=%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5En%20x%20%5Coperatorname%7Bd%7D%5C!x%0A"> 满足 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AJ_%7B2n%7D%20&amp;=%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%5Ccdot%20%5Cfrac%20%5Cpi%202%20%5C%5C%0AJ_%7B2n+1%7D%20&amp;=%20%5Cfrac%7B(2n)!!%7D%7B(2n+1)!!%7D%20%5Ccdot%201%0A%5Cend%7Baligned%7D%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>我们的思路是：先把一个 <img src="https://latex.codecogs.com/png.latex?%5Csin%20x"> 放进微分中，然后分部积分得到递推式．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AJ_n%20&amp;=%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5En%20x%20%5Coperatorname%7Bd%7D%5C!x%20%5C%5C%0A&amp;=%20-%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5E%7Bn-1%7D%20x%20%5Coperatorname%7Bd%7D%5C!%5Ccos%20x%20%5C%5C%0A&amp;=%20%5Cleft%5B%20-%20%5Csin%5E%7Bn-1%7D%20x%20%5Ccos%20x%20%5Cright%5D_%7B0%7D%5E%7B%5Cfrac%20%5Cpi%202%7D%20+%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Ccos%20x%20%5Coperatorname%7Bd%7D%5C!%5Csin%5E%7Bn-1%7D%20x%20%5C%5C%0A&amp;=%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Ccos%5E2%20x%20%5Csin%5E%7Bn-2%7D%20x%20%5Coperatorname%7Bd%7D%5C!x%20%5C%5C%0A&amp;=%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20(1%20-%20%5Csin%5E2%20x)%20%5Csin%5E%7Bn-2%7D%20x%20%5Coperatorname%7Bd%7D%5C!x%20%5C%5C%0A&amp;=%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5E%7Bn-2%7D%20x%20%5Coperatorname%7Bd%7D%5C!x%20-%20(n-1)%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%5En%20x%20%5Coperatorname%7Bd%7D%5C!x%20%5C%5C%0A&amp;=%20(n-1)%20J_%7Bn-2%7D%20-%20(n-1)%20J_n%0A%5Cend%7Baligned%7D%0A"></p>
<p>故 <img src="https://latex.codecogs.com/png.latex?%0AJ_n%20=%20%5Cfrac%7Bn-1%7D%7Bn%7D%20J_%7Bn-2%7D%0A"> 边界条件 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AJ_0%20&amp;=%20%5Cfrac%20%5Cpi%202%20%5C%5C%0AJ_1%20&amp;=%20%5Cint_0%5E%7B%5Cfrac%20%5Cpi%202%7D%20%5Csin%20x%20%5Coperatorname%7Bd%7D%5C!x%20=%201%0A%5Cend%7Baligned%7D%0A"> 代入递推式求解就得到了要证的结论．</p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-wallis" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (Wallis 公式)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%5Cpi%202%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%201%20%7B2n+1%7D%20%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>注意到在积分区间上，<img src="https://latex.codecogs.com/png.latex?%5Csin%5En%20x%20%5Cgeq%20%5Csin%5E%7Bn+1%7D%20x">，由积分的单调性，<img src="https://latex.codecogs.com/png.latex?J_n"> 随 <img src="https://latex.codecogs.com/png.latex?n"> 单调递减，故 <img src="https://latex.codecogs.com/png.latex?J_%7B2n+1%7D%20%5Cleq%20J_%7B2n%7D%20%5Cleq%20J_%7B2n-1%7D"> 成立．代入 Lemma&nbsp;1 中得到的结果 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B(2n)!!%7D%7B(2n+1)!!%7D%20%5Cleq%20%5Cfrac%7B(2n-1)!!%7D%7B(2n)!!%7D%20%5Ccdot%20%5Cfrac%20%5Cpi%202%20%5Cleq%20%5Cfrac%7B(2n-2)!!%7D%7B(2n-1)!!%7D%0A"> 移项得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cfrac%7B1%7D%7B2n+1%7D%20%5Cleq%20%5Cfrac%20%5Cpi%202%20%5Cleq%20%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cfrac%201%20%7B2n%7D%0A"></p>
<p>现在只需说明 RHS 与 LHS 的差是一个无穷小． <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cleft(%20%5Cfrac%201%20%7B2n%7D%20-%20%5Cfrac%201%20%7B2n+1%7D%20%20%5Cright)%0A&amp;=%20%5Cleft(%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cleft(%20%5Cfrac%201%20%7B2n(2n+1)%7D%20%5Cright)%20%5C%5C%0A&amp;=%20%5Cleft(%20%5Cfrac%7B(2n-2)!!%7D%7B(2n-1)!!%7D%20%5Cright)%5E2%20%5Cfrac%20%7B2n%7D%7B(2n+1)%7D%0A%5Cend%7Baligned%7D%0A"> 由 Example&nbsp;1 ，<img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(2n-2)!!%7D%7B(2n-1)!!%7D%20=%200">，故上式确为一个无穷小，定理得证．</p>
</div>
<p>Wallis 公式还有其它表现形式： <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B2%5E%7B2n%7D%7D%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%20=%20%5Cfrac%7B(2n)!!%7D%7B(2n-1)!!%7D%20%5Csim%20%5Csqrt%7B%5Cpi%20n%7D%20%5Cpod%7Bn%20%5Cto%20%5Cinfty%7D%0A"> 这里 Wallis 公式反映为对 Example&nbsp;1 和 Example&nbsp;2 的渐进估计．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-catalan" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 1</strong></span> 对 Catalan 数 <img src="https://latex.codecogs.com/png.latex?%0AC_n%20=%20%5Cbinom%7B2n%7D%7Bn%7D%20-%20%5Cbinom%7B2n%7D%7Bn+1%7D%0A"> 做出渐进估计．</p>
</div>
</div>
</div>
</div>
<div class="proof solution">
<p><span class="proof-title"><em>Solution</em>. </span>注意到 <img src="https://latex.codecogs.com/png.latex?%0AC_n%20=%20%5Cbinom%7B2n%7D%7Bn%7D%20-%20%5Cbinom%7B2n%7D%7Bn+1%7D%20=%20%5Cbinom%7B2n%7D%7Bn%7D%20-%20%5Cfrac%20n%20%7Bn+1%7D%20%5Cbinom%7B2n%7D%7Bn%7D%20=%20%5Cfrac%201%20%7Bn+1%7D%20%5Cbinom%7B2n%7D%7Bn%7D%0A"> 用 Wallis 公式计算即得 <img src="https://latex.codecogs.com/png.latex?%0AC_n%20%5Csim%20%5Cfrac%20%7B2%5E%7B2n%7D%7D%7B%5Csqrt%7B%5Cpi%7D%20n%5E%7B%5Cfrac%203%202%7D%7D%0A"></p>
</div>
<p>Wallis 公式的另一种表现形式是 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%5Cpi%202%20=%20%5Cprod_%7Bn=1%7D%5E%5Cinfty%20%5Cfrac%7B4%20n%5E2%7D%7B4%20n%5E2-1%7D%20=%20%5Cprod_%7Bn=1%7D%5E%5Cinfty%20%5Cleft(%20%5Cfrac%7B2n%7D%7B2n-1%7D%20%5Ccdot%20%5Cfrac%7B2n%7D%7B2n+1%7D%20%5Cright)%0A"> 这表达式也被称为 Wallis product，用于近似计算 <img src="https://latex.codecogs.com/png.latex?%5Cpi">．</p>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>这和我们在 Example&nbsp;1 中使用的放缩技巧……</p>
</div>
</section>
<section id="stirling-公式" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="stirling-公式"><span class="header-section-number">3</span> Stirling 公式</h2>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="lem-e" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 2</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%201+%5Cfrac%201%20n%20%5Cright)%5En%20%3C%20e%20%3C%20%5Cleft(%201%20+%20%5Cfrac%201%20n%20%5Cright)%5E%7Bn+1%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>这是《数学分析 I》中大家所熟知的．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-stirling-weak" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%5Cfrac%20n%20e%20%5Cright)%5En%20%3C%20%5Cfrac%20%7Bn!%7D%20e%0A%3C%20n%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%0A"></p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>将 Lemma&nbsp;2 写成 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B(n+1)%5En%7D%7Bn%5En%7D%20%3C%20e%20%3C%20%5Cfrac%7B(n+1)%5E%7Bn+1%7D%7D%7Bn%5E%7Bn+1%7D%7D%0A"> 对 <img src="https://latex.codecogs.com/png.latex?k%20=%201,2,%20%5Cdots,%20n-1"> 做连乘 <img src="https://latex.codecogs.com/png.latex?%0A%5Cprod_%7Bk=1%7D%5E%7Bn-1%7D%20%5Cfrac%7B(k+1)%5Ek%7D%7Bk%5Ek%7D%20%3C%20e%5E%7Bn-1%7D%20%3C%20%5Cprod_%7Bk=1%7D%5E%7Bn-1%7D%20%5Cfrac%7B(k+1)%5E%7Bk+1%7D%7D%7Bk%5E%7Bk+1%7D%7D%0A"> 注意到乘积的相邻两项中，前一项的分子与后一项的分母可以约分，中间每项只余下 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%20k">，故上式可化为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bn%5E%7Bn-1%7D%7D%7B(n-1)!%7D%20%3C%20e%5E%7Bn-1%7D%20%3C%20%5Cfrac%7Bn%5En%7D%7B(n-1)!%7D%0A"> 两端再同乘 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bn!%7D%7Be%5E%7Bn%7D%7D"> 就得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%5Cfrac%20n%20e%20%5Cright)%5En%20%3C%20%5Cfrac%20%7Bn!%7D%20e%0A%3C%20n%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%0A"></p>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-stirling" class="theorem">
<p><span class="theorem-title"><strong>Theorem 3 (Stirling 公式)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0An!%20%5Csim%20%5Csqrt%7B2%20%5Cpi%20n%7D%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%20%5Cpod%7Bn%20%5Cto%20%5Cinfty%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>完整证明较复杂，这里介绍证明最后一步：已知 <img src="https://latex.codecogs.com/png.latex?n!%20%5Csim%20a%20%5Csqrt%20n%20%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En">，用 Wallis 公式对 <img src="https://latex.codecogs.com/png.latex?2%5E%7B2n%7D%20/%20%5Cbinom%7B2n%7D%7Bn%7D"> 的渐进估计确定系数 <img src="https://latex.codecogs.com/png.latex?a">．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csqrt%7B%5Cpi%20n%7D%20%5Csim%20%5Cfrac%20%7B2%5E%7B2n%7D%7D%7B%5Cbinom%7B2n%7D%7Bn%7D%7D%20=%20%5Cfrac%7B2%5E%7B2n%7D%20(n!)%5E2%7D%7B(2n)!%7D%20%5Csim%20%5Cfrac%7B2%5E%7B2n%7D%20(a%20%5Csqrt%20n%20n%5En%20e%5E%7B-n%7D)%5E2%7D%7Ba%20%5Csqrt%7B2n%7D%202%5E%7B2n%7D%20n%5E%7B2n%7D%20e%5E%7B-2n%7D%7D%20=%20%5Csqrt%7B%5Cfrac%20n%202%7D%20a%0A"></p>
<p>因此 <img src="https://latex.codecogs.com/png.latex?a=%5Csqrt%7B2%20%5Cpi%7D">．</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-stirling-binomial" class="theorem example">
<p><span class="theorem-title"><strong>Example 3</strong></span> 当 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty">，<img src="https://latex.codecogs.com/png.latex?k%20%5Cto%20%5Cinfty"> 时，用 Stirling 公式渐进估计 <img src="https://latex.codecogs.com/png.latex?%5Cbinom%20n%20k">．</p>
</div>
</div>
</div>
</div>
<div class="proof solution">
<p><span class="proof-title"><em>Solution</em>. </span><img src="https://latex.codecogs.com/png.latex?%0A%5Cbinom%20n%20k%20%5Csim%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cfrac%7Bn%5En%7D%7Bk%5Ek%20(n-k)%5E%7Bn-k%7D%7D%0A"></p>
</div>
</section>
<section id="poisson-分布" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="poisson-分布"><span class="header-section-number">4</span> Poisson 分布</h2>
<p>描述单位时间平均发生次数恒定的随机事件的概率分布．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="def-poission" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Poisson 分布)</strong></span> 若离散随机变量 <img src="https://latex.codecogs.com/png.latex?X"> 满足 <img src="https://latex.codecogs.com/png.latex?%0AP(X%20=%20k)%20=%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7De%5E%7B-%5Clambda%7D%0A"> 其中 <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%3E%200"> 是确定的常数，则随机变量 <img src="https://latex.codecogs.com/png.latex?X"> 服从 Poisson 分布．</p>
</div>
</div>
</div>
</div>
<section id="从二项分布的推导" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="从二项分布的推导"><span class="header-section-number">4.1</span> 从二项分布的推导</h3>
<p>在 <img src="https://latex.codecogs.com/png.latex?np%20=%20%5Clambda"> 的条件下，取 <img src="https://latex.codecogs.com/png.latex?P(X_n%20=%20k)%20=%20%5Cbinom%20n%20k%20p%5Ek%20(1-p)%5E%7Bn-k%7D"> 在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 上的逐点极限．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AP(X_n%20=%20k)%0A&amp;=%20%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20(1-p)%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Cbinom%7Bn%7D%7Bk%7D%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bn%5Ek%7D%20%5Cleft(%201-%5Cfrac%20%5Clambda%20n%20%5Cright)%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Clambda%5Ek%20%5Cleft(%201-%5Cfrac%20%5Clambda%20n%20%5Cright)%5En%20%5Cleft(%201-%5Cfrac%20%5Clambda%20n%20%5Cright)%5E%7B-k%7D%20%5Cbinom%7Bn%7D%7Bk%7D%20%5Cfrac%7B1%7D%7Bn%5Ek%7D%20%5C%5C%0A&amp;%5Csim%20%5Clambda%5Ek%20e%5E%7B-%5Clambda%7D%5Cbinom%7Bn%7D%7Bk%7D%20%5Cfrac%201%20%7Bn%5Ek%7D%20%5C%5C%0A&amp;=%20%5Clambda%5Ek%20e%5E%7B-%5Clambda%7D%20%5Cfrac%20%7Bn%20(n-1)%20%5Cdots%20(n-k+1)%7D%7Bk!%20n%5Ek%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7D%20e%5E%7B-%5Clambda%7D%20%5Ccdot%201%20%5Ccdot%20(1-%5Cfrac%201%20n)%20%5Cdots%20(1%20-%20%5Cfrac%7Bk-1%7D%7Bn%7D)%20%5C%5C%0A&amp;%5Csim%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7D%20e%5E%7B-%5Clambda%7D%0A%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="归一性验证" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="归一性验证"><span class="header-section-number">4.2</span> 归一性验证</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20P(X%20=%20k)%20=%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7De%5E%7B-%5Clambda%7D%20=%20%20e%5E%7B-%5Clambda%7D%20%5Csum_%7Bk=0%7D%5E%7B+%5Cinfty%7D%20%5Cfrac%7B%5Clambda%5Ek%7D%7Bk!%7D%20=%20e%5E%7B-%5Clambda%7D%20e%5E%7B%5Clambda%7D%20=%201%0A"></p>
</section>
</section>
<section id="正态分布" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="正态分布"><span class="header-section-number">5</span> 正态分布</h2>
<p>与 Poisson 分布不同，（标准）正态分布是在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 的过程中假定 <img src="https://latex.codecogs.com/png.latex?p"> 不变的情况下，对归一化（即假定期望和方差不变）后的 <img src="https://latex.codecogs.com/png.latex?X_n"> 取逐点极限得到的．</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="def-poission" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 2 (正态分布)</strong></span> 若连续随机变量 <img src="https://latex.codecogs.com/png.latex?X"> 的期望 <img src="https://latex.codecogs.com/png.latex?E(X)%20=%20%5Cmu">，方差 <img src="https://latex.codecogs.com/png.latex?D(X)%20=%20%5Csigma">，且其概率分布函数为 <img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%7D%20%5Csigma%7D%20%5Cexp%20%5Cleft(-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%20%5Csigma%5E2%7D%5Cright)%0A"> 则变量 <img src="https://latex.codecogs.com/png.latex?X"> 服从正态分布，记为 <img src="https://latex.codecogs.com/png.latex?X%20%5Csim%20N(%5Cmu,%20%5Csigma%5E2)">．</p>
<p>特别的，当 <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%200">，<img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201"> 时，变量 <img src="https://latex.codecogs.com/png.latex?X"> 服从标准正态分布 <img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cexp%20%5Cleft(-%5Cfrac%7B1%7D%7B2%7D%20x%5E2%5Cright)%0A"></p>
</div>
</div>
</div>
</div>
<section id="从二项分布的推导de-moivre-laplace-定理" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="从二项分布的推导de-moivre-laplace-定理"><span class="header-section-number">5.1</span> 从二项分布的推导（de Moivre-Laplace 定理）</h3>
<p>设随机变量 <img src="https://latex.codecogs.com/png.latex?X_n%20%5Csim%20B(n,p)">．方便起见，令 <img src="https://latex.codecogs.com/png.latex?q%20=%201-p">．众所周知，二项分布的期望与方差满足 <img src="https://latex.codecogs.com/png.latex?E(X_n)%20=%20np">，<img src="https://latex.codecogs.com/png.latex?D(X_n)%20=%20npq">．</p>
<p>对随机变量 <img src="https://latex.codecogs.com/png.latex?X_n"> 做归一化： <img src="https://latex.codecogs.com/png.latex?%0A%5Cbar%20X_n%20=%20%5Cfrac%7BX_n%20-%20E(X_n)%7D%7B%5Csqrt%7BD(X_n)%7D%7D%20=%20%5Cfrac%7BX_n%20-%20np%7D%7B%5Csqrt%7Bnpq%7D%7D%0A"> 考虑到 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbar%20X_n%20=%20x)%20=%20P(X_n%20=%20np%20+%20x%20%5Csqrt%7Bnpq%7D)%0A"> 令 <img src="https://latex.codecogs.com/png.latex?k%20=%20np%20+%20x%20%5Csqrt%7Bnpq%7D">，则 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbar%20X_n%20=%20x)%20=%20P(X_n%20=%20k)%20=%20%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20q%5E%7Bn-k%7D%0A"> 此时 <img src="https://latex.codecogs.com/png.latex?n,k"> 均趋于无穷大，故可应用 Example&nbsp;3 对二项式系数做出估计 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20q%5E%7Bn-k%7D%0A&amp;%5Csim%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cfrac%7Bn%5En%7D%7Bk%5Ek%20(n-k)%5E%7Bn-k%7D%7D%20p%5Ek%20q%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cleft(%20%5Cfrac%7Bnp%7D%7Bk%7D%20%5Cright)%5E%7Bk%7D%20%5Cleft(%20%5Cfrac%7Bnq%7D%7Bn-k%7D%20%5Cright)%5E%7Bn-k%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%20%5Cexp%7B%5Cleft(%20k%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D%20+%20(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D%20%5Cright)%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>下面分别处理 <img src="https://latex.codecogs.com/png.latex?k%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D"> 和 <img src="https://latex.codecogs.com/png.latex?(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D">．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ak%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D%0A&amp;=%20-(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cfrac%7Bnp%20+%20x%20%5Csqrt%7Bnpq%7D%7D%7Bnp%7D%7D%20%5C%5C%0A&amp;=%20-(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cleft(%201%20+%20x%20%5Csqrt%7B%5Cfrac%20q%20%7Bnp%7D%7D%20%5Cright)%7D%20%5C%5C%0A&amp;=%20-(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20%5Cleft(%20x%20%5Csqrt%7B%5Cfrac%20q%20%7Bnp%7D%7D%20-%20%5Cfrac%7Bx%5E2%20q%7D%7B2np%7D%20+%20o%5Cleft(%20%5Cfrac%201%20n%20%5Cright)%20%5Cright)%20%5C%5C%0A&amp;=%20-x%20%5Csqrt%7Bnpq%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20x%5E2%20q%20-%20x%5E2%20q%20+%20o(1)%0A%5Cend%7Baligned%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D%0A&amp;=%20-(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cfrac%7Bnq%20-%20x%20%5Csqrt%7Bnpq%7D%7D%7Bnq%7D%7D%20%5C%5C%0A&amp;=%20-(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%20%5Cln%7B%5Cleft(%201%20-%20x%20%5Csqrt%7B%5Cfrac%20p%20%7Bnq%7D%7D%20%5Cright)%7D%20%5C%5C%0A&amp;=%20(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%20%5Cleft(%20x%20%5Csqrt%7B%5Cfrac%20p%20%7Bnq%7D%7D%20+%20%5Cfrac%7Bx%5E2%20p%7D%7B2nq%7D%20+%20o%5Cleft(%20%5Cfrac%201%20n%20%5Cright)%20%5Cright)%20%5C%5C%0A&amp;=%20x%20%5Csqrt%7Bnpq%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20x%5E2%20p%20-%20x%5E2%20p%20+%20o(1)%0A%5Cend%7Baligned%7D%0A"></p>
<p>因此 <img src="https://latex.codecogs.com/png.latex?%0Ak%20%5Cln%7B%5Cfrac%7Bnp%7D%7Bk%7D%7D%20+%20(n-k)%20%5Cln%7B%5Cfrac%7Bnq%7D%7Bn-k%7D%7D%20=%20-%20%5Cfrac%7B1%7D%7B2%7D%20x%5E2%20(p+q)%20+%20o(1)%20=%20-%20%5Cfrac%201%202%20x%5E2%20+%20o(1)%0A"></p>
<p>下面处理 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D">．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20k%20(n-k)%7D%7D%0A&amp;=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20%5Cpi%20(np%20+%20x%20%5Csqrt%7Bnpq%7D)%20(nq%20-%20x%20%5Csqrt%7Bnpq%7D)%7D%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7B1%7D%7B2%20%5Cpi%20(p%20+%20x%20%5Csqrt%7B%5Cfrac%7Bpq%7D%7Bn%7D%7D)%20(q%20-%20x%20%5Csqrt%7B%5Cfrac%7Bpq%7D%7Bn%7D%7D)%7D%7D%20%5C%5C%0A&amp;=%20%5Csqrt%7B%5Cfrac%7B1%7D%7B2%20%5Cpi%20n%20p%20q%20+%20o(1)%7D%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>将上述结果代回，我们就得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cbinom%7Bn%7D%7Bk%7D%20p%5Ek%20q%5E%7Bn-k%7D%0A&amp;%5Csim%20%5Csqrt%7B%5Cfrac%7B1%7D%7B2%20%5Cpi%20n%20p%20q%20+%20o(1)%7D%7D%20%5Cexp%7B%5Cleft(%20-%20%5Cfrac%201%202%20x%5E2%20+%20o(1)%20%5Cright)%7D%20%5C%5C%0A&amp;%5Csim%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%20n%20p%20q%7D%7D%20%5Cexp%7B%5Cleft(%20-%20%5Cfrac%201%202%20x%5E2%20%5Cright)%7D%0A%5Cend%7Baligned%7D%0A"> 即 <img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbar%20X_n%20=%20x)%20=%20P(X_n%20=%20k)%20%5Csim%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%20=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%5Cfrac%7B(k-np)%5E2%7D%7B2npq%7D%20%5Cright)%0A"> 这正是我们想要的．</p>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>细心的同学可能会对式子前边的系数仍是 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 时的无穷小产生疑问．事实上，在将 <img src="https://latex.codecogs.com/png.latex?X_n"> 归一化为 <img src="https://latex.codecogs.com/png.latex?%5Cbar%20X_n"> 的过程中，我们将整个变量“压缩”至原来的 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Csqrt%7Bnpq%7D%7D">，因此前面的系数可以理解为一种类似 <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bd%7D%5C!x"> 的存在．关于归一化的直观理解，3Blue1Brown 的中心极限定理视频<span class="citation" data-cites="3b1b-clt">[3]</span>提供了很好的讲解．</p>
<p>更形式化的，由于归一化得到的离散型随机变量 <img src="https://latex.codecogs.com/png.latex?%5Cbar%20X_n"> 在 <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%20%5Cinfty"> 的过程中已经变成连续型随机变量 <img src="https://latex.codecogs.com/png.latex?X">，我们研究的对象也应从单点转向区间．因此，对 <img src="https://latex.codecogs.com/png.latex?X_n"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cbar%20X_n"> 概率分布的叙述做一点变动 <img src="https://latex.codecogs.com/png.latex?%0AP%5Cleft(x%20%5Cleq%20%5Cbar%20X_n%20%3C%20x%20+%20%5Cfrac%201%20%7B%5Csqrt%7Bnpq%7D%7D%5Cright)%0A=%20P%5Cleft(k%20%5Cleq%20X_n%20%3C%20k%20+%201%20%5Cright)%0A=%20P(X_n=k)%20%5Csim%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%0A"> 令区间大小趋于 <img src="https://latex.codecogs.com/png.latex?0"> 就得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af(x)%20&amp;=%20%5Clim_%7Bh%20%5Cto%200%7D%7B%5Cfrac%7BP(x%20%5Cleq%20X%20%3C%20x+h)%7D%7Bh%7D%7D%20%5C%5C%0A&amp;=%20%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csqrt%7Bnpq%7D%20%5Ccdot%20P%5Cleft(x%20%5Cleq%20%5Cbar%20X_n%20%3C%20x%20+%20%5Cfrac%201%20%7B%5Csqrt%7Bnpq%7D%7D%5Cright)%20%5C%5C%0A&amp;=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csqrt%7Bnpq%7D%20%5Ccdot%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%20npq%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%20&amp;%20%5Cdots%20%5Ctext%7B%E8%BF%99%E9%87%8C%20$%5Csim$%20%E8%A1%A8%E7%8E%B0%E4%B8%BA%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F%E6%9B%BF%E6%8D%A2%7D%20%5C%5C%0A&amp;=%20%5Cfrac%201%20%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cexp%20%5Cleft(%20-%7B%5Cfrac%201%202%20x%5E2%7D%20%5Cright)%0A%5Cend%7Baligned%7D%0A"> 这才是我们真正想要的，由二项分布归一化后取极限得到的，标准正态分布的概率密度函数．</p>
</div>
</section>
</section>
<section id="challenge" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="challenge"><span class="header-section-number">6</span> Challenge</h2>
<p>选讲或留作课后讨论．</p>
<section id="中心极限定理要求下正态分布的唯一性" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="中心极限定理要求下正态分布的唯一性"><span class="header-section-number">6.1</span> 中心极限定理要求下正态分布的唯一性</h3>
<p>正态分布概率密度函数 <img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%5E2%7D"> 的形式是如何被确定的？怎么说明这形式是满足中心极限定理的独一无二的概率密度函数？</p>
<p>3Blue1Brown 关于正态分布的系列视频较完整的解答了上述疑问，下面是推导思路的提纲．</p>
<p>首先需要意识到，随机变量之和的概率分布即原变量概率密度函数的卷积．</p>
<p>形式化的唯一性证明一般分为两步：</p>
<ul>
<li>使用 moment generating function 的方法证明，任一分布的概率密度函数的各次卷积所构成的函数列一定收敛，且收敛至的函数与初始选取的分布无关．</li>
<li>验证正态分布概率密度函数的卷积仍有 <img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%5E2%7D"> 的形式．</li>
</ul>
<p>这是严谨但并不令人满意的．我们需要更“几何”化的理解来理解 <img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%5E2%7D"> 的这种唯一性，即为什么只有 <img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%5E2%7D"> 在卷积下具有形式不变性．（需要指出的是，3Blue1Brown 的系列视频中，下面部分的严谨性不够充分，有待进一步研究）</p>
<p>Herschel-Maxwell derivation 指出，若二维概率分布满足以下两个条件：</p>
<ul>
<li>该分布具有各向同性，即该二维分布概率密度函数在某点处的取值只与该点离原点的距离有关</li>
<li>分布关于 <img src="https://latex.codecogs.com/png.latex?x,y"> 坐标轴独立，即该二维分布的概率密度函数可写为 <img src="https://latex.codecogs.com/png.latex?f(x)f(y)"> 的形式．</li>
</ul>
<p>则一维情形下此分布的概率密度函数被唯一地确定为具有 <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20e%5E%7Bc%20x%5E2%7D"> 的形式．当然需要假设 <img src="https://latex.codecogs.com/png.latex?f(x)"> 连续，并在最后做归一化处理．</p>
<p>两个随机变量 <img src="https://latex.codecogs.com/png.latex?X,Y"> 的和 <img src="https://latex.codecogs.com/png.latex?X+Y"> 的概率密度函数可被视为这两个随机变量的 Descartes 积 <img src="https://latex.codecogs.com/png.latex?(X,Y)"> 的二元概率密度函数“切片”并按面积（除掉 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%202"> 的常数因子后）“投影”至 <img src="https://latex.codecogs.com/png.latex?y=-x"> 上的结果．</p>
<p>考虑中心极限定理．两个独立同分布变量相加，这已经满足了二维分布独立性的要求．若考虑要求卷积后形式不变，也有必要要求二维分布的各项同性（这样一来，沿 <img src="https://latex.codecogs.com/png.latex?y=-x"> 方向的“切片”的形状与坐标轴向的“切片”只有一个常数因子 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%202"> 的差别）．因此，中心极限定理某种意义上正好对应了 Herschel-Maxwell derivation 的要求，从而唯一确定了正态分布概率密度函数 <img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%5E2%7D"> 的形式．</p>
</section>
<section id="正态分布的归一性验证maxwell-速率分布与高维球体表面积" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="正态分布的归一性验证maxwell-速率分布与高维球体表面积"><span class="header-section-number">6.2</span> 正态分布的归一性验证、Maxwell 速率分布与高维球体表面积</h3>
<p>Guass 积分： <img src="https://latex.codecogs.com/png.latex?%0A%5Cint_%7B-%5Cinfty%7D%5E%7B+%5Cinfty%7D%20e%5E%7B-x%5E2%7D%20%5Coperatorname%7Bd%7D%5C!x%20=%20%5Csqrt%20%5Cpi%0A"></p>
<p>Maxwell 速率分布： <img src="https://latex.codecogs.com/png.latex?%0Af(v)%20=%204%20%5Cpi%20v%5E2%20%5Cleft(%20%5Cfrac%7Bm%7D%7B2%20%5Cpi%20kT%7D%20%5Cright)%5E%7B%5Cfrac%203%202%7D%20%5Cexp%20%5Cleft(%20-%20%5Cfrac%7Bm%7D%7B2kT%7Dv%5E2%20%5Cright)%0A"></p>
<p>以及它们与高维球体表面积的联系涉及多元积分学的内容．参见 3Blue1Brown 有关 <img src="https://latex.codecogs.com/png.latex?%5Cpi"> 与正态分布的视频<span class="citation" data-cites="3b1b-pi">[4]</span>．</p>
</section>
<section id="n-的其它估计" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="n-的其它估计"><span class="header-section-number">6.3</span> <img src="https://latex.codecogs.com/png.latex?n!"> 的其它估计</h3>
<p>一种更容易想到的做法是 <img src="https://latex.codecogs.com/png.latex?%0An%20%5Cln%20n%20-%20n%20-%201%20=%20%5Cint_1%5En%20%5Cln%20x%20%5Coperatorname%7Bd%7D%5C!x%20%5Cleq%0A%5Cln%20n!%20=%20%5Csum_%7Bk=1%7D%5En%20%5Cln%20k%0A%5Cleq%20%5Cint_1%5E%7Bn+1%7D%20%5Cln%20x%20%5Coperatorname%7Bd%7D%5C!x%20=%20(n+1)%20%5Cln%20(n+1)%20-%20n%20-%202%0A"> 从而 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%20n%20e%20%5Cright)%5En%20%5Cleq%20e%20%5Ccdot%20n!%20%5Cleq%20%5Cleft(%5Cfrac%7Bn+1%7D%7Be%7D%5Cright)%5E%7Bn+1%7D%0A"> 当然这比 Theorem&nbsp;2 的估计稍差．</p>
<p>更多估计可参考这篇文章<span class="citation" data-cites="hijjjjq">[5]</span>．</p>
</section>
<section id="wallis-公式的其它证明" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="wallis-公式的其它证明"><span class="header-section-number">6.4</span> Wallis 公式的其它证明</h3>
<p>3Blue1Brown 频道提供了一个几何风格的证明<span class="citation" data-cites="3b1b-wallis">[6]</span>，其与 Bassel 问题的 Euler 解法有着神秘的联系．事实上，Euler 对 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Csin%20x%7D%7Bx%7D"> 的无穷乘积拆解也可用于证明 Wallis product，参见 Wikipedia<span class="citation" data-cites="wp-wallis">[7]</span>．</p>
</section>
<section id="wallis-公式视角下三阶乘与中心三项式系数的渐进估计" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="wallis-公式视角下三阶乘与中心三项式系数的渐进估计"><span class="header-section-number">6.5</span> Wallis 公式视角下三阶乘与中心三项式系数的渐进估计</h3>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-triple-factorial-1" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 2</strong></span> 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(3n-2)!!!%7D%7B(3n)!!!%7D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B1%20%5Ctimes%204%20%5Ctimes%207%20%5Ctimes%20%5Cdots%20%5Ctimes%20(3n-2)%7D%7B3%20%5Ctimes%206%20%5Ctimes%209%20%5Ctimes%20%5Cdots%20%5Ctimes%203n%7D%0A"> 并对其做出渐进估计．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-triple-factorial-2" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 3</strong></span> 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(3n-1)!!!%7D%7B(3n)!!!%7D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B2%20%5Ctimes%205%20%5Ctimes%208%20%5Ctimes%20%5Cdots%20%5Ctimes%20(3n-1)%7D%7B3%20%5Ctimes%206%20%5Ctimes%209%20%5Ctimes%20%5Cdots%20%5Ctimes%203n%7D%0A"> 并对其做出渐进估计．</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exr-trinomial" class="theorem exercise">
<p><span class="theorem-title"><strong>Exercise 4</strong></span> 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Cfrac%7B(3n)!%20/%20(n!)%5E3%7D%7B3%5E%7B3n%7D%7D%0A"> 并对其做出渐进估计．</p>
</div>
</div>
</div>
</div>
<p>用 Stirling 公式计算得到的结果是 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Csqrt%203%7D%7B2%20%5Cpi%20n%7D%0A"> 但在 Wallis 公式的视角下如何获得？</p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix" data-number="7"><h2 class="anchored quarto-appendix-heading"><span class="header-section-number">7</span> Acknowledgments</h2><div class="quarto-appendix-contents">

<p>感谢吕老师组织<del>我最喜欢的</del>研讨课环节．此外，Example&nbsp;1 的放缩技巧由“吸取教训”同学提供，Poisson 分布的二项分布推导是与“抱头蹲防”同学讨论的结果，在此表示感谢．</p>



</div></section><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-analysis" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">张筑生, <em>数学分析新讲（重排本）（第二册）</em>, 2nd ed. 北京: 北京大学出版社, 2021.</div>
</div>
<div id="ref-prob" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">张颢, <em>概率论</em>. 北京: 高等教育出版社, 2018.</div>
</div>
<div id="ref-3b1b-clt" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">3Blue1Brown, <span>“Why is the "central limit" a normal distribution?”</span> <a href="https://www.youtube.com/watch?v=d_qvLDhkg00" class="uri">https://www.youtube.com/watch?v=d_qvLDhkg00</a>, 2023.</div>
</div>
<div id="ref-3b1b-pi" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">3Blue1Brown, <span>“Why π is in the normal distribution (beyond integral tricks).”</span> <a href="https://www.youtube.com/watch?v=cy8r7WSuT1I" class="uri">https://www.youtube.com/watch?v=cy8r7WSuT1I</a>, 2023.</div>
</div>
<div id="ref-hijjjjq" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">hijjjjq, <span>“对n的阶乘（n!）进行估计.”</span> <a href="https://zhuanlan.zhihu.com/p/552658420" class="uri">https://zhuanlan.zhihu.com/p/552658420</a>, 2022.</div>
</div>
<div id="ref-3b1b-wallis" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">3Blue1Brown, <span>“The wallis product for pi, proved geometrically.”</span> <a href="https://www.youtube.com/watch?v=8GPy_UMV-08" class="uri">https://www.youtube.com/watch?v=8GPy_UMV-08</a>, 2018.</div>
</div>
<div id="ref-wp-wallis" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">Wikipedia, <span>“Wallis product.”</span> <a href="https://en.wikipedia.org/wiki/Wallis_product#Proof_using_Euler's_infinite_product_for_the_sine_function" class="uri">https://en.wikipedia.org/wiki/Wallis_product#Proof_using_Euler's_infinite_product_for_the_sine_function</a>.</div>
</div>
</div></section></div> ]]></description>
  <category>math</category>
  <category>analysis</category>
  <category>probability</category>
  <category>lecture notes</category>
  <guid>https://blog.sun123zxy.top/posts/20230423-stirling/</guid>
  <pubDate>Sun, 23 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>一些数论算法的时间复杂度分析</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230418-complexity/</link>
  <description><![CDATA[ 




<section id="预备" class="level2" data-number="">
<h2 data-number="" class="anchored" data-anchor-id="预备"><span class="header-section-number"></span> 预备</h2>
<section id="渐进符号" class="level3" data-number="0.1">
<h3 data-number="0.1" class="anchored" data-anchor-id="渐进符号"><span class="header-section-number">0.1</span> 渐进符号</h3>
<p>其实不少高等数学 / 数学分析教材在讲解无穷小的比较时已经相当严谨地介绍过大 O、小 O 记号，然而各种历史习惯记法的符号滥用（abuse of notation）<span class="citation" data-cites="wikipedia_abuse">[1]</span> 直到现在都让笔者头疼. These notations seem to be innocent, but can be catastrophic without careful manipulation. 例如</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-error-1" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 (反例 1)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0An%20=%20O(n%5E2)%20%5Cland%20n%5E2%20=%20O(n%5E2)%20%5Cimplies%20n%20=%20n%5E2%0A"></p>
</div>
</div>
</div>
</div>
<p>Knuth 在《具体数学》里举出的例子 <span class="citation" data-cites="concretemath_onotation">[2]</span>. “<img src="https://latex.codecogs.com/png.latex?=">” 隐含的对称性使其在 <img src="https://latex.codecogs.com/png.latex?g(x)%20=%20O(f(x))"> 中格格不入. 事实上，将 <img src="https://latex.codecogs.com/png.latex?O(f(x))"> 看作“阶不高于 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的所有函数的集合”是比“某个阶不高于 <img src="https://latex.codecogs.com/png.latex?f(x)"> 的函数”更严谨的理解. 因此，本文将使用 <img src="https://latex.codecogs.com/png.latex?f(x)%20%5Cin%20O(g(x))"> （有时也记为 <img src="https://latex.codecogs.com/png.latex?O(f(x))%20%5Csubset%20O(g(x))">）的集合论符号代替传统的 <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20O(g(x))"> 记法.</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-error-2" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 (反例 2)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0An%5E2%20%5Csin%20n%20%5Cin%20O(n%5E2)%20%5Cimplies%20%5Csum_%7Bi=1%7D%5En%20i%5E2%20%5Csin%20i%20%5Cin%20%5Csum_%7Bi=1%7D%5En%20O(i%5E2)%20%5Csubset%20O%5Cleft(%20%5Csum_%7Bi=1%7D%5En%20i%5E2%20%5Cright)%20%5Csubset%20O(n%5E3)%0A"> 或更一般的， <img src="https://latex.codecogs.com/png.latex?%0Ag(x)%20%5Cin%20O(f(x))%20%5Cimplies%20%5Csum_%7BP(n,i)%7D%20g(i)%20%5Cin%20%5Csum_%7BP(n,i)%7D%20O(f(i))%20%5Csubset%20O%20%5Cleft(%5Csum_%7BP(n,i)%7D%20f(i)%20%5Cright)%0A"></p>
</div>
</div>
</div>
</div>
<p>没看出有啥问题，对吧？笔者在写作此文时犯了同样的错误. 请注意，大 O 记号的作用对象是函数，<img src="https://latex.codecogs.com/png.latex?f(i)"> 是什么？它只是个函数值，是确定的数——这是因为 <img src="https://latex.codecogs.com/png.latex?i"> 也是求和枚举中确定的数，而不是 <img src="https://latex.codecogs.com/png.latex?n"> 这种真正代表变元的记号. 所以 <img src="https://latex.codecogs.com/png.latex?O(f(i))"> 是什么？它什么也不是.</p>
<p>这种错误的出现是在所难免的，我们太习惯用 <img src="https://latex.codecogs.com/png.latex?x">、<img src="https://latex.codecogs.com/png.latex?x%5E3%20+%205%20x%5E2%20+%20x"> 这种变元都不明确的记号来表示函数了<span class="citation" data-cites="wikipedia_abuse">[1]</span>. 写成 <img src="https://latex.codecogs.com/png.latex?f(x)"> 也不严谨，因为只有 <img src="https://latex.codecogs.com/png.latex?f"> 才应代表函数本身，<img src="https://latex.codecogs.com/png.latex?f(x)"> 只能是函数值. 这样我们就可以放心地写下 <img src="https://latex.codecogs.com/png.latex?O(f)">，不用担心把变元与确定值弄混了.</p>
<p>然而大家还是喜欢写 <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> 和 <img src="https://latex.codecogs.com/png.latex?O(e%5E%7Bn%5E2%7D)">，而不是奇怪的 <img src="https://latex.codecogs.com/png.latex?O(%5Cmathrm%7Bid%7D%5E2)"> 和 <img src="https://latex.codecogs.com/png.latex?O(%5Cmathrm%7Bexp%7D%20%5Ccirc%20%7B%5Cmathrm%7Bid%7D%5E2%7D)">. 所以，我们大概只能沿用这种不太严谨的记号，并时刻提醒自己加倍小心了. （形如 <img src="https://latex.codecogs.com/png.latex?x%20%5Cmapsto%20e%5E%7Bx%5E2%7D"> 的 <img src="https://latex.codecogs.com/png.latex?%5Clambda"> 风格“匿名函数”记号可能更好？）</p>
<p>但上述命题从结论上是正确的. 正确的推导过程应为 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7BP(n,i)%7D%20g(i)%20%5Cleq%20%5Csum_%7BP(n,i)%7D%20C%20f(i)%20%5Cleq%20C%20%5Csum_%7BP(n,i)%7D%20f(i)%20%5Cin%20O%20%5Cleft(%5Csum_%7BP(n,i)%7D%20f(i)%20%5Cright)%5C%0A"> 第一步是直接由大 O 记号的定义得到的结果.</p>
<p>Wikipedia <span class="citation" data-cites="asymptotic_wikipedia">[3]</span> 中有一张详尽的表格介绍了各种渐进符号的定义，OI Wiki <span class="citation" data-cites="asymptotic_oiwiki">[4]</span> 上也有极好的讲解，尚不熟练的读者可以参考. 有兴趣仔细研究的读者可以参考《具体数学》第九章 <span class="citation" data-cites="concretemath_onotation">[2]</span>、Wikipedia 及其 reference（个人推荐 Knuth 关于 <img src="https://latex.codecogs.com/png.latex?O">、<img src="https://latex.codecogs.com/png.latex?%5COmega">、<img src="https://latex.codecogs.com/png.latex?%5CTheta"> 的短文 <span class="citation" data-cites="knuth_omicron">[5]</span>）. 本文除用 “<img src="https://latex.codecogs.com/png.latex?%5Cin">” 和“<img src="https://latex.codecogs.com/png.latex?%5Csubset">”替代 “<img src="https://latex.codecogs.com/png.latex?=">” 外，完全使用 Knuth 提议的记号体系.</p>
</section>
<section id="调和数-hn-调和级数" class="level3" data-number="0.2">
<h3 data-number="0.2" class="anchored" data-anchor-id="调和数-hn-调和级数"><span class="header-section-number">0.2</span> 调和数 <img src="https://latex.codecogs.com/png.latex?H(n)"> / 调和级数</h3>
<p>调和级数的部分和 <img src="https://latex.codecogs.com/png.latex?H(n)"> 定义为 <img src="https://latex.codecogs.com/png.latex?%0AH(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Cfrac%201%20i%0A"> 通过一些与 <img src="https://latex.codecogs.com/png.latex?e"> 有关的数列放缩可以证明 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20(%20H(n)%20-%20%5Clog%20n%20)%20=%20c">，其中 <img src="https://latex.codecogs.com/png.latex?c%20%5Capprox%200.577"> 是 Euler 常数. 因此 <img src="https://latex.codecogs.com/png.latex?H(n)%20%5Csim%20%5Clog%20n%20%5Cin%20%5CTheta(%5Clog%20n)">.</p>
</section>
<section id="自然数等幂和-p_pn-p---级数" class="level3" data-number="0.3">
<h3 data-number="0.3" class="anchored" data-anchor-id="自然数等幂和-p_pn-p---级数"><span class="header-section-number">0.3</span> 自然数等幂和 <img src="https://latex.codecogs.com/png.latex?P_p(n)"> / <img src="https://latex.codecogs.com/png.latex?p"> - 级数</h3>
<p><img src="https://latex.codecogs.com/png.latex?p"> - 级数可视为调和级数的推广. 其部分和定义为 <img src="https://latex.codecogs.com/png.latex?P_p(n)%20=%20%5Csum_%7Bi=1%7D%5En%20i%5E%7B-p%7D">．<img src="https://latex.codecogs.com/png.latex?p"> - 级数具有如下性质：</p>
<ul>
<li>当 <img src="https://latex.codecogs.com/png.latex?p%20%3E%201"> 时，<img src="https://latex.codecogs.com/png.latex?p"> - 级数收敛；</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?p%20=%201"> 时，<img src="https://latex.codecogs.com/png.latex?p"> - 级数是调和级数；</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20p%20%3C%201"> 时，我们指出 <img src="https://latex.codecogs.com/png.latex?P_p(n)%20%5Csim%20%5Cfrac%7B1%7D%7B1-p%7D%20n%5E%7B1-p%7D%20%5Cin%20%5CTheta(n%5E%7B1-p%7D)"></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20p%20%3C%201"> 时 <img src="https://latex.codecogs.com/png.latex?p"> - 级数的渐进估计可以从连续幂函数积分的角度理解. 证明这渐进性，离散情况下，可对 <img src="https://latex.codecogs.com/png.latex?n%5Ep"> 差分后前缀和 + 二项式定理得到高次项系数，或可用离散微积分理论得到精确表示（参见《具体数学》<span class="citation" data-cites="concretemath_calculus">[6]</span>）；连续情况下，Lagrange 中值定理应为较简单的估计方法. 这里从略. 总之，我们得到： <img src="https://latex.codecogs.com/png.latex?%0AP_p(n)%20%5Cin%20%5Cbegin%7Bcases%7D%0A%5CTheta(n%5E%7B1-p%7D)%20&amp;%20p%20%3C%201%20%5C%5C%0A%5CTheta(%5Clog%20n)%20&amp;%20p%20=%201%20%5C%5C%0A%5CTheta(1)%20&amp;%20p%20%3E%201%0A%5Cend%7Bcases%7D%0A"></p>
</section>
</section>
<section id="约数函数-sigma_zn" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="约数函数-sigma_zn"><span class="header-section-number">1</span> 约数函数 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"></h2>
<p>约数函数（Divisor Function，也可称为除数函数、因数函数）是与 <img src="https://latex.codecogs.com/png.latex?n"> 的因子有关的一类函数，定义为 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)%20=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20d%5Ez">．当 <img src="https://latex.codecogs.com/png.latex?z=0"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)"> 被称为约数个数函数（number-of-divisors function），常被记为 <img src="https://latex.codecogs.com/png.latex?d(n)"> 或 <img src="https://latex.codecogs.com/png.latex?%5Ctau(n)">. 当 <img src="https://latex.codecogs.com/png.latex?z=1"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_1(n)"> 被称为约数和函数（sum-of-divisors function），常直接记为 <img src="https://latex.codecogs.com/png.latex?%5Csigma(n)">.</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-sigma0ub" class="theorem example">
<p><span class="theorem-title"><strong>Example 3</strong></span> 估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0%20(n)"> 的渐进上界.</p>
</div>
</div>
</div>
</div>
<p>也就是估计 <img src="https://latex.codecogs.com/png.latex?n"> 的因子的数量. 一个广为人知的上界是 <img src="https://latex.codecogs.com/png.latex?2%20%5Csqrt%20n">，因为 <img src="https://latex.codecogs.com/png.latex?n"> 的所有小于 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%20n"> 的因子 <img src="https://latex.codecogs.com/png.latex?d"> 均与另一因子 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20n%20d"> 一一对应.</p>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>事实上进一步可以证明 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20o(n%5E%5Cepsilon)%20%5Cquad%20%5Cforall%20%5Cepsilon%20%3E%200">，或更精确的，<img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20O(n%5E%7B%5Clog%202%20/%20%5Clog%20%5Clog%20n%7D)"> <span class="citation" data-cites="wikipedia_divisor">[7]</span>．这一点说明，在实现与枚举因子有关的算法时，虽然仍会从 <img src="https://latex.codecogs.com/png.latex?1"> 枚举至 <img src="https://latex.codecogs.com/png.latex?%5Csqrt%20n"> 探测因子，但真正参与计算的因子其实相当少．因此，这些算法的实际表现往往极大程度地优于按 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20O(%5Csqrt%20n)"> 估计的理论时间复杂度．</p>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-sumsigma0ub" class="theorem example">
<p><span class="theorem-title"><strong>Example 4</strong></span> 估计 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma_0%7D(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_0%20(i)"> 的渐进上界.</p>
</div>
</div>
</div>
</div>
<p>即估计 <img src="https://latex.codecogs.com/png.latex?1"> 到 <img src="https://latex.codecogs.com/png.latex?n"> 中所有数因子个数的和. 这是一个形式上鲜为人知但其应用广为人知的例子. 变换求和顺序，容易得到 <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Csigma_0%7D(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_0%20(i)%0A=%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bd%20%5Cmid%20i%7D%201%0A=%20%5Csum_%7Bd=1%7D%5En%20%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%0A%5Cleq%20%5Csum_%7Bd=1%7D%5En%20%5Cfrac%20n%20d%0A=%20n%20H(n)%20%5Cin%20O(n%20%5Clog%20n)%0A"></p>
<p>显然，这比 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Csqrt%20n)"> 的平凡估计好上不少. 本例的思路不仅是埃氏筛（Sieve of Eratosthenes）的理论基础，也在杜教筛、快速 Mobius 变换、<img src="https://latex.codecogs.com/png.latex?%5Cgcd"> 卷积 <span class="citation" data-cites="gcdconv">[8]</span> 等处出现.</p>
<p>进一步利用此技巧和 <img src="https://latex.codecogs.com/png.latex?p"> - 级数的估计，我们甚至能在仔细研究 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"> 前就得到其前缀和的渐进估计：</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-sumsigmazub" class="theorem example">
<p><span class="theorem-title"><strong>Example 5</strong></span> 估计 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma_z%7D(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_z%20(i)"> 的渐进上界.</p>
</div>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Chat%7B%5Csigma_z%7D(n)%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20%5Csigma_z%20(i)%0A=%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bd%20%5Cmid%20i%7D%20d%5Ez%0A=%20%5Csum_%7Bd=1%7D%5En%20d%5Ez%20%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%20%5C%5C%0A&amp;%5Cleq%20n%20%5Csum_%7Bd=1%7D%5En%20d%5E%7Bz-1%7D%0A=%20n%20P_%7B1-z%7D(n)%0A%5Cin%20%5Cbegin%7Bcases%7D%0AO(n%5E%7Bz+1%7D)%20&amp;%20z%20%3E%200%20%5C%5C%0AO(n%20%5Clog%20n)%20&amp;%20z%20=%200%20%5C%5C%0AO(n)%20&amp;%20z%20%3C%200%0A%5Cend%7Bcases%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>遗憾的是，对此前缀和做差分并不能得到 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"> 的优秀估计.</p>
<p>现在引入一个重要放缩技巧，其在后续估计中屡试不爽.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-trick1" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 1</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cmid%20n%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5En%20f%20(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%0A"></p>
</div>
</div>
</div>
</div>
<p>右式比左式多算了 <img src="https://latex.codecogs.com/png.latex?i%20%5Cnmid%20n"> 的项，因此命题是正确的. 但我们还可以做得更好：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-trick1ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 2</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cmid%20n%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20f(i)%20+%20f(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%0A"></p>
</div>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Csqrt%20n"> 分治. 我们其实已经在 Example&nbsp;3 估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)"> 时用过此技巧了.</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-sigma1ub" class="theorem example">
<p><span class="theorem-title"><strong>Example 6</strong></span> 估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20(n)"> 的渐进上界.</p>
</div>
</div>
</div>
</div>
<p>用 Proposition&nbsp;1： <img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_1%20(n)%0A=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20d%20%5Cleq%20%5Csum_%7Bi=1%7D%5En%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20%5Cleq%20n%20H(n)%20%5Cin%20O(n%20%5Clog%20n)%0A"></p>
<p>可以证明用 Proposition&nbsp;2 不会得到更优的结果.</p>
<p>我们发现了一个有趣的事实：<img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20(n)"> 和 <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma_0%7D(n)"> 的渐进上界均为 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">.</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-sigmazub" class="theorem example">
<p><span class="theorem-title"><strong>Example 7</strong></span> 估计 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z%20(n)"> 的渐进上界.</p>
</div>
</div>
</div>
</div>
<p>用 Proposition&nbsp;2 和 <img src="https://latex.codecogs.com/png.latex?p"> - 级数的性质： <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csigma_z%20(n)%0A&amp;=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20d%5Ez%0A%5Cleq%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20i%5Ez%20+%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%5Ez%20%5C%5C%0A&amp;%5Cleq%20%5Cbegin%7Bcases%7D%0A%5Cdisplaystyle%202%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%5Ez%20%5Cleq%202%20n%5Ez%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20i%5E%7B-z%7D%20&amp;%20=%202%20n%5Ez%20P_z(%5Csqrt%20n)%20&amp;%20z%20%5Cgeq%200%5C%5C%0A%5Cdisplaystyle%202%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20i%5Ez%20&amp;%20=%202%20P_%7B-z%7D(%5Csqrt%20n)%20%20&amp;%20z%20%3C%200%0A%5Cend%7Bcases%7D%20%5C%5C%0A%5Cin%20&amp;%20%5Cbegin%7Bcases%7D%0A2%20n%5Ez%20O(1)%20&amp;%20z%20%3E%201%20%5C%5C%0A2%20n%20O(%5Clog%20%5Csqrt%20n)%20&amp;%20z%20=%201%20%5C%5C%0A2%20n%5Ez%20O(n%5E%7B%5Cfrac%20%7B1-z%7D%202%7D)%20&amp;%200%20%5Cleq%20z%20%3C%201%20%5C%5C%0A2%20O(n%5E%7B%5Cfrac%20%7B1+z%7D%202%7D)%20&amp;%20-1%20%3C%20z%20%3C%200%20%5C%5C%0A2%20O(%5Clog%20%5Csqrt%20n)%20&amp;%20z%20=%20-1%20%5C%5C%0A2%20O(1)%20&amp;%20z%20%3C%20-1%0A%5Cend%7Bcases%7D%0A=%20%5Cbegin%7Bcases%7D%0AO(n%5Ez)%20&amp;%20z%20%3E%201%20%5C%5C%0AO(n%20%5Clog%20n)%20&amp;%20z%20=%201%20%5C%5C%0AO(n%5E%7B%5Cfrac%20%7B1+z%7D%202%7D)%20&amp;%20-1%20%3C%20z%20%3C%201%20%5C%5C%0AO(%5Clog%20n)%20&amp;%20z%20=%20-1%20%5C%5C%0AO(1)%20&amp;%20z%20%3C%20-1%0A%5Cend%7Bcases%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>这是一个相当优秀的渐进上界. 值得关注的是：</p>
<ul>
<li>当 <img src="https://latex.codecogs.com/png.latex?z=0"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20O(n%5E%7B%5Cfrac%201%202%7D)">. 这与 Example&nbsp;3 的结果一致.</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?z=%5Cfrac%201%202"> 时，<img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cfrac%201%202%7D(n)%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)">，即 <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bd%20%5Cmid%20n%7D%20%5Csqrt%20d%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)">. 洛谷 P4980 Polya 定理模板题 <span class="citation" data-cites="polya_luogu">[9]</span> 的一种比较 trivial 的解法 <span class="citation" data-cites="polya_my">[10]</span> 的时间复杂度证明就来源于此. 我们之后还会在整除分块与杜教筛中见到它.</li>
</ul>
<p>另外，如果只使用 Proposition&nbsp;1 ，<img src="https://latex.codecogs.com/png.latex?-1%3Cz%3C1"> 部分的渐进上界将只能估计至 <img src="https://latex.codecogs.com/png.latex?O(n)">. 因此 Proposition&nbsp;2 是更为优越的.</p>
<p>约数函数更复杂的上限与渐进估计可参考 Wikipedia <span class="citation" data-cites="wikipedia_divisor">[7]</span>.</p>
</section>
<section id="整除分块" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="整除分块"><span class="header-section-number">2</span> 整除分块</h2>
<p>也被称为数论分块. 求 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20f(i)%20g(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%0A"> 我们按 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor"> 分块求和： <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%7D%20g(d)%20%5Csum_%7B%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20=%20d%7D%20f(i)%0A"> 可以证明，对一指定的 <img src="https://latex.codecogs.com/png.latex?d">，满足 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor"> 的 <img src="https://latex.codecogs.com/png.latex?i"> 取遍一连续区间，故若 <img src="https://latex.codecogs.com/png.latex?f"> 的前缀和能 <img src="https://latex.codecogs.com/png.latex?O(1)"> 求出，块数量 <img src="https://latex.codecogs.com/png.latex?%5C#%20%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20%5Cright%5C%7D_%7Bi=1%7D%5En"> 即该算法的时间复杂度. 注意到当 <img src="https://latex.codecogs.com/png.latex?i%20%5Cleq%20%5Csqrt%20n"> 时，<img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor"> 最多只有 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clfloor%20%5Csqrt%20n%20%5Cright%5Crfloor"> 种取值，而 <img src="https://latex.codecogs.com/png.latex?i%20%5Cgeq%20%5Csqrt%20n"> 时，<img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20%5Cleq%20%5Csqrt%20n"> 表明其也最多只有 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clfloor%20%5Csqrt%20n%20%5Cright%5Crfloor"> 种取值. 因此整除分块的时间复杂度 <img src="https://latex.codecogs.com/png.latex?%0AT_1(n)%20=%20%5C#%20%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20%5Cright%5C%7D_%7Bi=1%7D%5En%20%5Cleq%202%20%5Csqrt%20n%20%5Cin%20O(%5Csqrt%20n)%0A"></p>
<p>方便起见，后文记 <img src="https://latex.codecogs.com/png.latex?D(n)%20=%20%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20%5Cright%5C%7D_%7Bi=1%7D%5En">.</p>
<section id="整除分块嵌套" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="整除分块嵌套"><span class="header-section-number">2.1</span> 整除分块嵌套</h3>
<p>将 Proposition&nbsp;2 加强，我们有如下通用放缩：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-trick2ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 3</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cmid%20n%7D%20f(d)%20%5Cleq%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%20f(i)%20+%20f(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%0A"></p>
</div>
</div>
</div>
</div>
<p>LHS 成立的关键在于 <img src="https://latex.codecogs.com/png.latex?%5C%7Bd:%20d%20%5Cmid%20n%5C%7D%20%5Csubset%20D(n)">；而 RHS 的本质就是上述对整除分块块数量上界的估计.</p>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>整除分块的 <img src="https://latex.codecogs.com/png.latex?O(%5Csqrt%20n)"> 相当满，而枚举因子的 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)%20%5Cin%20O(%5Csqrt%20n)"> 却相当不满．这一点在前面介绍 <img src="https://latex.codecogs.com/png.latex?%5Csigma_0(n)"> 时已经提到．</p>
</div>
<p>注意到 Proposition&nbsp;2 是 Example&nbsp;7 证明的核心，而 Proposition&nbsp;3 是 Proposition&nbsp;2 的加强版，故仿造 Example&nbsp;7 的证明，我们有</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-divissigma" class="theorem example">
<p><span class="theorem-title"><strong>Example 8</strong></span> 令 <img src="https://latex.codecogs.com/png.latex?%0AS_z(n)%20=%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20d%5Ez%0A"> 则前述 Example&nbsp;7 中 <img src="https://latex.codecogs.com/png.latex?%5Csigma_z(n)"> 的上界与渐进上界也同样适用于 <img src="https://latex.codecogs.com/png.latex?S_z(n)">.</p>
</div>
</div>
</div>
</div>
<p>现在可以对嵌套整除分块 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20f(i)%20%5Csum_%7Bj=1%7D%5E%7B%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%7D%20g(j)%20h(%5Cleft%5Clfloor%20%5Cfrac%20n%20%7Bij%7D%20%5Cright%5Crfloor)%0A"> 的时间复杂度 <img src="https://latex.codecogs.com/png.latex?T_2"> 做出估计了. 对 Example&nbsp;8 取 <img src="https://latex.codecogs.com/png.latex?z=%5Cfrac%201%202">，立刻有 <img src="https://latex.codecogs.com/png.latex?%0AT_2(n)%20=%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20T_1(d)%20%5Cleq%202%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20%5Csqrt%20d%20=%202%20S_%7B%5Cfrac%201%202%7D(n)%20%5Cleq%204%20%5Csqrt%20n%20P_%7B%5Cfrac%201%202%7D(%5Csqrt%20n)%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)%0A"></p>
<p>我们还可以进一步归纳. 假定 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20m%20%5Cgeq%200,%20%5Cquad%20%5Cexists%20z_m%20:%200%20%5Cleq%20z_m%20%3C%201,%20%5Cquad%20T_m(n)%20=%20O(n%5E%7Bz_m%7D)">，我们有 <img src="https://latex.codecogs.com/png.latex?%0AT_%7Bm+1%7D(n)%20=%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20T_m(d)%20%5Cleq%20C%20%5Csum_%7Bd%20%5Cin%20D(n)%7D%20n%5E%7Bz_m%7D%20=%20C%20S_%7Bz_m%7D(n)%20%5Cin%20O(n%5E%7B%5Cfrac%20%7B1+z_m%7D%202%7D)%0A"> 因此 <img src="https://latex.codecogs.com/png.latex?z_%7Bm+1%7D%20=%20%5Cfrac%20%7B1+z_m%7D%202">. 边界条件 <img src="https://latex.codecogs.com/png.latex?z_0%20=%200">，数列递推求得 <img src="https://latex.codecogs.com/png.latex?z_m%20=%201-2%5E%7B-m%7D">，检验满足条件. 因此 <img src="https://latex.codecogs.com/png.latex?m"> 重嵌套整除分块的时间复杂度 <img src="https://latex.codecogs.com/png.latex?%0AT_m(n)%20%5Cin%20O(n%5E%7B1-%202%5E%7B-m%7D%7D)%0A"></p>
</section>
</section>
<section id="杜教筛" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="杜教筛"><span class="header-section-number">3</span> 杜教筛</h2>
<p>杜教筛可以以低于线性的时间复杂度求解某些数论函数的前缀和. 其思路并不复杂. 设 <img src="https://latex.codecogs.com/png.latex?f"> 为一数论函数，我们希望快速求得其前缀和 <img src="https://latex.codecogs.com/png.latex?%5Chat%20f%20(n)%20=%20%5Csum_%7Bi=1%7D%5En%20f(i)">. 考虑数论函数 <img src="https://latex.codecogs.com/png.latex?g"> 和 <img src="https://latex.codecogs.com/png.latex?h%20=%20g%20*%20f">， <img src="https://latex.codecogs.com/png.latex?%0Ah(n)%20=%20%5Csum_%7Bd%20%5Cmid%20n%7D%20g(d)%20f(%5Cfrac%20n%20d)%0A"> 两端做前缀和得 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Chat%20h%20(n)%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20h(i)%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bd%20%5Cmid%20i%7D%20g(d)%20f(%5Cfrac%20i%20d)%20%5C%5C%0A&amp;=%20%5Csum_%7Bd=1%7D%5En%20g(d)%20%5Csum_%7Bi=1%7D%5E%7B%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%7D%20f(i)%20%5C%5C%0A&amp;=%20%5Csum_%7Bd=1%7D%5En%20g(d)%20%5Chat%20f%20(%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor)%20%5C%5C%0A&amp;=%20g(1)%20%5Chat%20f%20(n)%20+%20%5Csum_%7Bd=2%7D%5En%20g(d)%20%5Chat%20f%20(%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor)%0A%5Cend%7Baligned%7D%0A"> 因此 <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20f%20(n)%20=%20%5Cfrac%201%20%7Bg(1)%7D%20%5Cleft(%20%5Chat%20h%20(n)%20-%20%5Csum_%7Bd=2%7D%5En%20g(d)%20%5Chat%20f%20(%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor)%20%5Cright)%0A"> 故若 <img src="https://latex.codecogs.com/png.latex?g">、<img src="https://latex.codecogs.com/png.latex?h"> 的前缀和可 <img src="https://latex.codecogs.com/png.latex?O(1)"> 算得，根据上式整除分块即可递归地计算出 <img src="https://latex.codecogs.com/png.latex?f"> 的前缀和.</p>
<p>下面分析算法的复杂度. 注意到 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5Clfloor%20%5Cfrac%7B%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%7D%7Bj%7D%20%5Cright%5Crfloor%20=%20%5Cleft%5Clfloor%20%5Cfrac%7Bn%7D%7Bij%7D%20%5Cright%5Crfloor%0A"> 故单轮递归涉及到的自变量均可表示为 <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor"> 的形式. 一个 <img src="https://latex.codecogs.com/png.latex?%5Chat%20f%20(d)"> 做整除分块耗时 <img src="https://latex.codecogs.com/png.latex?T_1(d)">，若采用记忆化递归，由上节分析，算法总时间复杂度为 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%20%5Cin%20D(n)%7D%20T_1(d)%20=%20T_2(n)%20%5Cin%20O(n%5E%7B%5Cfrac%203%204%7D)%0A"></p>
<p>但我们还可以做得更好——考虑先用 <img src="https://latex.codecogs.com/png.latex?O(K)"> 的时间复杂度线性筛出前 <img src="https://latex.codecogs.com/png.latex?K"> 个 <img src="https://latex.codecogs.com/png.latex?f(n)"> 并求前缀和，则递归求解时，<img src="https://latex.codecogs.com/png.latex?d%20%5Cleq%20K"> 的 <img src="https://latex.codecogs.com/png.latex?%5Chat%20f(d)"> 就无需再向下递归了. 为分析此类时间复杂度，对 Proposition&nbsp;3 做最后一点扩展：</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-trick3ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 4</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cmid%20n%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cin%20D(n)%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7BK%20%3C%20i%20%5Cleq%20%5Csqrt%20n%7D%20f(i)%20+%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cmin%7B%5C%7B%20%5Cleft%5Clfloor%20%5Cfrac%20n%20K%20%5Cright%5Crfloor,%5Csqrt%20n%20%5C%7D%20%7D%7D%20f(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%0A"> 特别的，当 <img src="https://latex.codecogs.com/png.latex?K%20%3E%20%5Csqrt%20n"> 时，有 <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cmid%20n%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cin%20D(n)%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20f(d)%20%5Cleq%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cleft%5Clfloor%20%5Cfrac%20n%20K%20%5Cright%5Crfloor%7D%20f(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%0A"></p>
</div>
</div>
</div>
</div>
<p>利用此估计，当 <img src="https://latex.codecogs.com/png.latex?K%20%3E%20%5Csqrt%20n"> 时，算法在递归部分的时间复杂度估计降低为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathrm%7BDu%7D_K(n)%20&amp;=%0A%5Csum_%7B%5Cbegin%7Bgathered%7D%20d%20%5Cin%20D(n)%20%5C%5C%20d%20%3E%20K%20%5Cend%7Bgathered%7D%7D%20T_1(d)%20%5C%5C%0A&amp;=%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cleft%5Clfloor%20%5Cfrac%20n%20K%20%5Cright%5Crfloor%7D%20T_1(%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor)%20%5C%5C%0A&amp;%5Cleq%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cleft%5Clfloor%20%5Cfrac%20n%20K%20%5Cright%5Crfloor%7D%20C%20%5Csqrt%7B%5Cfrac%20n%20i%7D%20%5C%5C%0A&amp;=%20C%20%5Csqrt%20n%20%5Csum_%7B1%20%5Cleq%20i%20%5Cleq%20%5Cleft%5Clfloor%20%5Cfrac%20n%20K%20%5Cright%5Crfloor%7D%20i%5E%7B-%5Cfrac%201%202%7D%20%5C%5C%0A&amp;=%20%20C%20%5Csqrt%20n%20P_%7B%5Cfrac%201%202%7D%5Cleft(%5Cleft%5Clfloor%20%5Cfrac%20n%20K%20%5Cright%5Crfloor%5Cright)%20%5C%5C%0A&amp;%5Cin%20%5Csqrt%20n%20O%5Cleft(%20%5Cleft(%5Cfrac%20n%20K%5Cright)%5E%7B%5Cfrac%201%202%7D%20%5Cright)%20%5C%5C%0A&amp;%5Csubset%20O(n%20K%5E%7B-%5Cfrac%201%202%7D)%0A%5Cend%7Baligned%7D%0A"> 总时间复杂度 <img src="https://latex.codecogs.com/png.latex?%0AO(K)%20+%20O(n%20K%5E%7B-%5Cfrac%201%202%7D)%0A"> 为最小化时间复杂度，取 <img src="https://latex.codecogs.com/png.latex?K%20=%20n%5E%7B%5Cfrac%202%203%7D">，即得最优时间复杂度 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B%5Cfrac%202%203%7D)">.</p>
<p>这部分的时间复杂度证明主要参考了文章 <span class="citation" data-cites="zhihu_dusieve">[11]</span>.</p>
</section>
<section id="challenge" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="challenge"><span class="header-section-number">4</span> Challenge</h2>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-nonsquare" class="theorem example">
<p><span class="theorem-title"><strong>Example 9</strong></span> 对 <img src="https://latex.codecogs.com/png.latex?1"> 到 <img src="https://latex.codecogs.com/png.latex?n"> 间的无平方因子数计数. <img src="https://latex.codecogs.com/png.latex?n%20%5Cleq%2010%5E%7B18%7D">.</p>
<p>参见蓝桥杯 2023 省赛 A 组 J 题《翻转硬币》<span class="citation" data-cites="nonsquare1_luogu">[12]</span> 或《完全平方数》<span class="citation" data-cites="nonsquare2_luogu">[13]</span>.</p>
</div>
</div>
</div>
</div>
<p>我们指出，无平方因子数有如下计数公式 <img src="https://latex.codecogs.com/png.latex?%0Af(n)%20=%20%5Csum_%7Bi=1%7D%5En%20%5Cmu%5E2%20(i)%20=%20%5Csum_%7Bi=1%7D%5E%7B%5Cleft%5Clfloor%20%5Csqrt%20n%20%5Cright%5Crfloor%7D%20%5Cmu(i)%20%5Cleft%5Clfloor%20%5Cfrac%20n%20%7Bi%5E2%7D%20%5Cright%5Crfloor%0A"></p>
<p>朴素实现复杂度为 <img src="https://latex.codecogs.com/png.latex?O(%5Csqrt%20n)">，考虑对 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clfloor%20%5Cfrac%20n%20%7Bi%5E2%7D%20%5Cright%5Crfloor"> 开发一种新的整除分块算法. 现在问题有三. 一是估计 <img src="https://latex.codecogs.com/png.latex?%0A%5C#%20D_2(n)%20=%20%5C#%20%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%5Cfrac%20n%20%7Bi%5E2%7D%20%5Cright%5Crfloor%20%5Cright%5C%7D_%7Bi=1%7D%5E%7B%5Csqrt%20n%7D%0A"> 这并不困难，按 <img src="https://latex.codecogs.com/png.latex?i%20%5Cleq%20n%5E%7B%5Cfrac%201%203%7D"> 和 <img src="https://latex.codecogs.com/png.latex?i%20%5Cgeq%20n%5E%7B%5Cfrac%201%203%7D"> 讨论即知其上界为 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B%5Cfrac%201%203%7D)">.</p>
<p>二是实现方案. 这里也直接给出：</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1">ll sqrtN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-2">ll ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>sqrtN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-4">    d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/(</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-5">    ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=(</span>S_mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)-</span>S_mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>最后是算法时间复杂度分析. 普通的 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clfloor%20%20%5Cfrac%20n%20i%20%5Cright%5Crfloor"> 整除分块不会因杜教筛增加时间复杂度，但 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clfloor%20%20%5Cfrac%20n%20%7Bi%5E2%7D%20%5Cright%5Crfloor"> 则需要额外的讨论. 注意到该整除分块枚举中，需做杜教筛的数的集合为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%20%5Cleft(%20%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%20%5Cright)%5E%7B%5Cfrac%201%202%7D%20%20%5Cright%5Crfloor%5Cright%5C%7D_%7Bd%20%5Cin%20D_2%20(n)%7D%0A"> 同样类似 Proposition&nbsp;3 ，我们有</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="prp-trick4ex" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 5</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bd%5E2%20%5Cmid%20n%7D%20f(%5Cfrac%20n%20%7Bd%5E2%7D)%20%5Cleq%20%5Csum_%7Bd%20%5Cin%20D_2(n)%7D%20f(d)%20%5Cleq%20%5Csum_%7Bi=1%7D%5E%7Bn%5E%7B%5Cfrac%201%203%7D%7D%20f(i)%20+%20f(%5Cleft%5Clfloor%20%5Cfrac%20n%20%7Bi%5E2%7D%20%5Cright%5Crfloor)%0A"></p>
</div>
</div>
</div>
</div>
<p>因此算法递归部分时间复杂度可估计为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bd%20%5Cin%20D_2%20(n)%7D%20%5Cmathrm%7BDu%7D_K%20%5Cleft(%5Cleft%5Clfloor%20%5Cleft(%20%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%20%5Cright)%5E%7B%5Cfrac%201%202%7D%20%5Cright%5Crfloor%5Cright)%0A&amp;%5Cleq%20%5Csum_%7Bd%20%5Cin%20D_2%20(n)%7D%20C%20%5Cleft%5Clfloor%20%5Cleft(%20%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%20%5Cright)%5E%7B%5Cfrac%201%202%7D%20%5Cright%5Crfloor%20K%5E%7B-%5Cfrac%201%202%7D%20%5C%5C%0A&amp;%5Cleq%20C%20K%5E%7B-%5Cfrac%201%202%7D%20%5Cleft(%20%5Csum_%7Bi=1%7D%5E%7Bn%5E%7B%5Cfrac%201%203%7D%7D%20%5Cleft(%20%5Cfrac%20n%20%7B%5Cfrac%20n%20%7Bi%5E2%7D%7D%20%5Cright)%5E%7B%5Cfrac%201%202%7D%20+%20%5Csum_%7Bi=1%7D%5E%7Bn%5E%7B%5Cfrac%201%203%7D%7D%20%5Cleft(%20%5Cfrac%20n%20i%20%5Cright)%5E%7B%5Cfrac%201%202%7D%20%5Cright)%20%5C%5C%0A&amp;=%20C%20K%5E%7B-%5Cfrac%201%202%7D%20%5Cleft(%20%5Csum_%7Bi=1%7D%5E%7Bn%5E%7B%5Cfrac%201%203%7D%7D%20i%20+%20n%5E%7B%5Cfrac%201%202%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%5E%7B%5Cfrac%201%203%7D%7D%20i%5E%7B-%5Cfrac%201%202%7D%20%5Cright)%20%5C%5C%0A&amp;%5Cin%20K%5E%7B-%5Cfrac%201%202%7D%20%5Cleft(%20O(n%5E%7B%5Cfrac%202%203%7D)%20+%20n%5E%7B%5Cfrac%201%202%7D%20O(n%5E%7B%5Cfrac%201%206%7D)%20%5Cright)%20%5C%5C%0A&amp;%5Csubset%20O(n%5E%7B%5Cfrac%202%203%7D%20K%5E%7B-%5Cfrac%201%202%7D)%0A%5Cend%7Baligned%7D%0A"> 总时间复杂度为 <img src="https://latex.codecogs.com/png.latex?%0AO(K)%20+%20O(n%5E%7B%5Cfrac%202%203%7D%20K%5E%7B-%5Cfrac%201%202%7D)%0A"> 取 <img src="https://latex.codecogs.com/png.latex?K=n%5E%7B%5Cfrac%204%209%7D">，得到最优时间复杂度 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B%5Cfrac%204%209%7D)">. 代入 <img src="https://latex.codecogs.com/png.latex?n%20=%2010%5E%7B18%7D">，量级约为 <img src="https://latex.codecogs.com/png.latex?10%5E8">.</p>
<p>这估计并不算优秀. 传言存在 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B%5Cfrac%202%205%7D)"> 的估计，猜测大概优化了 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%5Cfrac%20n%20i%20%5Cright%5Crfloor%20%5Cright%5C%7D_%7Bi=1%7D%5En"> 和 <img src="https://latex.codecogs.com/png.latex?%5Cleft%5C%7B%20%5Cleft%5Clfloor%20%20%5Cleft(%20%5Cleft%5Clfloor%20%5Cfrac%20n%20d%20%5Cright%5Crfloor%20%5Cright)%5E%7B%5Cfrac%201%202%7D%20%20%5Cright%5Crfloor%5Cright%5C%7D_%7Bd%20%5Cin%20D_2%20(n)%7D"> 的重叠部分．关于这一估计，我们找到两篇参考文献，请参阅博客 <span class="citation" data-cites="nonsquare_blog">[14]</span> 和论文 <span class="citation" data-cites="nonsquare_paper">[15]</span>．</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-wikipedia_abuse" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline"><span>“Abuse of notation - wikipedia.”</span> <a href="https://en.wikipedia.org/wiki/Abuse_of_notation#Function_notation" class="uri">https://en.wikipedia.org/wiki/Abuse_of_notation#Function_notation</a>.</div>
</div>
<div id="ref-concretemath_onotation" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">R. L. Graham, D. E. Knuth, and O. Patashnik, <span>“Concrete mathematics: A foundation for computer science,”</span> Second.in A @foundation for computer science. Addison-Wesley, 1994, pp. 443–449.</div>
</div>
<div id="ref-asymptotic_wikipedia" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline"><span>“Big o notation - wikipedia # family of bachmann–landau notations.”</span> <a href="https://en.wikipedia.org/wiki/Big_O_notation#Family_of_Bachmann%E2%80%93Landau_notations" class="uri">https://en.wikipedia.org/wiki/Big_O_notation#Family_of_Bachmann%E2%80%93Landau_notations</a>.</div>
</div>
<div id="ref-asymptotic_oiwiki" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline"><span>“复杂度 - OI wiki.”</span> <a href="https://oi-wiki.org/basic/complexity/#%E6%B8%90%E8%BF%9B%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%AE%9A%E4%B9%89" class="uri">https://oi-wiki.org/basic/complexity/#%E6%B8%90%E8%BF%9B%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%AE%9A%E4%B9%89</a>.</div>
</div>
<div id="ref-knuth_omicron" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">D. E. Knuth, <span>“Big omicron and big omega and big theta,”</span> <em>SIGACT News</em>, vol. 8, no. 2, pp. 18–24, Apr. 1976, doi: <a href="https://doi.org/10.1145/1008328.1008329">10.1145/1008328.1008329</a>.</div>
</div>
<div id="ref-concretemath_calculus" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">R. L. Graham, D. E. Knuth, and O. Patashnik, <span>“Concrete mathematics: A foundation for computer science,”</span> Second.in A @foundation for computer science. Addison-Wesley, 1994, pp. 47–56.</div>
</div>
<div id="ref-wikipedia_divisor" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline"><span>“Divisor function - wikipedia # growth_rate.”</span> <a href="https://en.wikipedia.org/wiki/Divisor_function#Growth_rate" class="uri">https://en.wikipedia.org/wiki/Divisor_function#Growth_rate</a>.</div>
</div>
<div id="ref-gcdconv" class="csl-entry">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline">sun123zxy, <span>“sun123zxy’s blog - 原创OI题目 GCD卷积 problem and solution.”</span> <a href="https://blog.sun123zxy.top/posts/20201206-gcdconv/" class="uri">https://blog.sun123zxy.top/posts/20201206-gcdconv/</a>, 2020.</div>
</div>
<div id="ref-polya_luogu" class="csl-entry">
<div class="csl-left-margin">[9] </div><div class="csl-right-inline"><span>“P4980 【模板】pólya 定理 - 洛谷 | 计算机科学教育新生态.”</span> <a href="https://www.luogu.com.cn/problem/P4980" class="uri">https://www.luogu.com.cn/problem/P4980</a>.</div>
</div>
<div id="ref-polya_my" class="csl-entry">
<div class="csl-left-margin">[10] </div><div class="csl-right-inline">sun123zxy, <span>“sun123zxy’s blog - 等价类计数：Burnside引理 &amp; Polya定理.”</span> <a href="http://blog.sun123zxy.top/posts/20200321-burnside/#s-4.3" class="uri">http://blog.sun123zxy.top/posts/20200321-burnside/#s-4.3</a>, 2020.</div>
</div>
<div id="ref-zhihu_dusieve" class="csl-entry">
<div class="csl-left-margin">[11] </div><div class="csl-right-inline">Ander, <span>“杜教筛.”</span> <a href="https://zhuanlan.zhihu.com/p/521699400" class="uri">https://zhuanlan.zhihu.com/p/521699400</a>, 2022.</div>
</div>
<div id="ref-nonsquare1_luogu" class="csl-entry">
<div class="csl-left-margin">[12] </div><div class="csl-right-inline"><span>“P9238 [蓝桥杯 2023 省 a] 翻转硬币 - 洛谷 | 计算机科学教育新生态.”</span> <a href="https://www.luogu.com.cn/problem/P9238" class="uri">https://www.luogu.com.cn/problem/P9238</a>.</div>
</div>
<div id="ref-nonsquare2_luogu" class="csl-entry">
<div class="csl-left-margin">[13] </div><div class="csl-right-inline"><span>“P4318 完全平方数 - 洛谷 | 计算机科学教育新生态.”</span> <a href="https://www.luogu.com.cn/problem/P4318" class="uri">https://www.luogu.com.cn/problem/P4318</a>.</div>
</div>
<div id="ref-nonsquare_blog" class="csl-entry">
<div class="csl-left-margin">[14] </div><div class="csl-right-inline">smsxgz, <span>“Counting square free numbers.”</span> <a href="https://smsxgz.github.io/post/pe/counting_square_free_numbers/" class="uri">https://smsxgz.github.io/post/pe/counting_square_free_numbers/</a>, 2019.</div>
</div>
<div id="ref-nonsquare_paper" class="csl-entry">
<div class="csl-left-margin">[15] </div><div class="csl-right-inline">J. Pawlewicz, <span>“Counting square-free numbers.”</span> 2011. Available: <a href="https://arxiv.org/abs/1107.4890">https://arxiv.org/abs/1107.4890</a></div>
</div>
</div></section></div> ]]></description>
  <category>algorithm</category>
  <category>math</category>
  <category>number theory</category>
  <category>analysis</category>
  <guid>https://blog.sun123zxy.top/posts/20230418-complexity/</guid>
  <pubDate>Tue, 18 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>算法竞赛向 C++ Standard Library 使用速查</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20230124-stl/</link>
  <description><![CDATA[ 




<p>本文旨在对算法竞赛所需 C++ Standard Library 做一个全面而相对严谨的总结。</p>
<p>全文主要参考以下文档：</p>
<ul>
<li><a href="https://en.cppreference.com/w/cpp/container">Containers library - cppreference.com</a></li>
<li><a href="https://oi-wiki.org/lang/csl/">C++ 标准库简介 - OI Wiki</a></li>
</ul>
<p>如有能力，阅读原文可获得更深入的了解。</p>
<section id="stl-算法" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="stl-算法"><span class="header-section-number">1</span> STL 算法</h2>
<p>均在 <code>#include&lt;algorithm&gt;</code> 定义。</p>
<ul>
<li><p><code>std::sort(first,last,cmp)</code></p>
<p>排序为不降序列。</p>
<p>接受随机访问迭代器。可自定义比较函数。</p>
<p>平均时间复杂度 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">，C++11 后严格 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)">。</p></li>
<li><p><code>std::stable_sort(first,last,cmp)</code></p>
<p>排序为不降序列，且保持相等元素的顺序。</p></li>
<li><p><code>std::lower_bound(first,last,val,cmp)</code></p>
<p>返回指向首个不小于 <code>val</code> 的元素的迭代器，如无，返回 <code>last</code>。</p>
<p>要求小于 <code>val</code> 的值和大于等于 <code>val</code> 的值分居区间两侧。</p>
<p>可自定义比较函数。若迭代器支持随机访问，对数时间复杂度，否则为线性。</p></li>
<li><p><code>std::upper_bound(first,last,val,cmp)</code></p>
<p>返回指向首个大于 <code>val</code> 的元素的迭代器，如无，返回 <code>last</code>。</p></li>
<li><p><code>std::unique(first,last,cmp)</code></p>
<p>保留区间中所有连续等值区间的首个元素组成新序列，返回处理后序列的尾迭代器。</p>
<p>接受前向迭代器，可自定义判断相等的函数。</p>
<p>线性时间复杂度。</p></li>
</ul>
</section>
<section id="基本或特殊容器" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="基本或特殊容器"><span class="header-section-number">2</span> 基本或特殊容器</h2>
<p>注：C++11 新引入的容器，大部分头文件名与容器名一致。</p>
<ul>
<li><code>pair</code> <code>#include&lt;utility&gt;</code> ：元素对。</li>
<li><code>tuple</code> (C++11) ：元组。</li>
<li><code>bitset</code> <code>#include&lt;bitset&gt;</code> ：定长压缩 01 串，可在 <img src="https://latex.codecogs.com/png.latex?O(%5Cfrac%20N%20K)"> 的时空复杂度内完成常见运算，<img src="https://latex.codecogs.com/png.latex?K"> 对应操作系统位数。</li>
<li><code>string</code> <code>#include&lt;string&gt;</code> ：字符串。</li>
</ul>
<section id="pair" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="pair"><span class="header-section-number">2.1</span> pair</h3>
<ul>
<li><code>operator=</code> ：重载了赋值运算符用于拷贝。</li>
<li><code>first</code> / <code>second</code> ：访问第一项或第二项。</li>
<li><code>std::make_pair(a,b)</code> ：新建元素对，自动检测类型。</li>
<li><code>operator&lt;=&gt;</code> ：重载了各种比较运算符，按第一关键字、第二关键字顺序比较。</li>
</ul>
</section>
<section id="tuple" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="tuple"><span class="header-section-number">2.2</span> tuple</h3>
<ul>
<li><code>operator=</code> ：重载了赋值运算符用于拷贝。</li>
<li><code>std::get&lt;i&gt;(tp)</code> ：获取元组的第 i 项。</li>
<li><code>std::get&lt;T&gt;(tp)</code> ：获取元组中类型为 T 的项。</li>
<li><code>std::tie(a,b,...)</code> ：构造一个变量引用构成的元组．用于在赋值时将等号右侧的元组解包到左侧的 <code>a,b,...</code> 等变量中。</li>
<li><code>std::make_tuple(a,b,c,...)</code>：新建元组，自动检测类型。</li>
<li><code>operator&lt;=&gt;</code> ：重载比较运算符，同样是顺序关键字比较。</li>
</ul>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>下面是一个应用 C++11 新引入的元组和列表初始化的 ExGCD 实现。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-2">Tuple exgcd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-4">    ll x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> tie<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)=</span>exgcd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*</span>y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="string" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="string"><span class="header-section-number">2.3</span> string</h3>
<p>与 <code>vector</code> 类似。其余重要特性如下：</p>
<ul>
<li><code>c_str()</code> ：生成一个 C 风格字符串（尾部置 0）并返回其头部指针。</li>
<li><code>length()</code> ：<code>size()</code> 的同义函数。</li>
<li><code>append(str)</code> ：后方追加字符串，返回 <code>*this</code>。</li>
<li><code>append(first, last)</code> ：区间插入版本。</li>
<li><code>operator+</code> ：连接两个字符串。</li>
<li><code>compare(str)</code> ：字典序比较。返回一个 <code>int</code>，用 <code>&lt;0</code> / <code>==0</code> / <code>&gt;0</code> 判断该字符串小于 / 等于 / 大于参数字符串。</li>
<li><code>operator&lt;=&gt;</code> ：字典序比较的运算符重载。</li>
<li><code>substr(pos=0, count)</code>：返回 <code>[pos, min(pos+count, size()))</code> 的子串。时间复杂度与 <code>count</code> 成线性。</li>
<li><code>pop_back()</code> (C++11)</li>
<li><code>find(str)</code> / <code>rfind(str)</code> / <code>find_first_of(c)</code> / <code>find_first_not_of(c)</code> / <code>find_last_of(c)</code> / <code>find_last_not_of(c)</code>：找字符串或字符，返回位置。若无，返回 <code>npos=-1</code>。<strong>无时间复杂度保证</strong>，不建议使用。</li>
</ul>
</section>
<section id="bitset" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="bitset"><span class="header-section-number">2.4</span> bitset</h3>
<p><code>bitset&lt;N&gt; bs(val / str)</code>：声明一个长度为 N 的 <code>bitset</code> 并设定初值。</p>
<ul>
<li><code>&amp; / ! / ^ / ~ / &gt;&gt; / &lt;&lt;</code> ：支持 AND / OR / XOR / NOT / 右移 / 左移等位运算系列。</li>
<li><code>operator==</code> ：判断两个 <code>bitset</code> 是否相同。</li>
<li><code>test(idx) / operator[idx]</code> ：前者会做越界检查，抛出异常。</li>
<li><code>size()</code></li>
<li><code>count()</code> ：返回 1 的个数。</li>
<li><code>all()</code> (C++11) ：检查是否全为 1。</li>
<li><code>any() / none()</code> ：检查是否存在 1 / 没有 1。</li>
<li><code>set() / reset()</code> ：所有位赋 1 / 0。</li>
<li><code>flip()</code> ：翻转 0 / 1。</li>
</ul>
</section>
</section>
<section id="stl-容器概览" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="stl-容器概览"><span class="header-section-number">3</span> STL 容器概览</h2>
<p>以下部分均为 STL 容器相关内容。</p>
<section id="迭代器" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="迭代器"><span class="header-section-number">3.1</span> 迭代器</h3>
<p>声明：形如 <code>vector&lt;int&gt;::iterator iter = xxx.begin()</code>。C++11 后可用 <code>auto</code> 代替类型声明。</p>
<p><code>*iter</code> 取值，<code>iter++</code> 后继。</p>
<p>双向迭代器可 <code>iter--</code>，随机访问迭代器支持加减、比较运算。</p>
<ul>
<li><code>begin()</code>, <code>end()</code> ：返回迭代器。<code>end()</code> 常作为 NULL 使用。</li>
<li><code>cbegin()</code>, <code>cend()</code> (C++11) ：部分容器支持，返回只读迭代器。</li>
<li><code>rbegin()</code>, <code>rend()</code> ：部分容器支持，返回反向迭代器。</li>
<li><code>crbegin()</code>, <code>crend()</code> ：部分容器支持，返回只读反向迭代器。</li>
</ul>
</section>
<section id="公共性质" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="公共性质"><span class="header-section-number">3.2</span> 公共性质</h3>
<ul>
<li><code>[first, last)</code> 式迭代器构造，拷贝构造等。</li>
<li><code>operator=</code> ：重载了赋值运算符用于拷贝。</li>
<li><code>empty()</code> ：返回容器是否为空，即 <code>v.begin() == v.end()</code>。</li>
<li><code>size()</code> ：返回容器内元素个数。</li>
<li><code>clear()</code> ：清空容器。</li>
</ul>
</section>
</section>
<section id="序列式容器或容器适配器" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="序列式容器或容器适配器"><span class="header-section-number">4</span> 序列式容器或容器适配器</h2>
<p>序列式容器：</p>
<ul>
<li><code>array</code> (C++11) ：定长顺序表，常数随机访问。</li>
<li><code>vector</code> <code>#include&lt;vector&gt;</code>：顺序表，常数后段插入，常数随机访问。</li>
<li><code>deque</code> <code>#include&lt;deque&gt;</code> ：顺序表，常数双端插入，<strong>常数随机访问</strong>。</li>
<li><code>list</code> <code>#include&lt;list&gt;</code> ：链表，常数插入删除，双向迭代器。
<ul>
<li><code>forward_list</code> (C++11) ：单向版本。</li>
</ul></li>
</ul>
<p>容器适配器（均不支持迭代器）：</p>
<ul>
<li><code>queue</code> <code>#include&lt;queue&gt;</code>：队列（FIFO）。适配双向变长序列式容器，即 <code>deque</code>（默认）或 <code>list</code>。</li>
<li><code>stack</code> <code>#include&lt;stack&gt;</code>：栈（LIFO）。适配变长序列式容器，即 <code>deque</code>（默认）、<code>vector</code>或 <code>list</code>。</li>
<li><code>priority_queue</code> <code>#include&lt;queue&gt;</code>：大根堆。适配随机访问变长序列式容器，即 <code>vector</code>（默认）或 <code>deque</code>。</li>
</ul>
<section id="vector" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="vector"><span class="header-section-number">4.1</span> vector</h3>
<p>Construct:</p>
<ul>
<li><code>vector&lt;T&gt;(count,value)</code> ：初始化时放 <code>count</code> 个 <code>value</code> 的拷贝在里面。</li>
</ul>
<p>Access:</p>
<ul>
<li><code>crbegin()</code></li>
<li><code>at(idx)</code> / <code>operator[idx]</code> ：前者会做越界检查，抛出异常。</li>
<li><code>front()</code>, <code>back()</code> ：返回首尾元素引用。</li>
</ul>
<p>Modify:</p>
<ul>
<li><code>push_back(x)</code> / <code>pop_back()</code> ：均摊常数复杂度。</li>
<li><code>insert(iter, val)</code> ：于迭代器 <code>iter</code> 前插入，返回指向被插入元素的迭代器。 <code>insert(iter, first, last)</code> ：左闭右开区间插入，返回指向首个被插入元素的迭代器。 注意，此操作<strong>非常数时间复杂度</strong>。</li>
<li><code>erase(iter)</code> ：于迭代器 <code>iter</code> 处删除，返回指向被删除元素的后一个元素的迭代器。 <code>erase(first, last)</code> ：左闭右开区间删除，返回指向被删除元素的后一个元素的迭代器。 注意，此操作<strong>非常数时间复杂度</strong>。</li>
</ul>
<p>Size:</p>
<ul>
<li><code>resize(n)</code> ：改变长度，可指定补充元素默认值。</li>
<li><code>shrink_to_fit()</code> ：调整为恰好长度。</li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p><code>vector&lt;bool&gt;</code> 被特殊定义，使用方式较为复杂，<strong>不建议使用</strong>。</p>
</div>
</div>
</div>
</section>
<section id="deque" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="deque"><span class="header-section-number">4.2</span> deque</h3>
<ul>
<li><code>push_front(x)</code>, <code>pop_front()</code></li>
</ul>
<p>其余与 <code>vector</code> 类似。</p>
<section id="stack" class="level4">
<h4 class="anchored" data-anchor-id="stack">stack</h4>
<ul>
<li><code>top()</code></li>
<li><code>push(x)</code></li>
<li><code>pop()</code></li>
</ul>
</section>
<section id="queue" class="level4">
<h4 class="anchored" data-anchor-id="queue">queue</h4>
<ul>
<li><code>front()</code></li>
<li><code>push(x)</code></li>
<li><code>pop()</code></li>
</ul>
</section>
<section id="priority_queue" class="level4">
<h4 class="anchored" data-anchor-id="priority_queue">priority_queue</h4>
<ul>
<li><code>std::priority_queue&lt;TypeName&gt;</code> ：<code>Compare</code> 默认使用 <code>std::less&lt;T&gt;</code>，即以 <code>operator &lt;</code> 作为大根堆的比较依据。</li>
<li><code>std::priority_queue&lt;TypeName, Container, Compare&gt;</code> ：亦可自行指定底层容器和比较函数对象。</li>
</ul>
<p>例如，传入 <code>std::greater&lt;T&gt;</code> 将使用 <code>&gt;</code> 作为比较符号，进而构造出小根堆。</p>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>自定义比较函数对象，可仿照以下代码：</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;queue&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){}</span></span>
<span id="cb2-8">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> vecCompare<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">operator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>priority_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> vecCompare <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-19">    H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb2-20">    H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb2-21">    Vec t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<p>用法基本同 <code>queue</code>，但 <code>push() / pop()</code> 为对数时间复杂度。</p>
</section>
</section>
<section id="list" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="list"><span class="header-section-number">4.3</span> list</h3>
<ul>
<li>无随机访问接口。</li>
<li><code>insert(iter, val)</code> / <code>erase(iter)</code> ：插入与删除变为常数时间复杂度，参见 <code>vector</code>。</li>
<li><code>sort(cmp)</code> ：为链表特殊设计的 <img src="https://latex.codecogs.com/png.latex?O(n%20%5Clog%20n)"> 稳定排序算法。</li>
</ul>
<p>其余与 <code>deque</code> 类似。</p>
</section>
</section>
<section id="关联式容器" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="关联式容器"><span class="header-section-number">5</span> 关联式容器</h2>
<p>不支持随机访问，双向迭代器，大部分操作为对数时间复杂度，红黑树实现。</p>
<ul>
<li><code>set</code> / <code>multiset</code> <code>#include&lt;set&gt;</code>：元素有序。后者支持同值多元素。</li>
<li><code>map</code> / <code>multimap</code> <code>#include&lt;map&gt;</code>：键有序。后者支持同键值多元素。</li>
</ul>
<section id="set-multiset" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="set-multiset"><span class="header-section-number">5.1</span> set / multiset</h3>
<ul>
<li><code>set&lt;Key&gt;</code>：默认使用 <code>operator &lt;</code> 比较（升序）。</li>
<li><code>set&lt;Key, Compare&gt;</code>：也可使用类似 <code>priority_queue</code> 的方法自定义比较函数对象 <code>Compare</code>。</li>
</ul>
<p>Access：</p>
<ul>
<li><code>crbegin()</code></li>
<li><code>count(x)</code> ：返回值为 <code>x</code> 的元素数量。</li>
<li><code>lower_bound(x)</code> / <code>upper_bound(x)</code> ：为 <code>set</code> 特殊定制的对数时间复杂度 <code>lower_bound</code> 和 <code>upper_bound</code>。</li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>没有 <code>nth_element()</code>，对数时间复杂度查询第 k 大需自行手写平衡树或使用 pbds 库。</p>
</div>
</div>
</div>
<p>Modify:</p>
<ul>
<li><code>insert(x)</code> ：插入元素 x。返回 <code>pair&lt;iterator, bool&gt;</code>，表示插入元素的迭代器与插入是否成功。 对于 <code>multiset</code>，由于插入不会失败，<code>insert</code> 只返回迭代器。</li>
<li><code>erase(x)</code> ：删除所有值为 x 的元素，返回删除元素的个数。 <code>erase(iter)</code> ：删除迭代器指向的元素，(C++11) 返回指向被删除元素的后一个元素的迭代器。 <code>erase(first, last)</code>：左闭右开区间删除，(C++11) 返回指向被删除元素的后一个元素的迭代器。</li>
</ul>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>删除单个值为 x 的元素，可按如下方法进行：</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">auto</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-2">s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>erase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="map-multimap" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="map-multimap"><span class="header-section-number">5.2</span> map / multimap</h3>
<p><code>map&lt;Key, T, Compare&gt;</code>：可自定义比较方式。</p>
<ul>
<li>对迭代器解引用得到 <code>pair&lt;Key, T&gt;</code>。</li>
<li><code>insert(pair&lt;Key, T&gt;)</code></li>
<li><code>at[key]</code> / <code>operator[key]</code>：前者会做越界检查，抛出异常。</li>
</ul>
<p>其余与 <code>set</code> 类似。</p>
</section>
</section>
<section id="无序关联式容器-c11" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="无序关联式容器-c11"><span class="header-section-number">6</span> 无序关联式容器 (C++11)</h2>
<p>单向迭代器，平均常数时间复杂度，Hash 实现。</p>
<p>若不支持 c++11，使用时需引入 TR1 扩展。例如，使用 <code>unordered_map</code> 需引入 <code>#include&lt;tr1/unordered_map&gt;</code> 头文件，使用时需写为 <code>std::tr1::unordered_map</code>。</p>
<ul>
<li><code>unordered_set</code> / <code>unordered_multiset</code> <code>#include&lt;unordered_set&gt;</code>：元素无序。</li>
<li><code>unorderep_map</code> / <code>unordered_multimap</code> <code>#include&lt;unordered_map&gt;</code>：键无序。</li>
</ul>
<p>只有单向迭代器，其余特性与有序版本类似。</p>
<p>此外，还可自行指定相等判定方式和 Hash 函数。</p>
<ul>
<li><code>unordered_set&lt;Key, Hash, KeyEqual&gt;</code></li>
<li><code>unordered_map&lt;Key, T, Hash, KeyEqual&gt;</code></li>
</ul>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Hash 函数的自定义方法也与 <code>priority_queue</code> 中的方法类似：</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;unordered_set&gt;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5">  ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){}</span></span>
<span id="cb4-7">    Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">operator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> vecHash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">operator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1E9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)+</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107897</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unordered_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>vecHash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-21">    S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb4-22">    S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb4-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb4-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>algorithm</category>
  <category>C++</category>
  <guid>https://blog.sun123zxy.top/posts/20230124-stl/</guid>
  <pubDate>Tue, 24 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>有限覆盖定理与实数理论</title>
  <dc:creator>sun123zxy </dc:creator>
  <link>https://blog.sun123zxy.top/posts/20221213-cover/</link>
  <description><![CDATA[ 




<section id="example-1" class="level2">
<h2 class="anchored" data-anchor-id="example-1">Example 1</h2>
<p>为更好的证明本题，先引入 Bolzano-Weierstrass 定理的一种等价表述.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="def-accu" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (数列聚点)</strong></span> 对任意实数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D">，若实数 <img src="https://latex.codecogs.com/png.latex?a"> 满足：对 <img src="https://latex.codecogs.com/png.latex?a"> 的任意小邻域 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon)%20=%20(a%20-%20%5Cvarepsilon,%20a%20+%20%5Cvarepsilon)">，都有无穷个 <img src="https://latex.codecogs.com/png.latex?x_n"> 满足 <img src="https://latex.codecogs.com/png.latex?x_n%20%5Cin%20U(a,%20%5Cvarepsilon)">，则称 <img src="https://latex.codecogs.com/png.latex?a"> 是数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个聚点.</p>
</div>
</div>
</div>
</div>
<p>请注意，这里我们没有使用建立在集合之上的标准的聚点定义. 对数列单独定义聚点，是考虑到数列允许重复的元素出现，如此定义更容易展开后面的讨论.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-accuequiv" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1</strong></span> 实数 <img src="https://latex.codecogs.com/png.latex?a"> 是数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D%20%5Csubset%20%5Cmathbb%20R"> 的聚点的充要条件是：存在 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个收敛子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_%7Bn_k%7D%20%5C%7D">，其极限为 <img src="https://latex.codecogs.com/png.latex?a">.</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>先证充分性. 用定义写开 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bk%20%5Cto%20%5Cinfty%7D%20%5C%7B%20x_%7Bn_k%7D%20%5C%7D%20=%20a">，就有 <img src="https://latex.codecogs.com/png.latex?%0A(%5Cforall%20%5Cvarepsilon%20%3E%200)(%5Cexists%20K%20%5Cin%20%5Cmathbb%20N_+)(%5Cforall%20k%20%3E%20K)(%7Cx_%7Bn_k%7D%20-%20a%7C%20%3C%20%5Cvarepsilon)%0A"> 故确有无穷项 <img src="https://latex.codecogs.com/png.latex?x_n"> 落在任意小的 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon)"> 中，即 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个聚点，该方向得证.</p>
<p>下证必要性. 已知 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 有一聚点 <img src="https://latex.codecogs.com/png.latex?a">. 我们按如下方法构造子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_%7Bn_k%7D%20%5C%7D">：</p>
<ol type="1">
<li>当 <img src="https://latex.codecogs.com/png.latex?k=1">，取 <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_1%20=%201">，因为 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?E"> 的一个聚点，<img src="https://latex.codecogs.com/png.latex?%5Cexists%20n_1%20%5Cin%20%5Cmathbb%20N_+">，<img src="https://latex.codecogs.com/png.latex?%7Cx_%7Bn_1%7D%20-%20a%7C%20%3C%20%5Cvarepsilon">.</li>
<li>当 <img src="https://latex.codecogs.com/png.latex?k%20%5Cgeqslant%202">，取 <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_k%20=%20%5Cfrac%201%20k">，因为 <img src="https://latex.codecogs.com/png.latex?a"> 是 <img src="https://latex.codecogs.com/png.latex?E"> 的一个聚点， <img src="https://latex.codecogs.com/png.latex?%5Cexists%20n_k%20%3E%20n_%7Bk-1%7D">，<img src="https://latex.codecogs.com/png.latex?%7Cx_%7Bn_k%7D%20-%20a%7C%20%3C%20%5Cvarepsilon">.</li>
</ol>
<p>这样，我们构造出 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的一个子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_%7Bn_k%7D%20%5C%7D"> 满足 <img src="https://latex.codecogs.com/png.latex?%7Cx_%7Bn_k%7D%20-%20a%7C%20%3C%20%5Cvarepsilon_k%20=%20%5Cfrac%201%20k">. 因此其收敛于 <img src="https://latex.codecogs.com/png.latex?a">，该方向得证.</p>
</div>
<p>上述定理立刻证明了下定理与 Bolzano-Weierstrass 定理的等价性.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-bwequiv" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2 (数列聚点定理)</strong></span> 任意有界实数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 至少有一个聚点.</p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-finite2bw" class="theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> 利用有限覆盖定理证明 Bolzano-Weierstrass 定理.</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>命题等价于用有限覆盖定理证明数列聚点定理. 用反证法. 假设一有界实数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 不存在聚点，设其有上界 <img src="https://latex.codecogs.com/png.latex?L"> 和下界 <img src="https://latex.codecogs.com/png.latex?l">. 对任意 <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Bl,L%5D">，它都不是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的聚点，因此总存在一个 <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon(a)%20%3E%200">，使得只有有限个 <img src="https://latex.codecogs.com/png.latex?x_n"> 落入 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon(x_0))">. 这样，构造开区间族 <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathscr%7BF%7D%20=%20%5C%7B%20U(a,%20%5Cvarepsilon(a))%20%5Cmid%20a%20%5Cin%20%5Bl,L%5D%20%5C%7D%0A"> 它显然是闭区间 <img src="https://latex.codecogs.com/png.latex?%5Bl,L%5D"> 的一个开覆盖. 由有限覆盖定理，只需取其中有限个开区间就可以覆盖住 <img src="https://latex.codecogs.com/png.latex?%5Bl,L%5D">，因此覆盖 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 也只需要有限个开区间. 然而由前述构造，每一个开区间中也只包含有限个 <img src="https://latex.codecogs.com/png.latex?x_n">，因此数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 只有有限项——这显然是荒谬的. 故 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 必有聚点，原命题得证.</p>
</div>
</section>
<section id="example-2" class="level2">
<h2 class="anchored" data-anchor-id="example-2">Example 2</h2>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-lebesgue" class="theorem">
<p><span class="theorem-title"><strong>Theorem 3 (Lebesgue 覆盖定理)</strong></span> 设开区间族 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 是闭区间 <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D"> 的一个开覆盖，则必存在 <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%3E%200">，使得只要区间 <img src="https://latex.codecogs.com/png.latex?%5COmega%20%5Csubset%20%5Ba,%20b%5D"> 且 <img src="https://latex.codecogs.com/png.latex?%5COmega"> 的长度 <img src="https://latex.codecogs.com/png.latex?%7C%5COmega%7C%20%3C%20%5Csigma">，就必有 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的一个开区间包含 <img src="https://latex.codecogs.com/png.latex?%5COmega">. 其中 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 称为 Lebesgue 数.</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>不妨只证 <img src="https://latex.codecogs.com/png.latex?%5COmega"> 是闭区间这种最强的情况.</p>
<p>用反证法. 假设命题不成立，则对任意 <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%3E%200">，都存在一个长度小于 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 的闭区间 <img src="https://latex.codecogs.com/png.latex?%5COmega%20%5Csubset%20%5Ba,b%5D">，它不被任何 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的开区间包含. 因此，对所有自然数 <img src="https://latex.codecogs.com/png.latex?n">，可取 <img src="https://latex.codecogs.com/png.latex?%5Csigma_n%20=%20%5Cfrac%201%20n">，按上述方法就可构造出一列闭区间 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_n%20%5C%7D%20=%20%5C%7B%20%5Ba_n,%20b_n%5D%20%5C%7D%20%5Csubset%20%5Ba,b%5D"> 其中每一个闭区间都不被任何 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的开区间包含，且区间长度 <img src="https://latex.codecogs.com/png.latex?%7C%5COmega_n%7C%20%3C%20%5Csigma_n%20=%20%5Cfrac%201%20n">，即 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%7C%5COmega_n%7C%20=%200">.</p>
<p>因为 <img src="https://latex.codecogs.com/png.latex?%5COmega_n%20%5Csubset%20%5Ba,b%5D">，<img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_n%20%5C%7D"> 有界，由 Bolzano-Weierstrass 定理，其存在一收敛子列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20a_%7Bn_k%7D%20%5C%7D">，设其极限为 <img src="https://latex.codecogs.com/png.latex?x_0">，极限保序性表明 <img src="https://latex.codecogs.com/png.latex?x_0%20%5Cin%20%5Ba,b%5D">. 注意到 <img src="https://latex.codecogs.com/png.latex?b_%7Bn_k%7D%20=%20a_%7Bn_k%7D%20+%20%7C%5COmega_%7Bn_k%7D%7C">，两端取 <img src="https://latex.codecogs.com/png.latex?k%20%5Cto%20%5Cinfty"> 即得 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bk%20%5Cto%20%5Cinfty%7D%20b_%7Bn_k%7D%20=%20x_0">. 综上，我们说明了 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_%7Bn_k%7D%20%5C%7D"> 收缩于 <img src="https://latex.codecogs.com/png.latex?x_0">.</p>
<p>但，因为 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 是闭区间 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的一个开覆盖，故总存在一个开区间 <img src="https://latex.codecogs.com/png.latex?I_%7Bx_0%7D%20=%20(a_0,%20b_0)%20%5Cin%20%5Cmathscr%20F"> 使得 <img src="https://latex.codecogs.com/png.latex?x_0%20%5Cin%20I_%7Bx_0%7D">，而 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_%7Bn_k%7D%20%5C%7D"> 又收缩于 <img src="https://latex.codecogs.com/png.latex?x_0">，故存在 <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5Cmathbb%20N">，<img src="https://latex.codecogs.com/png.latex?%5COmega_%7Bn_k%7D%20%5Csubset%20I_%7Bx_0%7D%20%5Cin%20%5Cmathscr%20F">，这与我们构造 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_%7Bn_k%7D%20%5C%7D"> 的方法矛盾. 故原命题成立.</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>证明过程与用 Bolzano-Weierstrass 定理证明闭区间一致连续性定理类似.</p>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-lebesgue2bw" class="theorem example">
<p><span class="theorem-title"><strong>Example 2</strong></span> 用 Lebesgue 覆盖定理证明有限覆盖定理.</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>若 <img src="https://latex.codecogs.com/png.latex?%5Csigma"> 是覆盖 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的开覆盖 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 的勒贝格数，令 <img src="https://latex.codecogs.com/png.latex?N%20=%20%5Clceil%20%5Cfrac%7B2(b-a)%7D%7B%5Csigma%7D%20%5Crceil">，<img src="https://latex.codecogs.com/png.latex?L%20=%20%5Cfrac%20%7Bb-a%7D%7BN%7D%20%5Cleqslant%20%5Cfrac%20%5Csigma%202%20%3C%20%5Csigma">. 由 Lebesgue 覆盖定理，任意长度为 <img src="https://latex.codecogs.com/png.latex?L"> 的 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 内闭区间都包含于某个 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中的开区间. 因此对 <img src="https://latex.codecogs.com/png.latex?n%20=%201,2,%5Cdots,N">，令 <img src="https://latex.codecogs.com/png.latex?%5COmega_n%20=%20%5Cleft%5B%20a%20+%20(n-1)L,%20a%20+%20nL%20%5Cright%5D">，总存在一个 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 中开区间 <img src="https://latex.codecogs.com/png.latex?I_n"> 满足 <img src="https://latex.codecogs.com/png.latex?%5COmega_n%20%5Csubset%20I_n">. 因为显然 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5COmega_n%20%5C%7D_%7Bn=1%7D%5EN"> 是 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的一个覆盖，故 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20I_n%20%5C%7D_%7Bn=1%7D%5EN%20%5Csubset%20%5Cmathscr%20F"> 也是 <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> 的覆盖. 这样，我们就成功构造出了一个 <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%20F"> 的有限子覆盖 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20I_n%20%5C%7D_%7Bn=1%7D%5EN">，命题得证.</p>
</div>
<div class="proof remark">
<p><span class="proof-title"><em>Remark</em>. </span>在处理区间问题时，Lebsegue 覆盖定理很多时候比有限覆盖定理更好用. 例如处理闭区间一致连续性定理时，“落入两个有交点的相邻的这样的区间”<span class="citation" data-cites="lizhong">[1]</span>这种神乎其技的操作就可以省去了. （这种操作的严格叙述是：把单点连续性要求的区间半径改成 <img src="https://latex.codecogs.com/png.latex?2%20%5Cdelta_x">，但构造开覆盖还是用半径为 <img src="https://latex.codecogs.com/png.latex?%5Cdelta_x"> 的区间，这样可以有 <img src="https://latex.codecogs.com/png.latex?%7Cx_2%20-%20x%7C%20%5Cleqslant%20%7Cx_2%20-%20x_1%7C%20+%20%7Cx_1%20-%20x%7C%20%5Cleqslant%20%5Cdelta_%7Bm%7D%20+%20%5Cdelta_%7Bx%7D%20%5Cleqslant%202%20%5Cdelta_%7Bx%7D">，能把两个点放在同一个区间内了. 详细可参考 <a href="https://www.zhihu.com/question/56393706/answer/298562084" class="uri">https://www.zhihu.com/question/56393706/answer/298562084</a>. 事实上，Lebesgue 覆盖定理也可以用类似的方法证明.）</p>
</div>
<p>作为小结，下图展现了刚刚介绍的几个定理在整个实数完备性等价定理体系中的地位.</p>
<div id="fig-real" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-real-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="tikz">
<!--?xml version='1.0' encoding='UTF-8'?-->
<!-- This file was generated by dvisvgm 3.2.2 -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="762pt" height="131.28pt" viewbox="0 0 508 87.52">
<style type="text/css">
@font-face{font-family:LBKTRH-LMRoman10-Regular;src:url(data:application/x-font-woff2;base64,d09GMgABAAAAAAm4AAoAAAAAELwAAAluAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAgVwKmAyRdgsyAAE2AiQDYAQgBYMYByAbwwxRVI1qAD8PbGOtgwXU0EqEkXx9IGxn4maWj5T9PH/qn3tf/FJq76VCKkwBW6diUPIvndLOUvYniQfi3r2/Rss2URdYYAl1+Vg6bXJgAcVp/Q+Q7Xv+dZr6V5YSFoUIj0iWDtgpANurPfVV5BDYIYIPr1uHrVOndp77pV5FGx0eHUGmda0LpOL59nxg923VzyPBonR2uiiwA/HpAGEP8YaLLZ3YBRDBVzARmADf8bm/9jCh8aHXlQpEIi4AgwW0EEgaFh2VDN39oTPu/nsNAJoEBfAF/rFowGICgL0TpWSGk0Eh0OnxWgqAEJCQSpZLS0evXKUq1eo0aNSiVZt2Rp1aR81fpoXD1rvSeaM8VLcecpdOeDuoRb8h4HS24DAQjSLeeMYfznAi6ybgMIYTKIFE5u517jozXPj8SEFMBHc1HJ8c5VUs+KT50/5pXnxcbWR0lvjS5sAyxjGYKIQ4WRZCC/zLEqRZEZQgdACBENmO5WRdMJzIgpDVC3h/fhlKXoBxDgS/0dRP08AbIUs7lBB61IZlero3iGIIeWgPsy+ZfQWJz6GUWJKwXP6diTKQQhSEkhSDM0RKUx06j7E8fWVXghKyoKt7BYQoes/XD3yG0tdCKkA7eoNe17leTVMIUX5274Y+MWk3/wwKN/bXsj7RvSlyDx/LjdO5qIIhNC3Xx1c7psDafhg/vR7cDOG1/ehWcv2AFACMacdu4tQQ25w7Hd5FLpO7fR0ipbbEaQMRgJEQhGEtR4hM+VVt4+BK+o22/lqgYINcRkhqw+nrshumqqxk07g1y8xJygixaqlm7KKEsUyI4kRRyrvpAwn9mJ0uJa2Ayrilgh6iGAynWV3SFu7lEZI0Nd7LRGl9R3lagbDABuCRm6Ibg8fr3YX5HXzf7KbdwfYEXt9MXEJQUreTVZOzDcVZZhBCYjt04Gj7RoF7vGtEcI+HdxHFs1W0cMD1DElN4cHD9d2zrCmGmmEaN1TnWRCaQh521vPbEj25GtqCEPGVs8CWJxy04XwHlKjmnssU1jTR3fObiDK1x/UhMs81VcCAXgPlPgebfZef2QZj3f2tI84+b8mFMZp7LiuHvqYDI+TyPCuEs+TnNOF0TDsOUwdhkInSho4Y5wkh75u9jn77gMBvQorZxzDUtqQS3HaxS9YOKHVvFycmqrwaAho5Iwihup0L0FnMz8dv7ycvR7cSxdhKSjAEwRApF8/rfFM4PyzDw6AKKG9qL0kbstpgbbfM8civ0YDkTACGYij6khrGteQ5N2IA4yshKON0nR+PAWS96Nc8VrdDFNCG2E7f5a/13dQHgzB3+ji8aYCZCrO1fbQeYYZE5DxaSVVyKX1StJUVQbDnR3VA8uoO0YX3aQwlWrHwsBrbwCCi3PuX5/jqZeazRCWkz4uqCmmPkzJfvdvAMytPX1z+D4aDH6Tgmf7vGCoBx2E4r5MnL6/+j4Z23Pvn+g3/GPAOp+c/TAXPr9SPapynrv786fuX/ogUi/4MCQ1Wi8SI7xvAzwZQx32Sc91HJj/R/uLNlD/VvpoYRCP2by0Lp5Y6ecRJK5OIQ04coE0pOK0UVr6FnHFytEzRxhhG6HJscgx4Mp6Urce0NmcYVqLc2H0RSfsl5oCPVionBde6ud/gLAj/NjxUFK3Gc/HsGLVQPO17eA4M7eA0WJkhM3NnO4zW0SXjFRpMCRTPAgQcoLMa8LCH05xEhAxE17n3R988kmdva0et4qxkw7U709ppbqIG4EQlpsp2+bgv/TZuu6PSOGYh/q9LuOTLzOvxXGjtUEYc+j+8LQi6KgjrDn0sjahEytxeWKg0svT8Jl8klfTxd31UYBPOcz2yMNUzt+/7ZPRyzVrLc8wXLablvHjX1YzK/uyC4hBWn2SU2hscbhOGblMxapZELkl10dlfCaMmk/IDsrBFBaizK10H5JQulmNa7vSjvwM8seizPkmOJ47gSMk0WGnk1kyyytcQhWhAF9YjrXGkFvcujrcTbjwSyAt9dFNBmjaduYONRPs52YtFD1L9nORci6ZwWGmE22P2dKYTBai7C1ci3X9DCnAJzuuA1OZ08OBzsnPcl5dNXndlkZuCrxMZ+VuzlzY92jxvVBu7Et7PQ8mcRUH2rIVmy1Md0G+WrUL3ax8dKCRcjg9Jhvu53LRANzEZ1K3YN1jlRH+7O1hM9FrbdzuyKMpWIut5bIvF7826rQPsRrWyh5h752/2dbMdFZjPbr3fO3+JT0tmwuBPp8Wol+d7glvcew6UTMC7Bbdimr4Db/nukgdRWZkobS+8saZbcAumrd+A/ZzbMxh+cpEIb1TOreaKQfRlVjXBnxrcyPcSdoyj76nxZD93E8Sq7Q8uLLvHPRjxDphz3KRncUZ4Yz1MiO3SE8i6UlWCKakzD25inclUgopQ1yBsQLpBo7S4BJuGa4ot2SmCILGKfpCB2YmWJDvdVnPI0++6QM5SQ9uBvVUwPMCTXjipT2PqfLcpMQ70JzG0Jr/IcWTzlF5qnfUQaNpyUjS5yHqfMJaOpM3+IwLfb7SxkIhS3i9s84uSaLTh6oX6RQy+MrUIbcy7bDUrvMwcUBn4IT2DyXk+oUKFRRDKd02ljzOnzFj5FjKXkcKsjEOLf4whNG65jmrWnXNSl31TqCkePTpSjx1xr+bEuYL3FF5RcHEOMqCzVQngPwuJJ3RT08gs51vmLnEuyD72x0TUdLLO/nIYsG8Xt6Vs2RrSV/ahqZhgTbXWxln8sL4+FvYxMvX3nFntM5PCKD1uwNT7KltGcbNdxa9kMuAjlYf9NDB7v81+zRJkv86jqz0DosUoxZW3VLXZynafm8mYDQlJRD50XCivSc7rol+pVa8vHIIBAACPsn9jWOVfjIKAHHBgSfO5YmEEJCuOSQGdTaEQlURHMPSrxaNsIMMr4IMfhZPYBJ6SwLYYgMbx4IFOgJcje2DQjAcB8gBPQ9iA96NJru0UoNB4sLNBD7CTcboNVeoMpYgpkE4DzyCIA8yFIjtD0s0Ny5lIAjmLMwT35XEFGQKauqgtlFg5Qxg0yZkcYaGcJQy2t+WJgqfJKd9EDA0PS5YkZWlUITh3yP9EzbcOpxcuZBvxbLiaoaO6taOyno4URnTfHCRLodGonlaDcAiDZBJJsmiohDThENCcXdvbk7ZaLXKU18FqjVx2Oh1toSaw0tmgLajVBtsNNqhjhNQNOlRrDVaqx5UjQQgR1fQJHQ==) format('woff2');}
@font-face{font-family:CWFAOF-FandolSong-Regular;src:url(data:application/x-font-woff2;base64,) format('woff2');}

</style>
<g id="page1">
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="288.4577" y="-98.662245" transform="matrix(.999739 0 0 .999739 -211.894 110.06699)">有限覆盖定理</text>
<text font-family="LBKTRH-LMRoman10-Regular" font-size="9.96" x="500.576327" y="-98.662245" transform="matrix(.999739 0 0 .999739 -223.75002 110.06699)">Lab<tspan x="517.587987">esgue</tspan></text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="544.20094" y="-98.662245" transform="matrix(.999739 0 0 .999739 -223.75002 110.06699)">覆盖定理</text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="206.168181" y="-63.606396" transform="matrix(.999739 0 0 .999739 -201.93199 110.06699)">确界原理</text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="288.4577" y="-63.606396" transform="matrix(.999739 0 0 .999739 -211.894 110.06699)">单调有界定理<tspan x="388.590561">闭区间套定理</tspan></text>
<text font-family="LBKTRH-LMRoman10-Regular" font-size="9.96" x="500.576327" y="-63.606396" transform="matrix(.999739 0 0 .999739 -217.42902 110.06699)">(</text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="504.450316" y="-63.606396" transform="matrix(.999739 0 0 .999739 -217.42902 110.06699)">数列</text>
<text font-family="LBKTRH-LMRoman10-Regular" font-size="9.96" x="524.371116" y="-63.606396" transform="matrix(.999739 0 0 .999739 -217.42902 110.06699)">)</text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="531.562239" y="-63.606396" transform="matrix(.999739 0 0 .999739 -217.42902 110.06699)">聚点定理</text>
<text font-family="LBKTRH-LMRoman10-Regular" font-size="9.96" x="630.166499" y="-63.606396" transform="matrix(.999739 0 0 .999739 -237.38898 110.06699)">Bolzano-W<tspan x="677.616012">eierstrass</tspan></text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="720.981792" y="-63.606396" transform="matrix(.999739 0 0 .999739 -237.38898 110.06699)">定理</text>
<text font-family="LBKTRH-LMRoman10-Regular" font-size="9.96" x="388.590561" y="-28.23163" transform="matrix(.999739 0 0 .999739 -219.78 110.06699)">Cauc<tspan x="410.452754">h</tspan><tspan x="415.711651">y</tspan></text>
<text font-family="CWFAOF-FandolSong-Regular" font-size="9.96" x="424.277245" y="-28.23163" transform="matrix(.999739 0 0 .999739 -219.78 110.06699)">收敛原理</text>
<path d="M87.50686 16.989497L45.95433 34.686677" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M48.614251 36.152476C47.703851 34.980984 46.662296 34.68832 45.77104 34.764738C46.443709 34.175084 46.954413 33.221317 46.74059 31.753154" stroke="#000" fill="none" stroke-width=".39847" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M57.4264 31.267657H75.66821V20.564687H57.4264Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 -122.429 56.215997)">反证</text>
<path d="M106.52821 16.989497V34.454287" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M108.91912 32.581386C107.48454 32.959956 106.80714 33.803566 106.52821 34.653516C106.24928 33.803566 105.57188 32.959956 104.1373 32.581386" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M97.40729 31.272617H115.64911V20.569647H97.40729Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 -82.448 56.220994)">反证</text>
<path d="M129.67497 16.989497L180.22133 34.681297" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M179.243465 31.805991C179.126868 33.285033 179.699312 34.203055 180.40937 34.747087C179.515028 34.729574 178.49504 35.09024 177.663839 36.319168" stroke="#000" fill="none" stroke-width=".398464" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M146.01528 31.252697H164.257101V20.549727H146.01528Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 -33.839998 56.200998)">反证</text>
<path d="M140.90971 14.571077L278.3962 37.306317" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M276.938475 34.642026C277.077948 36.119078 277.799722 36.924983 278.59275 37.338808C277.708724 37.475345 276.765955 38.006031 276.158464 39.359578" stroke="#000" fill="none" stroke-width=".398462" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M200.72861 31.322677H218.97043V20.619707H200.72861Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 20.874 56.270998)">反证</text>
<path d="M272.46793 8.886297H141.3082" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M143.18108 11.277205C142.80251 9.842625 141.9589 9.165225 141.10895 8.886295C141.9589 8.607365 142.80251 7.929965 143.18108 6.495385" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M197.56792 14.307507H215.80974V3.465067H197.56792Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 17.713002 39.297994)">构造</text>
<path d="M48.63461 43.952257H71.74823" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M69.875337 41.561347C70.253907 42.995927 71.097517 43.673327 71.947467 43.952257C71.097517 44.231187 70.253907 44.908587 69.875337 46.343167" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M140.90971 43.952257H171.90885" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M170.03595 41.561347C170.41452 42.995927 171.25813 43.673327 172.10808 43.952257C171.25813 44.231187 170.41452 44.908587 170.03595 46.343167" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M241.07034 43.952257H278.39082" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M276.51794 41.561347C276.89651 42.995927 277.74012 43.673327 278.59007 43.952257C277.74012 44.231187 276.89651 44.908587 276.51794 46.343167" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M250.80892 49.373477H269.050739V38.531037H250.80892Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 70.954 74.36399)">构造</text>
<path d="M192.63164 52.075377C140.51647 82.171417 90.42911 82.180197 38.65263 52.294497" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M39.079483 55.301451C39.468761 53.869757 39.076768 52.861361 38.480089 52.194898C39.355642 52.378215 40.4249 52.21326 41.469915 51.16006" stroke="#000" fill="none" stroke-width=".398475" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M106.35109 80.074397H124.59291V69.231956H106.35109Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 -73.504 105.064998)">构造</text>
<path d="M358.62094 43.952257H388.05593" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M386.18304 41.561347C386.56161 42.995927 387.40522 43.673327 388.25517 43.952257C387.40522 44.231187 386.56161 44.908587 386.18304 46.343167" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M415.0669 34.952407L350.09587 17.382417" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M351.279677 20.179226C351.288716 18.695622 350.651209 17.821527 349.90357 17.330416C350.796827 17.28303 351.787977 16.84935 352.527876 15.563383" stroke="#000" fill="none" stroke-width=".398464" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M373.26816 31.466907H391.50998V20.763937H373.26816Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 193.413 56.414995)">反证</text>
<path d="M393.47956 51.985717L249.35011 73.094977" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M251.54955 75.189166C250.967151 73.82464 250.034342 73.276643 249.15299 73.12381C249.953519 72.724696 250.690045 71.932254 250.85676 70.458033" stroke="#000" fill="none" stroke-width=".398461" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M388.45441 43.952257H359.01941" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M360.89233 46.343167C360.51376 44.908587 359.67015 44.231187 358.8202 43.952257C359.67015 43.673327 360.51376 42.995927 360.89233 41.561347" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M364.41676 49.373477H382.65857V38.531037H364.41676Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 184.562 74.36399)">构造</text>
<path d="M181.15796 70.317247L129.86655 52.198137" stroke="#000" fill="none" stroke-width=".39848" stroke-miterlimit="10"></path>
<path d="M130.836104 55.076167C130.95696 53.597505 130.387179 52.677861 129.67871 52.131799C130.572974 52.151888 131.593972 51.794173 132.42869 50.567676" stroke="#000" fill="none" stroke-width=".398454" stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round"></path>
<path d="M146.2035 66.542837H164.44532V55.839867H146.2035Z" fill="#fff"></path>
<text font-family="CWFAOF-FandolSong-Regular" font-size="6.97" x="181.902828" y="-28.223613" transform="matrix(.999455 0 0 .999455 -33.652 91.491)">反证</text>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-real-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: 实数完备性定理等价关系示意图
</figcaption>
</figure>
</div>
</section>
<section id="example-3" class="level2">
<h2 class="anchored" data-anchor-id="example-3">Example 3</h2>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-ulaccu" class="theorem">
<p><span class="theorem-title"><strong>Theorem 4</strong></span> 设数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 有界，其上极限 <img src="https://latex.codecogs.com/png.latex?%5Cvarlimsup_%7Bn%20%5Cto%20%5Cinfty%7D%20x_n%20=%20L">，下极限 <img src="https://latex.codecogs.com/png.latex?%5Cvarliminf_%7Bn%20%5Cto%20%5Cinfty%7D%20x_n%20=%20l">，则 <img src="https://latex.codecogs.com/png.latex?L"> 是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的最大聚点，<img src="https://latex.codecogs.com/png.latex?l"> 是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的最小聚点.</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>Theorem&nbsp;1 中，我们已经知道，一个数列的收敛子列的极限也是该数列的一个聚点. 结合上下极限的子列式定义即可证明上述定理.</p>
</div>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-ullim" class="theorem example">
<p><span class="theorem-title"><strong>Example 3</strong></span> 设数列 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 有界且 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D(x_%7Bn+1%7D%20%E2%88%92%20x_n)%20=%200">，分别记 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的上下极限为 <img src="https://latex.codecogs.com/png.latex?L"> 和 <img src="https://latex.codecogs.com/png.latex?l">. 证明 <img src="https://latex.codecogs.com/png.latex?%5Bl,%20L%5D"> 上的任意点可作为 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 某个子列的极限.</p>
</div>
</div>
</div>
</div>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>反证. 假设 <img src="https://latex.codecogs.com/png.latex?%5Bl,%20L%5D"> 上有一点 <img src="https://latex.codecogs.com/png.latex?a"> 不是任何 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的收敛子列的极限，则根据 Theorem&nbsp;1，<img src="https://latex.codecogs.com/png.latex?a"> 不是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的聚点，即存在 <img src="https://latex.codecogs.com/png.latex?a"> 的一个邻域 <img src="https://latex.codecogs.com/png.latex?U(a,%5Cvarepsilon)">，使得只有有限个 <img src="https://latex.codecogs.com/png.latex?x_n"> 落入该邻域，换句话说，存在某个 <img src="https://latex.codecogs.com/png.latex?N%20%5Cin%20%5Cmathbb%20N_+">，当 <img src="https://latex.codecogs.com/png.latex?n%3EN"> 时，就有 <img src="https://latex.codecogs.com/png.latex?x_n%20%5Cnotin%20U(a,%5Cvarepsilon)">.</p>
<p>又，考虑到 Theorem&nbsp;4 表明上下极限 <img src="https://latex.codecogs.com/png.latex?L"> 和 <img src="https://latex.codecogs.com/png.latex?l"> 都是 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 的聚点，<img src="https://latex.codecogs.com/png.latex?L,l%20%5Cnotin%20U(a,%5Cvarepsilon)"> 显然成立，且第 <img src="https://latex.codecogs.com/png.latex?N"> 项后的 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20x_n%20%5C%7D"> 完全由满足 <img src="https://latex.codecogs.com/png.latex?x_n%20%3E%20a+%5Cvarepsilon"> 和 <img src="https://latex.codecogs.com/png.latex?x_n%20%3C%20a-%5Cvarepsilon"> 的两种 <img src="https://latex.codecogs.com/png.latex?x_n"> 构成，且它们均有无穷多项. 这样，对于任意的 <img src="https://latex.codecogs.com/png.latex?M%3EN">，总可以找到一个 <img src="https://latex.codecogs.com/png.latex?m%20%3E%20M"> 使得 <img src="https://latex.codecogs.com/png.latex?x_m"> 和 <img src="https://latex.codecogs.com/png.latex?x_%7Bm+1%7D"> 分属 <img src="https://latex.codecogs.com/png.latex?U(a,%20%5Cvarepsilon)"> 的两侧，故 <img src="https://latex.codecogs.com/png.latex?%7Cx_m%20-%20x_%7Bm+1%7D%7C%20%5Cgeqslant%202%20%5Cvarepsilon">，这就与条件 <img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D(x_%7Bn+1%7D%20%E2%88%92%20x_n)%20=%200"> 产生矛盾. 故不存在这样的 <img src="https://latex.codecogs.com/png.latex?a">，定理得证.</p>
</div>
</section>


<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Acknowledgments</h2><div class="quarto-appendix-contents">

<p>感谢史老师主持研讨课并指出讲稿的多处错误，特别是原来聚点定理的证明中数列元素可重的 bug. 史老师还提供了标准聚点定义的另一种叙述.</p>



</div></section><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-lizhong" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">李忠 and 方丽萍, <em>数学分析教程</em>. 北京: 高等教育出版社, 2008, pp. 257–258.</div>
</div>
</div></section></div> ]]></description>
  <category>math</category>
  <category>analysis</category>
  <category>solution</category>
  <category>lecture notes</category>
  <guid>https://blog.sun123zxy.top/posts/20221213-cover/</guid>
  <pubDate>Tue, 13 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>关于 Python 的 import</title>
  <link>https://blog.sun123zxy.top/posts/20220714-import/</link>
  <description><![CDATA[ 




<p>好久以前就被 Python 的相对与绝对导入所困扰。去年粗浅探究后自以为完全理解，近来又因 <code>sys.path[0]</code> 和 <code>os.getcwd()</code> 的不一致而刷新了认知…</p>
<p>Python 官方文档 <a href="https://docs.python.org/3/reference/import.html">5. The import system — Python 3.10.5 documentation</a> 当然是最好的学习指南，但全部看完对我来说还是有点难度。这里只选择一些要点讨论。</p>
<section id="from-import" class="level2">
<h2 class="anchored" data-anchor-id="from-import">from import</h2>
<p><code>import A</code>、<code>import A as B</code>、<code>from A import B</code> 结构中，<code>A</code> 最小只能到 module。因此，只有使用 <code>from import</code> 结构才可以单独获取 module 里的属性。另外，相对引用必须使用 <code>from import</code> 结构。</p>
<p><code>from module import *</code> 将导入 <code>module</code> 中的所有成员（有单双下划线前导的成员除外）。对于 package 可在 <code>__init__.py</code> 中定义 <code>__all__ = ["module", "module", ...]</code> 来手动控制的实际导入内容。</p>
</section>
<section id="package-与-__init__.py" class="level2">
<h2 class="anchored" data-anchor-id="package-与-__init__.py">Package 与 __init__.py</h2>
<p>Python 3.3 以后的 package 不再硬性需要 <code>__init__.py</code>，普通文件夹等同于 <code>__init__.py</code> 留空的 namespace package。（关于 regular package 和 namespace package 的区别，参见 <a href="https://docs.python.org/3/reference/import.html#regular-packages">5. The import system — Python 3.10.5 documentation</a>）</p>
<p><code>__init__.py</code> 的作用在于当我们直接导入一个 package 的时候，实际上是执行了 <code>__init__.py</code>。换句话说，直接导入一个 package 就是把它看做一个逻辑写在 <code>__init__.py</code> 里的 module。</p>
<p>需要注意的是，对于形如 <code>A.B.C</code> 的导入，<code>A</code>、<code>A.B</code>、<code>A.B.C</code> 对应的 <code>__init__.py</code> 都会被执行。也就是说，只要导入路径经过该 package，该 package 的 <code>__init__.py</code> 就会被执行。</p>
</section>
<section id="submodules" class="level2">
<h2 class="anchored" data-anchor-id="submodules">Submodules</h2>
<blockquote class="blockquote">
<p>When a submodule is loaded using any mechanism (e.g.&nbsp;<code>importlib</code> APIs, the <code>import</code> or <code>import-from</code> statements, or built-in <code>__import__()</code>) a binding is placed in the parent module’s namespace to the submodule object. For example, if package <code>spam</code> has a submodule <code>foo</code>, after importing <code>spam.foo</code>, <code>spam</code> will have an attribute <code>foo</code> which is bound to the submodule.</p>
<p>…</p>
<p>Given Python’s familiar name binding rules this might seem surprising, but it’s actually a fundamental feature of the import system. The invariant holding is that if you have <code>sys.modules['spam']</code> and <code>sys.modules['spam.foo']</code> (as you would after the above import), the latter must appear as the <code>foo</code> attribute of the former.</p>
<p>— <a href="https://docs.python.org/3/reference/import.html#submodules">5. The import system — Python 3.10.5 documentation</a></p>
</blockquote>
<p>这是说，import 进来的 module 会被挂载到本 module 上作为其属性。</p>
<p>这个性质可以弄出来很多看上去很奇怪的玩意儿，比如说自己导入自己后可以 <code>me.me.me.me...</code> 无限嵌套之类的…</p>
<hr>
<p>另外，对于形如 <code>import A.B.C</code> 的导入，<code>A</code>、<code>A.B</code>、<code>A.B.C</code> 都会被挂载到本 module 上。然而，<code>from A.B import C</code> 却只会挂载 <code>C</code>，而 <code>import A.B.C as D</code> 也只会挂载 <code>D</code> ，即使 <code>A</code>、<code>A.B</code> 都被执行且都在 <code>sys.modules</code> 里。</p>
</section>
<section id="sys.path" class="level2">
<h2 class="anchored" data-anchor-id="sys.path">sys.path</h2>
<blockquote class="blockquote">
<p>A list of strings that specifies the search path for modules. Initialized from the environment variable <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH"><code>PYTHONPATH</code></a>, plus an installation-dependent default.</p>
<p>As initialized upon program startup, the first item of this list, <code>path[0]</code>, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g.&nbsp;if the interpreter is invoked interactively or if the script is read from standard input), <code>path[0]</code> is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted <em>before</em> the entries inserted as a result of <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH"><code>PYTHONPATH</code></a>.</p>
<p>A program is free to modify this list for its own purposes. Only strings and bytes should be added to <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a>; all other data types are ignored during import.</p>
<p>— <a href="https://docs.python.org/3/library/sys.html#sys.path">sys — System-specific parameters and functions — Python 3.10.5 documentation</a></p>
</blockquote>
<p><code>sys.path</code> 是 Python 搜索 module 的基准目录（即绝对导入）。其由环境变量 <code>PYTHONPATH</code> 和一些默认路径（和安装环境有关，参见 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME">PYTHONHOME</a>）组成，而在运行 script 时，<strong>script 的所在目录会被临时加入 <code>sys.path[0]</code> 中</strong>。如果运行的并不是 script（例如是交互式运行或从 stdin 中读取脚本代码），<strong><code>sys.path[0]</code> 则被设置为空字符串，代表当前工作目录</strong>。</p>
<p><code>sys.path</code> 有优先级，排在前面的优先级高。</p>
<hr>
<p>需要特别注意的是，<strong>script 的所在目录不是当前工作目录</strong>。例如，在 <code>D:\test</code> 下执行</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> path/to/file.py</span></code></pre></div>
<p>时，<code>sys.path[0]</code> 为 <code>D:\test\path\to\file.py</code>，而当前工作目录则是 <code>D:\test</code>（也即 <code>os.getcwd()</code>）。</p>
<p>当前工作目录是 Python 寻找其他文件时的基准路径，而所有绝对导入操作都只与 <code>sys.path</code> 有关，两者是完全不同的。</p>
<p><code>python -m</code> 的情况稍有不同，参见后文。</p>
</section>
<section id="python--m" class="level2">
<h2 class="anchored" data-anchor-id="python--m">python -m</h2>
<blockquote class="blockquote">
<p>Search <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a> for the named module and execute its contents as the <a href="https://docs.python.org/3/library/__main__.html#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code>__main__</code></a> module.</p>
<p>Since the argument is a <em>module</em> name, you must not give a file extension (<code>.py</code>). The module name should be a valid absolute Python module name, but the implementation may not always enforce this (e.g.&nbsp;it may allow you to use a name that includes a hyphen).</p>
<p>Package names (including namespace packages) are also permitted. When a package name is supplied instead of a normal module, the interpreter will execute <code>&lt;pkg&gt;.__main__</code> as the main module. This behaviour is deliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script argument.</p>
<blockquote class="blockquote">
<p>Note</p>
<p>This option cannot be used with built-in modules and extension modules written in C, since they do not have Python module files. However, it can still be used for precompiled modules, even if the original source file is not available.</p>
</blockquote>
<p>If this option is given, the first element of <a href="https://docs.python.org/3/library/sys.html#sys.argv" title="sys.argv"><code>sys.argv</code></a> will be the full path to the module file (while the module file is being located, the first element will be set to <code>"-m"</code>). As with the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-c"><code>-c</code></a> option, the current directory will be added to the start of <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a>.</p>
<p><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-I"><code>-I</code></a> option can be used to run the script in isolated mode where <a href="https://docs.python.org/3/library/sys.html#sys.path" title="sys.path"><code>sys.path</code></a> contains neither the current directory nor the user’s site-packages directory. All <code>PYTHON*</code> environment variables are ignored, too.</p>
<p>Many standard library modules contain code that is invoked on their execution as a script. An example is the <a href="https://docs.python.org/3/library/timeit.html#module-timeit" title="timeit: Measure the execution time of small code snippets."><code>timeit</code></a> module:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> timeit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'setup here'</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'benchmarked code here'</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> timeit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for details</span></span></code></pre></div>
<p>Raises an <a href="https://docs.python.org/3/library/sys.html#auditing">auditing event</a> <code>cpython.run_module</code> with argument <code>module-name</code>.</p>
<blockquote class="blockquote">
<p>See also</p>
<p><a href="https://docs.python.org/3/library/runpy.html#runpy.run_module" title="runpy.run_module"><code>runpy.run_module()</code></a></p>
<p>Equivalent functionality directly available to Python code</p>
</blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0338">PEP 338</a> – Executing modules as scripts</p>
<p>Changed in version 3.1: Supply the package name to run a <code>__main__</code> submodule.</p>
<p>Changed in version 3.4: namespace packages are also supported</p>
<p>— <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m">1. Command line and environment — Python 3.10.5 documentation</a></p>
</blockquote>
<p>在 <code>sys.path</code> 指定的目录中寻找 module 并以 <code>__main__</code> module 的身份执行指定 module。</p>
<p>注意不要在名字后面加 <code>.py</code>，因为我们已经把执行的文件当作 module 来看待。</p>
<p>如果指定的是一个 Package name（即目录名），将会执行 <code>&lt;pkg&gt;.__main__</code>（即 <code>&lt;pkg&gt;/__main__.py</code>）。</p>
<p>另外，如果使用 <code>python -m a.b.module</code>，<code>sys.argv</code> 的首位将被设置为被执行 module 文件的<strong>完整路径</strong>（与之相对，<code>python a/b/module.py</code> 中 <code>sys.argv[0]</code> 将会是<strong>相对当前工作目录的路径</strong>，即 <code>a/b/module.py</code>）；同时，<strong>当前工作目录</strong>会被加入 <code>sys.path</code> 的首位。</p>
<hr>
<p><code>python -m A.B.module</code> 将顺次执行 <code>A</code>、<code>A.B</code> 的 <code>__init__.py</code>，即使该 module 没有任何导入行为。</p>
<p><code>python -m</code> 对于直接执行 package 内部的代码是必要的。若直接以 script 方式运行，一旦涉及到任何高于该 script 所在目录（含该目录）的相对导入，Python 就会抛出如下错误：</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">ImportError: attempted relative import with no known parent package</span></code></pre></div>
<p>而一个 module 也不能导入超过 <code>python -m</code> 参数指定的最顶层结构的 module，否则会抛出错误：</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">ImportError: attempted relative import beyond top-level package</span></code></pre></div>
</section>
<section id="sys.modules" class="level2">
<h2 class="anchored" data-anchor-id="sys.modules">sys.modules</h2>
<blockquote class="blockquote">
<p>The first place checked during import search is <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a>. This mapping serves as a cache of all modules that have been previously imported, including the intermediate paths. So if <code>foo.bar.baz</code> was previously imported, <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a> will contain entries for <code>foo</code>, <code>foo.bar</code>, and <code>foo.bar.baz</code>. Each key will have as its value the corresponding module object.</p>
<p>During import, the module name is looked up in <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a> and if present, the associated value is the module satisfying the import, and the process completes. However, if the value is <code>None</code>, then a <a href="https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError" title="ModuleNotFoundError"><code>ModuleNotFoundError</code></a> is raised. If the module name is missing, Python will continue searching for the module.</p>
<p><a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a> is writable. Deleting a key may not destroy the associated module (as other modules may hold references to it), but it will invalidate the cache entry for the named module, causing Python to search anew for the named module upon its next import. The key can also be assigned to <code>None</code>, forcing the next import of the module to result in a <a href="https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError" title="ModuleNotFoundError"><code>ModuleNotFoundError</code></a>.</p>
<p>Beware though, as if you keep a reference to the module object, invalidate its cache entry in <a href="https://docs.python.org/3/library/sys.html#sys.modules" title="sys.modules"><code>sys.modules</code></a>, and then re-import the named module, the two module objects will <em>not</em> be the same. By contrast, <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" title="importlib.reload"><code>importlib.reload()</code></a> will reuse the <em>same</em> module object, and simply reinitialise the module contents by rerunning the module’s code.</p>
<p>— <a href="https://docs.python.org/3/reference/import.html#the-module-cache">5. The import system — Python 3.10.5 documentation</a></p>
</blockquote>
<p><code>sys.modules</code> 是一个 <code>dict</code>，Python 在导入之前会去检查 <code>sys.module</code> 里是否已经存有需要的 module 的 module object。如果有，就直接用这个；如果值为 <code>None</code>（意思是以前找过但没找到），就直接报错；如果该键值对不存在，就继续搜索过程。总之，<code>sys.modules</code> 扮演了一个类似 cache 的角色。</p>
<p>对于形如 <code>A.B.C</code> 的导入，Python 会顺次导入 <code>A</code>、<code>A.B</code> 和 <code>A.B.C</code> 并把他们加入 <code>sys.modules</code>。</p>
</section>
<section id="参考" class="level2">
<h2 class="anchored" data-anchor-id="参考">参考</h2>
<ul>
<li><p><a href="https://docs.python.org/3/reference/import.html">5. The import system — Python 3.10.5 documentation</a></p></li>
<li><p><a href="https://docs.python.org/3/tutorial/modules.html">6. Modules — Python 3.10.5 documentation</a></p></li>
<li><p><a href="https://www.pythonforthelab.com/blog/complete-guide-to-imports-in-python-absolute-relative-and-more/">Python for the Lab | Complete Guide to Imports in Python: Absolute, Relative, and More</a></p></li>
<li><p><a href="https://www.cnblogs.com/gaowengang/p/8543840.html">Python 包内的导入问题（绝对导入和相对导入） - Anonymous596 - 博客园</a></p></li>
</ul>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://blog.sun123zxy.top/posts/20220714-import/</guid>
  <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>DockerCompose+VLESS+WS+TLS+Web 方式搭建 V2Ray 代理</title>
  <link>https://blog.sun123zxy.top/posts/20220204-vmagic/</link>
  <description><![CDATA[ 




<p>全文参考：</p>
<ul>
<li><a href="https://guide.v2fly.org/advanced/wss_and_web.html">(VMESS) + WebSocket + TLS + Web | 新 V2Ray 白话文指南</a></li>
<li><a href="https://guide.v2fly.org/app/docker-deploy-v2ray.html">Docker 部署 V2Ray | 新 V2Ray 白话文指南</a></li>
<li><a href="https://www.v2fly.org/">V2Ray(V2Fly) 官方文档</a></li>
</ul>
<section id="原理" class="level2">
<h2 class="anchored" data-anchor-id="原理">原理</h2>
<p>VLESS 作为内部传输协议，使用 HTTP 的扩展 WebSocket 作为传输载体，外层使用 TLS 加密传输。服务器端用 Nginx 搭建正常 HTTPS 网站，收到向特定路径发送的 WebSocket 流量时充当反向代理转发至 Docker 容器内的 V2Ray 处理。</p>
<p>从外部看，服务器是货真价实的 HTTPS 服务器，客户端发出的请求也是货真价实的 HTTPS 流量；直接用浏览器访问入口路径将返回 <code>400 Bad Request</code>（由 V2Ray 返回）或 <code>404 Not Found</code>（可在 Nginx 中预检测 WebSocket 请求，增强隐蔽性）；安全性、抗干扰能力则完全由 TLS 保障，几乎无懈可击。</p>
<p>更强的技术还有 Xray 中使用的 XTLS，无缝拼接了内外两层 TLS 使得性能进一步提高。不过因为和 V2Ray 主社区分离了，还是决定先用 VLESS+WS+TLS+Web 配置。</p>
<ul>
<li><a href="https://tlanyan.pp.ua/xray-tutorial/">V2Ray V2Fly Xray 的历史</a></li>
</ul>
<p>结构上，使用 Docker 和 Docker Compose 容器化安装方便管理；而装在外层的 Nginx 可以作为所有网页服务的入口点，方便以后增加其它服务。</p>
</section>
<section id="流程" class="level2">
<h2 class="anchored" data-anchor-id="流程">流程</h2>
<p>以下所有操作在 Ubuntu 20.04 的 root 用户下进行。代码中部分需要自己填写的敏感信息会用如 <code>{[VARIABLE]}</code> 的记号标明，请自行替换。</p>
<section id="准备工作" class="level3">
<h3 class="anchored" data-anchor-id="准备工作">准备工作</h3>
<section id="安装-curl" class="level4">
<h4 class="anchored" data-anchor-id="安装-curl">安装 cURL</h4>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt</span> install curl</span></code></pre></div>
</section>
<section id="安装-docker" class="level4">
<h4 class="anchored" data-anchor-id="安装-docker">安装 Docker</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fsSL</span> https://get.docker.com/ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 获取脚本并交给 sh (shell) 执行</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start docker</span></code></pre></div>
</section>
<section id="安装-docker-compose" class="level4">
<h4 class="anchored" data-anchor-id="安装-docker-compose">安装 Docker Compose</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> https://github.com/docker/compose/releases/download/1.25.0/docker-compose-<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> /usr/local/bin/docker-compose</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker-compose --version</span></span></code></pre></div>
</section>
<section id="安装并运行-nginx" class="level4">
<h4 class="anchored" data-anchor-id="安装并运行-nginx">安装并运行 Nginx</h4>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt</span> install nginx</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start nginx</span></code></pre></div>
<p>此时通过浏览器访问服务器就能看到 Nginx 默认的欢迎界面了。</p>
</section>
<section id="调试技巧" class="level4">
<h4 class="anchored" data-anchor-id="调试技巧">调试技巧</h4>
<p>Nginx 的日志存储在 <code>/var/log/nginx</code> 目录下；V2Ray 的日志在 Docker 容器里，之后我们将把它映射到宿主机上方便操作和存储。</p>
<p>一些常用的调试命令：</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start nginx</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> status nginx</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> stop nginx</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and start containers（-d 表示后台运行）</span></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> down  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop and remove containers, networks, images, and volumes</span></span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> start <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start services</span></span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> stop  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop services</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> ps <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 查看各容器运行状态</span></span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> log {<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">CONTAINER_ID</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 查看某容器运行日志</span></span></code></pre></div>
</section>
</section>
<section id="安装-certbot-并以-webroot-方式获取-lets-encrypt-证书" class="level3">
<h3 class="anchored" data-anchor-id="安装-certbot-并以-webroot-方式获取-lets-encrypt-证书">安装 Certbot 并以 Webroot 方式获取 Let’s Encrypt 证书</h3>
<ul>
<li>Certbot 官方教程：<a href="https://eff-certbot.readthedocs.io/en/stable/using.html">User Guide — Certbot 1.22.0 documentation</a></li>
<li>Certbot 原理：<a href="https://www.jianshu.com/p/3ffd27b64847">HTTPS-使用Certbot自动配置Let’s Encrypt证书 - 简书</a></li>
</ul>
<p>Let’s Encrypt 是一个免费、自动化和开放的证书颁发机构，为网站提供免费的 SSL/TLS 证书。要从 Let’s Encrypt 获取某个域名的证书，需要证明拥有对该域名的控制权，而 Certbot 就是官方提供的自动化认证工具。</p>
<p>Webroot 是 Certbot 提供的一种认证方式，如果服务器上有网站运行且有能力修改其配置，就可以用该方式进行认证。使用这种方式获取证书时无需暂停网页服务端的运行。</p>
<blockquote class="blockquote">
<p>The webroot plugin works by creating a temporary file for each of your requested domains in <code>${webroot-path}/.well-known/acme-challenge</code>. Then the Let’s Encrypt validation server makes HTTP requests to validate that the DNS for each requested domain resolves to the server running certbot.</p>
</blockquote>
<p>首先安装 Certbot：</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt</span> install certbot python3-certbot</span></code></pre></div>
<p>因为之前安装的 Nginx 已经在 <code>/var/www/html</code> 下生成默认的欢迎页网站，故可直接利用该目录进行 Webroot 认证：</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">certbot</span> certonly <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--webroot</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> /var/www/html <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> {<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">YOUR_DOMAIN</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>}</span></code></pre></div>
<p>认证过程中 Certbot 的回显信息：</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span>
<span id="cb8-2">Plugins selected: Authenticator webroot, Installer None</span>
<span id="cb8-3">Obtaining a new certificate</span>
<span id="cb8-4">Performing the following challenges:</span>
<span id="cb8-5">http-01 challenge for {[YOUR_DOMAIN]}</span>
<span id="cb8-6">Using the webroot path /var/www/html for all unmatched domains.</span>
<span id="cb8-7">Waiting for verification...</span>
<span id="cb8-8">Cleaning up challenges</span>
<span id="cb8-9"></span>
<span id="cb8-10">IMPORTANT NOTES:</span>
<span id="cb8-11"> - Congratulations! Your certificate and chain have been saved at:</span>
<span id="cb8-12">   /etc/letsencrypt/live/{[YOUR_DOMAIN]}/fullchain.pem</span>
<span id="cb8-13">   Your key file has been saved at:</span>
<span id="cb8-14">   /etc/letsencrypt/live/{[YOUR_DOMAIN]}/privkey.pem</span>
<span id="cb8-15">   Your cert will expire on {[EXPIRE-DATE]}. To obtain a new or tweaked</span>
<span id="cb8-16">   version of this certificate in the future, simply run certbot</span>
<span id="cb8-17">   again. To non-interactively renew *all* of your certificates, run</span>
<span id="cb8-18">   "certbot renew"</span>
<span id="cb8-19"> - If you like Certbot, please consider supporting our work by:</span>
<span id="cb8-20"></span>
<span id="cb8-21">   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate</span>
<span id="cb8-22">   Donating to EFF:                    https://eff.org/donate-le</span></code></pre></div>
</section>
<section id="使用-docker-compose-安装并配置-v2ray" class="level3">
<h3 class="anchored" data-anchor-id="使用-docker-compose-安装并配置-v2ray">使用 Docker Compose 安装并配置 V2Ray</h3>
<p>上传 <code>docker-compose.json</code> 至适当位置（建议妥善储存该文件，以便后续管理使用）：</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3.4"</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">v2ray</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v2fly/v2fly-core</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v2ray</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 自动重启容器</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[YOUR_PORT_OUTER]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:{[YOUR_PORT_INNER]}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 端口映射，注意外左内右</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v2ray -config=/etc/v2ray/config.json</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 需要指定配置文件位置</span></span>
<span id="cb9-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/v2ray:/etc/v2ray</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 左边宿主目录，右边容器目录</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /var/log/v2ray:/var/log/v2ray</span></span></code></pre></div>
<p>利用 volume 技术，容器中 V2Ray 的配置文件被映射到宿主机的 <code>/etc/v2ray</code> 目录下，而日志信息被映射到 <code>/var/log/v2ray</code> 目录下。</p>
<p>故运行容器之前，我们在 <code>/etc/v2ray</code> 下放置 <code>config.json</code> 作为容器内 V2Ray 的配置文件：</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"log"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loglevel"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"access"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/var/log/v2ray/access.log"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"error"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/var/log/v2ray/error.log"</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inbounds"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"port"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_PORT_INNER]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">容器内的监听端口</span></span>
<span id="cb10-10">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"listen"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Caution!</span></span>
<span id="cb10-11">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"protocol"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vless"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"settings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-13">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"decryption"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-14">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"clients"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-15">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-16">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_UUID]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-17">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"email"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_EMAIL]}"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">作标识用，可以随便填</span></span>
<span id="cb10-18">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-19">                <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-20">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"streamSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-22">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"network"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ws"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-23">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"wsSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-24">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"path"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_PATH]}"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">希望设定的</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">V2Ray</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">入口路径，如</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/ray"</span></span>
<span id="cb10-25">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-26">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-28">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-29">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"outbounds"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-31">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"protocol"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"freedom"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-32">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"settings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb10-33">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-34">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<blockquote class="blockquote">
<p>有一个小坑点（见 <a href="https://github.com/v2ray/v2ray-core/issues/2221">Issue #2221</a>）：与白话文指南不同，如果用 Docker 搭建 V2Ray，容器外的 Nginx 需要向容器内的 V2Ray 发送数据，因此容器内的 V2Ray 必须监听本机 IP <code>0.0.0.0</code> 而不是本地回环 IP <code>127.0.0.1</code>。</p>
<p>常见的症状是客户端报 <code>502 Bad Gateway &gt; websocket: bad handshake</code> ，Nginx 报 <code>upstream prematurely closed connection</code>，而容器内 V2Ray 没有报警日志。</p>
</blockquote>
<p>最后，在之前放置 <code>docker-compose.yml</code> 的目录下执行：</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker-compose</span> up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span></span></code></pre></div>
</section>
<section id="设置-nginx-反向代理" class="level3">
<h3 class="anchored" data-anchor-id="设置-nginx-反向代理">设置 Nginx 反向代理</h3>
<ul>
<li><a href="http://nginx.org/en/docs/http/configuring_https_servers.html">Nginx - Configuring HTTPS servers</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html">Nginx - Module ngx_http_ssl_module</a></li>
</ul>
<p>通常修改 Nginx 配置可以通过直接修改 <code>/etc/nginx/nginx.conf</code> 或在 <code>/etc/nginx/conf.d/</code> 目录下新建配置文件的方式进行，但根据推荐的目录结构（参见 <a href="https://wiki.debian.org/Nginx/DirectoryStructure">Nginx/DirectoryStructure - Debian Wiki</a>），这里选择在 <code>/etc/nginx/sites-available/</code> 放置配置文件后在 <code>/etc/nginx/sites-enabled/my-enabled.conf</code> 中动态引用。</p>
<p>故首先在 <code>/etc/nginx/sites-available/</code> 下新建 <code>{[YOUR_DOMAIN]}.conf</code>（文件名可自行调整）：</p>
<pre class="nginx"><code>server {
  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate       /etc/letsencrypt/live/{[YOUR_DOMAIN]}/fullchain.pem;
  ssl_certificate_key   /etc/letsencrypt/live/{[YOUR_DOMAIN]}/privkey.pem;
  # 利用缓存重用 session 提高性能
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;
  ssl_session_tickets off;

  ssl_protocols         TLSv1.2 TLSv1.3;
  # 设置加密方式，默认的已经不安全了
  ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off; # (?) Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols.

  server_name           {[YOUR_DOMAIN]};
  location {[YOUR_PATH]} { # 与 V2Ray 配置中的 path 保持一致
    if ($http_upgrade != "websocket") { # WebSocket 协商失败时返回 404
        return 404;
    }
    proxy_redirect off;
    proxy_pass http://127.0.0.1:{[YOUR_PORT_OUTER]}; # 设置反向代理转发至 V2Ray
    proxy_http_version 1.1;
    # 一些 WebSocket 需要的配置
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    # Show real IP in v2ray access.log
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
# modified from (2022/01/30) https://guide.v2fly.org/advanced/wss_and_web.html#nginx-%E9%85%8D%E7%BD%AE</code></pre>
<p>然后在 <code>/etc/nginx/sites-enabled/</code> 目录下，保持原有的 <code>default</code> 文件，并利用</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /etc/nginx/sites-available/{[YOUR_DOMAIN]}.conf</span></code></pre></div>
<p>创建软链接至刚才保存的配置文件．最后重新加载配置文件：</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nginx</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> reload</span></code></pre></div>
</section>
<section id="客户端" class="level3">
<h3 class="anchored" data-anchor-id="客户端">客户端</h3>
<p><del>用的图形化界面还没研究配置文件</del>，不过 outbounds 部分大致应如下所示：</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb15-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"outbounds":</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"protocol"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vless"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"settings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"vnext"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-6">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-7">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_DOMAIN]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-8">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"port"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">443</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-9">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"users"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-10">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_UUID]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"email"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_EMAIL]}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-11">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-12">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-13">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"streamSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"network"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ws"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-17">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"security"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-18">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"wsSettings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-19">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"path"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{[YOUR_PATH]}"</span></span>
<span id="cb15-20">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-23"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>web</category>
  <guid>https://blog.sun123zxy.top/posts/20220204-vmagic/</guid>
  <pubDate>Fri, 04 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>从不定方程的非负整数解个数谈起</title>
  <link>https://blog.sun123zxy.top/posts/20210501-diophantine/</link>
  <description><![CDATA[ 




<section id="序" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="序"><span class="header-section-number">1</span> 序</h2>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="exm-diophantine" class="theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> 求将 <img src="https://latex.codecogs.com/png.latex?n"> 个无标号元素用 <img src="https://latex.codecogs.com/png.latex?m-1"> 个隔板分入 <img src="https://latex.codecogs.com/png.latex?m"> 个有标号可空集合的方案数。</p>
<p>此问题的另一个等价表述是，求不定方程 <img src="https://latex.codecogs.com/png.latex?%0Ax_1%20+%20x_2%20+%20%5Cdots%20+%20x_m%20=%20n%20%5Cquad%20(m,n%20%5Cin%20N_+,%20m%20%5Cle%20n)%0A"> 的非负整数解的个数。</p>
</div>
</div>
</div>
</div>
<p>是一个非常经典的组合问题，众所周知其答案为组合数 <img src="https://latex.codecogs.com/png.latex?%7Bn+m-1%20%5Cchoose%20m-1%7D"> ，这可以根据其组合意义结合隔板法容易的得到。</p>
<p>然而，笔者发现还有很多有趣的方法可以得到上式，值得探讨一番。</p>
</section>
<section id="组合意义" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="组合意义"><span class="header-section-number">2</span> 组合意义</h2>
<p>如上所述，组合意义可以结合隔板法容易的得到。考虑将 <img src="https://latex.codecogs.com/png.latex?n"> 个无标号元素用 <img src="https://latex.codecogs.com/png.latex?m-1"> 个隔板分入 <img src="https://latex.codecogs.com/png.latex?m"> 个有标号非空集合，其方案数为 <img src="https://latex.codecogs.com/png.latex?%7Bn-1%20%5Cchoose%20m-1%7D"> 。然而我们需要的是各集合可空情况下的方案数。考虑新增 <img src="https://latex.codecogs.com/png.latex?m"> 个元素，先给每个集合放一个元素垫底，再做各组可空的分配。这个小Trick让我们将问题转化为求 <img src="https://latex.codecogs.com/png.latex?n+m"> 个无标号元素分入 <img src="https://latex.codecogs.com/png.latex?m"> 个非空有标号集合的方案数。再用隔板法，得到答案 <img src="https://latex.codecogs.com/png.latex?%7Bn+m-1%20%5Cchoose%20m-1%7D"> 。</p>
<p>形式化的，我们令 <img src="https://latex.codecogs.com/png.latex?y_i%20=%20x_i%20+%201"> ，则我们现在只需求 <img src="https://latex.codecogs.com/png.latex?y_1%20+%20y_2%20+%20%5Cdots%20+%20y_m%20=%20n%20+%20m"> 的正整数解，隔板法得到答案 <img src="https://latex.codecogs.com/png.latex?%7Bn+m-1%20%5Cchoose%20m-1%7D"> 。</p>
</section>
<section id="枚举空位vandermonde-卷积公式" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="枚举空位vandermonde-卷积公式"><span class="header-section-number">3</span> 枚举空位——Vandermonde 卷积公式</h2>
<p>我们使用另一种方法将隔板法应用到可空集合上。</p>
<p>枚举 <img src="https://latex.codecogs.com/png.latex?m"> 个集合中有几个是空集，可以得到下式</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Csum_%7Bk=0%7D%5E%7Bm-1%7D%20%7Bm%20%5Cchoose%20k%7D%20%7Bn-1%20%5Cchoose%20m-k-1%7D%0A"></p>
<p>又由</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-vandermonde" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (Vandermonde 卷积公式)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A%7Bn+m%20%5Cchoose%20k%7D%20=%20%5Csum_%7Bi=%5Cmax(0,k-m)%7D%5E%7B%5Cmin(n,k)%7D%20%7Bn%20%5Cchoose%20i%7D%20%7Bm%20%5Cchoose%20k-i%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>（该定理易由 <img src="https://latex.codecogs.com/png.latex?(1+x)%5E%7Bn+m%7D%20=%20(1+x)%5En%20(1+%20x)%5Em"> 的二项式展开说明）</p>
<p>可直接得到（ <img src="https://latex.codecogs.com/png.latex?k'%20=%20m-1"> ， <img src="https://latex.codecogs.com/png.latex?n'%20=%20m"> ， <img src="https://latex.codecogs.com/png.latex?m'%20=%20n-1"> ）</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Csum_%7Bk=%5Cmax(0,(m-1)-(n-1))%7D%5E%7B%5Cmin(m,m-1)%7D%20%7Bm%20%5Cchoose%20k%7D%20%7Bn-1%20%5Cchoose%20m-k-1%7D%20=%20%7Bn+m-1%20%5Cchoose%20m-1%7D%0A"></p>
</section>
<section id="递推杨辉三角" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="递推杨辉三角"><span class="header-section-number">4</span> 递推——杨辉三角</h2>
<p>这固然很妙，但要是我想不到这些Trick怎么办？</p>
<p>作为完全不虚递推的 OIer，我们考虑 dp。</p>
<p>设状态 <img src="https://latex.codecogs.com/png.latex?f(n,m)"> 表示将 <img src="https://latex.codecogs.com/png.latex?n"> 个无标号元素放入 <img src="https://latex.codecogs.com/png.latex?m"> 个有标号可空集合的方案数。</p>
<p>考虑当前正在为第 <img src="https://latex.codecogs.com/png.latex?n"> 个元素确定所属集合。既然元素是无标号的，不妨按升序排列集合。于是放入新的元素时，只需决定要先跳过多少个集合再放入。易得下面的递推式</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(n,m)%20=%20%5Csum_%7Bk=1%7D%5Em%20f(n-1,k)%0A"></p>
<p>初始状态满足</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A&amp;f(0,m)=1%20%5C%5C%0A&amp;f(n,0)=%5Bn=0%5D%0A%5Cend%7Baligned%7D%0A%5Cquad%20(n,m%20%5Cin%20N)%0A"></p>
<p>（中括号是艾弗森括号）</p>
<p>不妨列出 <img src="https://latex.codecogs.com/png.latex?f"> 的前几项——</p>
<pre><code>    m0   m1   m2   m3   m4
n0  1    1    1    1    1
n1  0    1    2    3    4
n2  0    1    3    6    10
n3  0    1    4    10   20</code></pre>
<p>很熟悉…这是杨辉三角！</p>
<p>可以由递推式得到杨辉三角的特征——</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af(n,m)%20&amp;=%20f(n-1,%20m)%20+%20%5Csum_%7Bk=1%7D%5E%7Bm-1%7D%20f(n-1,k)%20%5C%5C%0A&amp;=%20f(n-1,%20m)%20+%20f(n,%20m-1)%0A%5Cend%7Baligned%7D%0A"></p>
<p>那么，只需观察并将表格的每一项映射到杨辉三角，我们就能得到 <img src="https://latex.codecogs.com/png.latex?f(n,m)%20=%20%7Bn+m+1%20%5Cchoose%20m-1%7D"> 。</p>
</section>
<section id="生成函数广义二项式定理" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="生成函数广义二项式定理"><span class="header-section-number">5</span> 生成函数——广义二项式定理</h2>
<p><del>要是我连杨辉三角都没看出来怎么办</del></p>
<p>方便起见，此处我们不研究 <img src="https://latex.codecogs.com/png.latex?m=0"> 的情况。不妨设</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(n,m)%20=%20f(n,m+1)%0A"></p>
<p>显然， <img src="https://latex.codecogs.com/png.latex?g"> 的递推式为</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(n,m)%20=%20%5Csum_%7Bk=0%7D%5Em%20g(n-1,k)%0A"></p>
<p>据此我们发现，每一排是其前一排的前缀和数组，或者换句话说，每一排是其后一排的向前差分数组。我们先拿出 <img src="https://latex.codecogs.com/png.latex?n=0"> 一排的OGF</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_0(x)%20=%20%5Cfrac%7B1%7D%7B1-x%7D%0A"></p>
<p>又根据差分</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_n(x)%20=%20g_%7Bn+1%7D(x)%20-%20x%20g_%7Bn+1%7D(x)%20%5Ciff%20g_%7Bn+1%7D(x)%20=%20%5Cfrac%7B1%7D%7B1-x%7D%20g_n(x)%0A"></p>
<p>得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_n(x)%20=%20(1-x)%5E%7B-(n+1)%7D%0A"></p>
<p>又由</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div id="thm-binomial" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2 (广义二项式定理)</strong></span> <img src="https://latex.codecogs.com/png.latex?%0A(x+y)%5E%5Calpha%20=%20%5Csum_%7Bk=0%7D%5E%7B%5Cinfty%7D%20%7B%5Calpha%20%5Cchoose%20k%7D%20x%5Ek%20y%5E%7B%5Calpha%20-%20k%7D%0A"></p>
<p>其中</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Calpha%20%5Cchoose%20k%7D%20=%20%5Cfrac%7B%5Calpha(%5Calpha-1)%5Cdots(%5Calpha-k+1)%7D%7Bk!%7D%0A"></p>
</div>
</div>
</div>
</div>
<p>展开，得到</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_n(x)%20=%20%5Csum_%7Bk=0%7D%5E%7B%5Cinfty%7D%20%7B-n-1%20%5Cchoose%20k%7D%20(-x)%5Ek%0A"></p>
<p>故</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ag_n(x)%5Bx%5Ek%5D%20&amp;=%20(-1)%5Ek%20%7B-n-1%20%5Cchoose%20k%7D%20%5C%5C%0A&amp;=%20(-1)%5Ek%20%5Cfrac%7B(-n-1)(-n-2)%5Cdots(-n-k)%7D%7Bk!%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B(n+1)(n+2)%5Cdots(n+k)%7D%7Bk!%7D%20%5C%5C%0A&amp;=%20%7Bn+k%20%5Cchoose%20k%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>即</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(n,k)%20=%20%7Bn+k%20%5Cchoose%20k%7D%0A"></p>
<p>换回 <img src="https://latex.codecogs.com/png.latex?f"> 表示就得到答案</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(n,m)%20=%20g(n,m-1)%20=%20%7Bn+m-1%20%5Cchoose%20m-1%7D%0A"></p>
<section id="update" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="update"><span class="header-section-number">5.1</span> 2023/03/10 update</h3>
<p>事实上，直接从组合意义思考就能直接得到该计数问题的生成函数形式</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(1%20+%20x%20+%20x%5E2%20+%20%5Cdots)%5Em%20=%20%5Cleft(%20%5Cfrac%201%20%7B1-x%7D%20%5Cright)%5Em%20=%20(1-x)%5E%7B-m%7D%0A"></p>
<p>按前述方法展开即可得到相同的结果。</p>
</section>
</section>
<section id="burnsidepolya第一类斯特林数" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="burnsidepolya第一类斯特林数"><span class="header-section-number">6</span> Burnside(Polya)——第一类斯特林数</h2>
<p>如果要分组的 <img src="https://latex.codecogs.com/png.latex?n"> 个元素是有标号的，问题将会简单很多——直接枚举每个元素的所属集合即可，显然方案数为 <img src="https://latex.codecogs.com/png.latex?m%5En"> 。</p>
<p>但关键是它们没有标号。</p>
<p>无标号的本质是认为任意置换标号前后是同构的。这启发我们将所有 <img src="https://latex.codecogs.com/png.latex?n"> 元置换（即置换群）作为变换集，使用等价类计数Burnside来解决该问题。</p>
<p>根据Burnside引理（或Polya定理）</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7B%7CG%7C%7D%20%5Csum_%7Bf%20%5Cin%20G%7D%20C(f)%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?G"> 是变换集， <img src="https://latex.codecogs.com/png.latex?C(f)"> 是变换 <img src="https://latex.codecogs.com/png.latex?f"> 的不动点。</p>
</blockquote>
<p>可以写出</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7Bn!%7D%20%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20m%5E%7B%5Cmathrm%7Bcyc%7D(p)%7D%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bperm%7D(n)"> 表示所有 <img src="https://latex.codecogs.com/png.latex?n"> 元置换的集合，而 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bcyc%7D(p)"> 指置换 <img src="https://latex.codecogs.com/png.latex?p"> 的形成的置换图中环的个数。</p>
<p>在外层枚举 <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Bcyc%7D(p)"> ，得</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7Bn!%7D%20%5Csum_%7Bk=1%7D%5En%20m%5Ek%20%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D"> 是什么？</p>
<blockquote class="blockquote">
<p>第一类斯特林数 <img src="https://latex.codecogs.com/png.latex?%7Bn%20%5Cbrack%20k%7D"> 表示将 <img src="https://latex.codecogs.com/png.latex?n"> 个有标号元素分成 <img src="https://latex.codecogs.com/png.latex?k"> 个无标号圆排列的方案数。</p>
</blockquote>
<p>在置换图中， <img src="https://latex.codecogs.com/png.latex?p_i"> 表示节点 <img src="https://latex.codecogs.com/png.latex?i"> 的下一个节点是 <img src="https://latex.codecogs.com/png.latex?p_i"> 。而枚举置换的过程，正是枚举置换图的过程，也正是枚举圆排列的过程！而 <img src="https://latex.codecogs.com/png.latex?%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D"> 则为我们确定了环，或者说圆排列的个数。</p>
<p>惊讶的，我们发现</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7Bn%20%5Cbrack%20k%7D%20=%20%5Csum_%7Bp%20%5Cin%20%5Cmathrm%7Bperm%7D(n)%7D%20%5B%5Cmathrm%7Bcyc%7D(p)%20=%20k%5D%0A"></p>
<p>带入其中，答案式变为</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7B1%7D%7Bn!%7D%20%5Csum_%7Bk=1%7D%5En%20%7Bn%20%5Cbrack%20k%7D%20m%5Ek%0A"></p>
<p>于是，根据第一类斯特林数性质之一</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=1%7D%5En%20%7Bn%20%5Cbrack%20k%7D%20m%5Ek%20%20=%20m(m+1)%5Cdots(n+m-1)%0A"></p>
<p>（该性质可以结合第一类斯特林数的递推式做数学归纳得出）</p>
</blockquote>
<p>我们愉快的得到了答案</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bans%7D%20=%20%5Cfrac%7Bm(m+1)%5Cdots(n+m-1)%7D%7Bn!%7D%20=%20%7Bn+m-1%20%5Cchoose%20m-1%7D%0A"></p>
<p>用Burnside解决无标号问题的思路极具启发性，例如<a href="https://loj.ac/p/6538">烷基计数</a>问题的Burnside解法。</p>
</section>
<section id="后记致谢" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="后记致谢"><span class="header-section-number">7</span> 后记&amp;致谢</h2>
<p><del>同分异构体计数带我重回OI</del></p>
<p>感谢TbYangZ菊苣全程提供技术支持。</p>
<p>感谢神仙化学老师提供组合意义解释。</p>


</section>

 ]]></description>
  <category>algorithm</category>
  <category>math</category>
  <category>combinatorics</category>
  <guid>https://blog.sun123zxy.top/posts/20210501-diophantine/</guid>
  <pubDate>Sat, 01 May 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>等价类计数：Burnside引理 &amp; Polya定理</title>
  <link>https://blog.sun123zxy.top/posts/20200321-burnside/</link>
  <description><![CDATA[ 




<p>注：本文变换均为右结合，如有不便，敬请谅解。</p>
<section id="s-0" class="level2">
<h2 class="anchored" data-anchor-id="s-0">0. 引子 (update 2020/12/21)</h2>
<p>直接上理论会有点难受，不妨先来点简单的计数题找找感觉？</p>
<section id="s-0.1" class="level3">
<h3 class="anchored" data-anchor-id="s-0.1">0.1 倒序同构序列计数</h3>
<blockquote class="blockquote">
<p>长度为 <img src="https://latex.codecogs.com/png.latex?n"> 的序列 <img src="https://latex.codecogs.com/png.latex?A"> 满足 <img src="https://latex.codecogs.com/png.latex?%5Cforall%201%20%5Cle%20i%20%5Cle%20n,%20%5C%201%20%5Cle%20a_i%20%5Cle%20m"> ，问有多少种不同的序列 <img src="https://latex.codecogs.com/png.latex?A"> ？</p>
<p>序列是无标号的，即正序和倒序记为一种方案。</p>
</blockquote>
<p>容易想到一种计数方式——若不考虑同构，显然有 <img src="https://latex.codecogs.com/png.latex?m%5En"> 种选择方案。对其中的非回文序列，可以直接计数然后除以 <img src="https://latex.codecogs.com/png.latex?2"> 去重。而回文序列正反都相同，不能直接除掉，因此对每个回文序列补上“倒序”的情况再除以 <img src="https://latex.codecogs.com/png.latex?2"> 即可。回文序列有 <img src="https://latex.codecogs.com/png.latex?m%5E%7B%5Clceil%20%5Cfrac%20n%202%20%5Crceil%7D"> 种，故最终答案为 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%202%20(m%5En%20+%20m%5E%7B%5Clceil%20%5Cfrac%20n%202%20%5Crceil%7D)"> 。</p>
<p>PS：现在我们可以对直链卤代烷进行计数了，答案为 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%201%202%20(4%5E2%20%5Ctimes%203%5E%7Bn-2%7D%20+%204%20%5Ctimes%203%5E%7B%5Clceil%20%5Cfrac%20n%202%20%5Crceil%20-1%7D)"> 。</p>
<p>PPS：你也许马上想到了环卤代烷计数，它正是后面Polya所解决的问题。</p>
<p>在这个小问题中，我们“补”上的回文序列正是Burnside思想的精髓。<strong>Burnside的目标便是为此类等价类计数问题找到一种通用的解决方案</strong>。欲知后事如何，请看下文分解。</p>
</section>
</section>
<section id="s-1" class="level2">
<h2 class="anchored" data-anchor-id="s-1">1. 群</h2>
<section id="s-1.1" class="level3">
<h3 class="anchored" data-anchor-id="s-1.1">1.1 群的概念</h3>
<p>群 <img src="https://latex.codecogs.com/png.latex?(S,%5Ccirc)"> 是一个元素集合 <img src="https://latex.codecogs.com/png.latex?S"> 和一种二元运算 <img src="https://latex.codecogs.com/png.latex?%5Ccirc"> 的合称，其满足以下性质。</p>
<section id="封闭性" class="level4">
<h4 class="anchored" data-anchor-id="封闭性">封闭性</h4>
<blockquote class="blockquote">
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20a,b%20%5Cin%20S"> ， <img src="https://latex.codecogs.com/png.latex?%5Cexists%20c%20%5Cin%20S"> 使得 <img src="https://latex.codecogs.com/png.latex?c%20=%20a%20%5Ccirc%20b"></p>
</blockquote>
</section>
<section id="结合律" class="level4">
<h4 class="anchored" data-anchor-id="结合律">结合律</h4>
<blockquote class="blockquote">
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20a,b,c%20%5Cin%20S"> ， <img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20(b%20%5Ccirc%20c)%20=%20(a%20%5Ccirc%20b)%20%5Ccirc%20c"></p>
</blockquote>
</section>
<section id="单位元" class="level4">
<h4 class="anchored" data-anchor-id="单位元">单位元</h4>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Cexists%20I%20%5Cin%20S"> ，使得对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20a%20%5Cin%20S"> ， <img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20I%20=%20I%20%5Ccirc%20a%20=%20a"></p>
</blockquote>
<p>根据定义，单位元具有唯一性，即一个群只有一个单位元。</p>
<p>证明：设 <img src="https://latex.codecogs.com/png.latex?a,b"> 都是 <img src="https://latex.codecogs.com/png.latex?S"> 的单位元，则 <img src="https://latex.codecogs.com/png.latex?a%20=%20a%20%5Ccirc%20b%20=%20b"> ，两者实质上相同。</p>
</section>
<section id="逆元" class="level4">
<h4 class="anchored" data-anchor-id="逆元">逆元</h4>
<blockquote class="blockquote">
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20a%20%5Cin%20S"> ， <img src="https://latex.codecogs.com/png.latex?%5Cexists%20a%5E%7B-1%7D%20%5Cin%20S"> ，使得 <img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20a%5E%7B-1%7D%20=%20a%5E%7B-1%7D%20%5Ccirc%20a%20=%20I"></p>
</blockquote>
<p>根据定义，逆元具有唯一性，即每个元素有且仅有一个逆元。</p>
<p>证明：设 <img src="https://latex.codecogs.com/png.latex?a"> 有两个逆元 <img src="https://latex.codecogs.com/png.latex?b,c"> ，则 <img src="https://latex.codecogs.com/png.latex?b%20=%20b%20%5Ccirc%20I%20%20=%20b%20%5Ccirc%20(a%20%5Ccirc%20c)%20=%20(b%20%5Ccirc%20a)%20%5Ccirc%20c%20=%20I%20%5Ccirc%20c%20%20=%20c"> ，两者实质相同。</p>
<p>这也同时说明了不存在两个元素 <img src="https://latex.codecogs.com/png.latex?a,%20b"> 的逆元是同一个元素 <img src="https://latex.codecogs.com/png.latex?c">，因为 <img src="https://latex.codecogs.com/png.latex?c"> 只有唯一一个逆元。</p>
<p>即逆元是一一对应的。</p>
</section>
</section>
<section id="s-1.2" class="level3">
<h3 class="anchored" data-anchor-id="s-1.2">1.2 更抽象的群</h3>
<p>我们更进一步，将 <img src="https://latex.codecogs.com/png.latex?S"> 中的每一个元素视为一个函数， 默认 <img src="https://latex.codecogs.com/png.latex?%5Ccirc"> 代表函数的复合，即 <img src="https://latex.codecogs.com/png.latex?(f%20%5Ccirc%20g)%20(x)%20=%20f(g(x))">。所以现在一个群可以只用一个函数集合 <img src="https://latex.codecogs.com/png.latex?S"> 来表示。</p>
<p>例如，记 <img src="https://latex.codecogs.com/png.latex?r_%5Ctheta%20(x)"> 表示将 <img src="https://latex.codecogs.com/png.latex?x"> 旋转 <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> 度，那么 <img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7B%20r_%7B0%5E%5Ccirc%7D,%20r_%7B90%5E%5Ccirc%7D,r_%7B180%5E%5Ccirc%7D,r_%7B270%5E%5Ccirc%7D%5C%7D"> 就是一个群。</p>
<p>证明一下，显然有封闭性和结合律。</p>
<p>单位元是 <img src="https://latex.codecogs.com/png.latex?r_%7B0%5E%5Ccirc%7D"> ，因为 <img src="https://latex.codecogs.com/png.latex?r_%7B0%5E%5Ccirc%7D%20(r_%5Ctheta(x))%20=%20r_%7B%5Ctheta%5E%5Ccirc%7D%20(r_0%20(x))%20=%20r_%5Ctheta(x)"></p>
<p><img src="https://latex.codecogs.com/png.latex?S"> 中元素 <img src="https://latex.codecogs.com/png.latex?r_%5Ctheta"> 的逆元便是 <img src="https://latex.codecogs.com/png.latex?r_%7B360%5E%5Ccirc%20-%20%5Ctheta%7D"> ，因为他们两个卷起来就是 <img src="https://latex.codecogs.com/png.latex?I%20=%20r_%7B0%5E%7B%5Ccirc%7D%7D"></p>
</section>
<section id="s-1.3" class="level3">
<h3 class="anchored" data-anchor-id="s-1.3">1.3 提示</h3>
<p>由于群满足封闭性，所以我们在寻找群的时候一定要“找完”所有可能的状态，例如 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20r_%7B0%5E%5Ccirc%7D,%20r_%7B90%5E%5Ccirc%7D%5C%7D"> 就不是一个群。</p>
</section>
</section>
<section id="s-2" class="level2">
<h2 class="anchored" data-anchor-id="s-2">2. Burnside</h2>
<p>记号说明：通常使用 <img src="https://latex.codecogs.com/png.latex?a,b,c,d%20%5Cin%20C"> 表示计数对象，而 <img src="https://latex.codecogs.com/png.latex?f,g,h%20%5Cin%20G"> 表示变换。</p>
<section id="s-2.1" class="level3">
<h3 class="anchored" data-anchor-id="s-2.1">2.1 等价</h3>
<blockquote class="blockquote">
<p>给定一个作用在计数集合 <img src="https://latex.codecogs.com/png.latex?C"> 上的变换集合 <img src="https://latex.codecogs.com/png.latex?G">，若 <img src="https://latex.codecogs.com/png.latex?C"> 中计数对象 <img src="https://latex.codecogs.com/png.latex?d"> 可以由计数对象 <img src="https://latex.codecogs.com/png.latex?c"> 通过 <img src="https://latex.codecogs.com/png.latex?G"> 中变换得到，即 <img src="https://latex.codecogs.com/png.latex?%5Cexists%20f%20%5Cin%20G"> 使得 <img src="https://latex.codecogs.com/png.latex?d%20=%20c%20%5Ccirc%20f">，我们便称 <img src="https://latex.codecogs.com/png.latex?c"> 与 <img src="https://latex.codecogs.com/png.latex?d"> 等价，记作 <img src="https://latex.codecogs.com/png.latex?c%20%5Csim%20d"> 。</p>
</blockquote>
<p><img src="https://latex.codecogs.com/png.latex?G"> 其实就是个函数集合，其中的函数都接受 <img src="https://latex.codecogs.com/png.latex?C"> 中元素作为参数，输出也是 <img src="https://latex.codecogs.com/png.latex?C"> 中元素。</p>
<p>类似的我们记 <img src="https://latex.codecogs.com/png.latex?f(c)"> 为 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f"> ，表示对计数对象 <img src="https://latex.codecogs.com/png.latex?c"> 做变换 <img src="https://latex.codecogs.com/png.latex?f"> 。</p>
<p>我们同样可以对一个函数做变换，即 <img src="https://latex.codecogs.com/png.latex?f%20%5Ccirc%20g"> 是允许的。请参考上文更抽象的群 。</p>
<p>在Burnside中，<strong>我们要求 <img src="https://latex.codecogs.com/png.latex?G"> 是一个群</strong>。这样我们可以导出一些关于等价的性质。</p>
<section id="自反性" class="level4">
<h4 class="anchored" data-anchor-id="自反性">自反性</h4>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?a%20%5Csim%20a"></p>
</blockquote>
<p>因为 <img src="https://latex.codecogs.com/png.latex?G"> 是群，故有单位元 <img src="https://latex.codecogs.com/png.latex?I%20%5Cin%20G"> ， <img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20I%20=%20a"> ，满足等价定义。</p>
</section>
<section id="对称性" class="level4">
<h4 class="anchored" data-anchor-id="对称性">对称性</h4>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?a%20%5Csim%20b%20%5Ciff%20b%20%5Csim%20a"></p>
</blockquote>
<p>设 <img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20f%20=%20b"> ，因为 <img src="https://latex.codecogs.com/png.latex?G"> 是群，故存在 <img src="https://latex.codecogs.com/png.latex?f%5E%7B-1%7D"> 使得 <img src="https://latex.codecogs.com/png.latex?b%20%5Ccirc%20f%5E%7B-1%7D%20=%20a"> ，满足等价定义。同理反向再证一次即可得出充分完全性。</p>
</section>
<section id="传递性" class="level4">
<h4 class="anchored" data-anchor-id="传递性">传递性</h4>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?a%20%5Csim%20b%20,%20b%20%5Csim%20c%20%5CRightarrow%20a%20%5Csim%20c"></p>
</blockquote>
<p>设 <img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20f%20%20=%20b,%20b%20%5Ccirc%20g%20=%20c">，因为 <img src="https://latex.codecogs.com/png.latex?G"> 是群，所以 <img src="https://latex.codecogs.com/png.latex?f%20%5Ccirc%20g%20%5Cin%20G">（封闭性），<img src="https://latex.codecogs.com/png.latex?a%20%5Ccirc%20(f%20%5Ccirc%20g)%20=%20(a%20%5Ccirc%20f)%20%5Ccirc%20g%20=%20b%20%5Ccirc%20g%20=%20c">，满足等价定义。</p>
</section>
</section>
<section id="s-2.2" class="level3">
<h3 class="anchored" data-anchor-id="s-2.2">2.2 等价类及等价类计数</h3>
<p>等价类即所有等价的计数元素的集合。计数集合 <img src="https://latex.codecogs.com/png.latex?C"> 由许多个等价类构成，好比连通块。 统计 <img src="https://latex.codecogs.com/png.latex?C"> 中有多少个等价类，就是等价类计数。</p>
<p>如何快速的等价类计数，便是我们接下来所研究的。</p>
</section>
<section id="s-2.3" class="level3">
<h3 class="anchored" data-anchor-id="s-2.3">2.3 弱化版</h3>
<p>不妨先来研究一个弱化版本，这可以帮助我们捋清思路。</p>
<section id="s-2.3.1" class="level4">
<h4 class="anchored" data-anchor-id="s-2.3.1">2.3.1 引理</h4>
<blockquote class="blockquote">
<p>若对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c%20%5Cin%20C,f%20%5Cin%20G%20%5Cquad%20(f%20%5Cnot=%20I)"> ， <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20%5Cnot=%20c"> 都成立，那么对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c%20%5Cin%20C,%20f%20%5Cin%20G,g%20%5Cin%20G%20%5Cquad%20(f%20%5Cnot=%20g)"> ，都有 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20%5Cnot=%20c%20%5Ccirc%20g"> ，即与 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c"> 等价的元素有且仅有 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 个。</p>
</blockquote>
<p>利用反证法。假设 <img src="https://latex.codecogs.com/png.latex?%5Cexists%20c,f,g"> 使得 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20=%20c%20%5Ccirc%20g"> ，那么有 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20%5Ccirc%20g%5E%7B-1%7D%20=%20c"> ，即 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20(f%20%5Ccirc%20g%5E%7B-1%7D)%20=%20c"> （同时因为 <img src="https://latex.codecogs.com/png.latex?f%20%5Cnot=%20g"> ，所以 <img src="https://latex.codecogs.com/png.latex?f%20%5Ccirc%20g%5E%7B-1%7D%20%5Cnot=%20I"> ），于是与假设产生矛盾，故引理成立。</p>
<p>对 <img src="https://latex.codecogs.com/png.latex?c"> 做变换得到的元素两两不同，共有 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 种变换，故有且仅有 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 个元素与 <img src="https://latex.codecogs.com/png.latex?c"> 等价。</p>
</section>
<section id="s-2.3.2" class="level4">
<h4 class="anchored" data-anchor-id="s-2.3.2">2.3.2 弱化版Burnside</h4>
<blockquote class="blockquote">
<p>若对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c%20%5Cin%20C,f%20%5Cin%20G%20%5Cquad%20(f%20%5Cnot=%20I)"> ， <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20%5Cnot=%20c"> 都成立，那么 <img src="https://latex.codecogs.com/png.latex?%0A%E7%AD%89%E4%BB%B7%E7%B1%BB%E8%AE%A1%E6%95%B0%20=%20%5Cfrac%7B%7CC%7C%7D%7B%7CG%7C%7D%0A"></p>
</blockquote>
<p>这是肉眼可得的结论。由引理，对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c"> ，都有且仅有 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 个互不相同的元素与其等价。由于等价的传递性，这 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 个元素是封闭的，实质上形成了许多个大小为 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 的等价类。那么等价类个数自然就是总计数元素个数 <img src="https://latex.codecogs.com/png.latex?%7CC%7C"> 除以每个等价类的大小 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 了。</p>
</section>
</section>
<section id="s-2.4" class="level3">
<h3 class="anchored" data-anchor-id="s-2.4">2.4 标准版</h3>
<p>弱化版的关键之处在于引理， <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20%5Cnot=%20c"> 让我们知道每个 <img src="https://latex.codecogs.com/png.latex?c"> 有 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 个互不相同的元素与其等价。我们将这个条件和这个引理做一些“推广”。</p>
<section id="s-2.4.1" class="level4">
<h4 class="anchored" data-anchor-id="s-2.4.1">2.4.1 稳定核 &amp; 不动点</h4>
<blockquote class="blockquote">
<p>稳定核 <img src="https://latex.codecogs.com/png.latex?G(c)"> ：对于计数对象 <img src="https://latex.codecogs.com/png.latex?c"> ，使得 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20=%20c"> 的所有变换 <img src="https://latex.codecogs.com/png.latex?f"> 的集合，即 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20f%20%5Cin%20G%20%7C%20c%20%5Ccirc%20f%20=%20c%20%5C%7D"></p>
<p>不动点 <img src="https://latex.codecogs.com/png.latex?C(f)"> ：对于变换 <img src="https://latex.codecogs.com/png.latex?f"> ，使得 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20=%20c"> 的所有计数对象 <img src="https://latex.codecogs.com/png.latex?c"> 的集合，即 <img src="https://latex.codecogs.com/png.latex?%5C%7B%20c%20%5Cin%20C%20%7C%20c%20%5Ccirc%20f%20=%20c%20%5C%7D"></p>
</blockquote>
<p>注意单个字母 <img src="https://latex.codecogs.com/png.latex?G"> 代表整个变换集合；而 <img src="https://latex.codecogs.com/png.latex?G(c)"> 是根据计数元素 <img src="https://latex.codecogs.com/png.latex?c"> 生成的一个被 <img src="https://latex.codecogs.com/png.latex?G"> 包含的变换集合；</p>
<p>注意单个字母 <img src="https://latex.codecogs.com/png.latex?C"> 代表整个计数集合；而 <img src="https://latex.codecogs.com/png.latex?C(f)"> 是根据变换 <img src="https://latex.codecogs.com/png.latex?f"> 生成的一个被 <img src="https://latex.codecogs.com/png.latex?C"> 包含的计数集合。</p>
</section>
<section id="s-2.4.2" class="level4">
<h4 class="anchored" data-anchor-id="s-2.4.2">2.4.2 引理1</h4>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bc%20%5Cin%20C%7D%20%7CG(c)%7C%20=%20%5Csum_%7Bf%20%5Cin%20G%7D%20%7CC(f)%7C%0A"></p>
</blockquote>
<p>证明： <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csum_%7Bc%20%5Cin%20C%7D%20%7CG(c)%7C%20&amp;=%20%5Csum_%7Bc%20%5Cin%20C%7D%20%5Csum_%7Bf%20%5Cin%20G%7D%20%5Bc%20%5Ccirc%20f%20=%20c%5D%20%5C%5C%0A&amp;=%20%5Csum_%7Bf%20%5Cin%20G%7D%20%5Csum_%7Bc%20%5Cin%20C%7D%20%5Bc%20%5Ccirc%20f%20=%20c%5D%20%5C%5C%0A&amp;=%20%5Csum_%7Bf%20%5Cin%20G%7D%20%7CC(f)%7C%0A%5Cend%7Baligned%7D%0A"></p>
<p>其实质是更换枚举方式。</p>
</section>
<section id="s-2.4.3" class="level4">
<h4 class="anchored" data-anchor-id="s-2.4.3">2.4.3 引理2</h4>
<blockquote class="blockquote">
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c"> ， <img src="https://latex.codecogs.com/png.latex?G(c)"> 是个群。</p>
</blockquote>
<p>分别证明群的四个性质即可。</p>
<section id="封闭性-1" class="level5">
<h5 class="anchored" data-anchor-id="封闭性-1">封闭性</h5>
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20f,g%20%5Cin%20G(c)"> ， <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20(f%20%5Ccirc%20g)%20=%20(c%20%5Ccirc%20f)%20%5Ccirc%20g%20=%20c%20%5Ccirc%20g%20=%20c"> ，所以 <img src="https://latex.codecogs.com/png.latex?f%20%5Ccirc%20g%20%5Cin%20G(c)"> 。封闭性得证。</p>
</section>
<section id="结合律-1" class="level5">
<h5 class="anchored" data-anchor-id="结合律-1">结合律</h5>
<p><img src="https://latex.codecogs.com/png.latex?G(c)%20%5Csubseteq%20G"> ，结合律直接由 <img src="https://latex.codecogs.com/png.latex?G"> 给出。</p>
</section>
<section id="单位元-1" class="level5">
<h5 class="anchored" data-anchor-id="单位元-1">单位元</h5>
<p><img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20I%20=%20c"> ，所以 <img src="https://latex.codecogs.com/png.latex?I%20%5Cin%20G(c)"> 。（这里的 <img src="https://latex.codecogs.com/png.latex?I"> 代指 <img src="https://latex.codecogs.com/png.latex?G"> 的单位元）</p>
</section>
<section id="逆元-1" class="level5">
<h5 class="anchored" data-anchor-id="逆元-1">逆元</h5>
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20f%20%5Cin%20G(c)"> ， <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%5E%7B-1%7D%20=%20(c%20%5Ccirc%20f)%20%5Ccirc%20f%5E%7B-1%7D%20=%20c%20%5Ccirc%20(f%20%5Ccirc%20f%5E%7B-1%7D)%20=%20c"> ，所以 <img src="https://latex.codecogs.com/png.latex?f%5E%7B-1%7D%20%5Cin%20G(c)"> 。</p>
</section>
<section id="extra-update-20200328" class="level5">
<h5 class="anchored" data-anchor-id="extra-update-20200328">Extra (update 2020/03/28)</h5>
<p>有个群论定理可以直接证明上述结论：</p>
<blockquote class="blockquote">
<p>有限群的非空封闭子集都是子群。</p>
</blockquote>
<p>另外，在后面我们将会发现 <img src="https://latex.codecogs.com/png.latex?%7CG(c)%7C"> 实际上是 <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> 的约数，这反应了拉格朗日定理：</p>
<blockquote class="blockquote">
<p>一个有限群 <img src="https://latex.codecogs.com/png.latex?S"> 的子群的大小是 <img src="https://latex.codecogs.com/png.latex?%7CS%7C"> 的约数。</p>
</blockquote>
<p>有趣的是，拉格朗日定理的证明实际上和下文引理3的证明几乎一模一样。</p>
<p>这两个定理在这里不做详细讨论，有兴趣的同学可以左转算法导论和<a href="https://blog.csdn.net/qq_25847123/article/details/100318620">这里</a>（拉格朗日定理证明）</p>
</section>
</section>
<section id="s-2.4.4" class="level4">
<h4 class="anchored" data-anchor-id="s-2.4.4">2.4.4 引理3</h4>
<blockquote class="blockquote">
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20c"> ，记 <img src="https://latex.codecogs.com/png.latex?S(c)"> 为与 <img src="https://latex.codecogs.com/png.latex?c"> 等价的计数元素的集合，有 <img src="https://latex.codecogs.com/png.latex?%0A%7CS(c)%7C%20=%20%5Cfrac%7B%7CG%7C%7D%7B%7CG(c)%7C%7D%0A"></p>
</blockquote>
<p>这个引理与弱化版引理是对应关系。请对比起来理解。</p>
<p>我们的证明思路是：对于某个计数元素 <img src="https://latex.codecogs.com/png.latex?c"> ，求出 对于某个确定的变换 <img src="https://latex.codecogs.com/png.latex?f"> ，有多少个变换 <img src="https://latex.codecogs.com/png.latex?g"> 与其作用效果相同，即 <img src="https://latex.codecogs.com/png.latex?c%20%5Ccirc%20f%20=%20c%20%5Ccirc%20g"> 。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac%20%5Ccirc%20f%20=%20c%20%5Ccirc%20g%20%5Ciff%20c%20%5Ccirc%20f%20%5Ccirc%20g%5E%7B-1%7D%20=%20c%20%5Ciff%20(f%20%5Ccirc%20g%5E%7B-1%7D)%20%5Cin%20G(c)%0A"></p>
<p>即 <img src="https://latex.codecogs.com/png.latex?f%20,g"> 对 <img src="https://latex.codecogs.com/png.latex?c"> 的作用效果相同 等价于 <img src="https://latex.codecogs.com/png.latex?f%20%5Ccirc%20g%5E%7B-1%7D"> 在 <img src="https://latex.codecogs.com/png.latex?c"> 的稳定核内。</p>
<p>于是对于一个变换 <img src="https://latex.codecogs.com/png.latex?h%20%5Cin%20G(c)"> ，根据群的基本性质，存在唯一的 <img src="https://latex.codecogs.com/png.latex?g%5E%7B-1%7D%20=%20f%5E%7B-1%7D%20%5Ccirc%20h"> ，使得 <img src="https://latex.codecogs.com/png.latex?f%20%5Ccirc%20g%5E%7B-1%7D%20=%20h"> 。变换 <img src="https://latex.codecogs.com/png.latex?h%20%5Cin%20G(c)"> ，所以有 <img src="https://latex.codecogs.com/png.latex?%7CG(c)%7C"> 种取值； <img src="https://latex.codecogs.com/png.latex?f"> 是确定的，根据逆元唯一性， <img src="https://latex.codecogs.com/png.latex?f%5E%7B-1%7D"> 也是确定的；故 <img src="https://latex.codecogs.com/png.latex?g%5E%7B-1%7D"> 有 <img src="https://latex.codecogs.com/png.latex?%7CG(c)%7C"> 种取值。又由于逆元的一一对应性， <img src="https://latex.codecogs.com/png.latex?g"> 有 <img src="https://latex.codecogs.com/png.latex?%7CG(c)%7C"> 种取值。</p>
<p>即对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20f"> ，都有且仅有 <img src="https://latex.codecogs.com/png.latex?%7CG(c)%7C"> 个 <img src="https://latex.codecogs.com/png.latex?g"> 与其作用效果相同。</p>
<p>这说明了什么？“作用效果相同”也是一种类似等价的关系，容易证明其具有传递性，于是他们是封闭的。作用效果相同的变换实质上形成 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%7CG%7C%7D%7B%7CG(c)%7C%7D"> 个大小为 <img src="https://latex.codecogs.com/png.latex?%7CG(c)%7C"> 的两两相连的连通块或者说“作用效果相同等价类”，合起来构成了整个 <img src="https://latex.codecogs.com/png.latex?G"> 。我们便知道了 <img src="https://latex.codecogs.com/png.latex?c"> 通过变换可以变出 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%7CG%7C%7D%7B%7CG(c)%7C%7D"> 个不同的计数元素，即与 <img src="https://latex.codecogs.com/png.latex?c"> 等价的元素有 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%7CG%7C%7D%7B%7CG(c)%7C%7D"> 个，引理3证毕。</p>
</section>
<section id="s-2.4.5" class="level4">
<h4 class="anchored" data-anchor-id="s-2.4.5">2.4.5 Burnside</h4>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%E7%AD%89%E4%BB%B7%E7%B1%BB%E8%AE%A1%E6%95%B0%20=%20%5Cfrac%7B1%7D%7B%7CG%7C%7D%5Csum_%7Bf%20%5Cin%20G%7D%20%7CC(f)%7C%0A"></p>
</blockquote>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B1%7D%7B%7CG%7C%7D%5Csum_%7Bf%20%5Cin%20G%7D%20%7CC(f)%7C%20&amp;=%20%5Cfrac%7B1%7D%7B%7CG%7C%7D%5Csum_%7Bc%20%5Cin%20C%7D%20%7CG(c)%7C%20%20%20%20%5Cquad%20&amp;%5Ctext%7B...%E5%BC%95%E7%90%861%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7B%7CG%7C%7D%5Csum_%7Bc%20%5Cin%20C%7D%20%5Cfrac%7B%7CG%7C%7D%7B%7CS(c)%7C%7D%20%5Cquad%20&amp;%5Ctext%7B...%E5%BC%95%E7%90%863%7D%20%5C%5C%0A&amp;=%20%5Csum_%7Bc%20%5Cin%20C%7D%20%5Cfrac%7B1%7D%7BS(c)%7D%20%5C%5C%0A&amp;=%20%E7%AD%89%E4%BB%B7%E7%B1%BB%E8%AE%A1%E6%95%B0%0A%5Cend%7Baligned%7D%0A"></p>
<p>倒数第二个式子，每个元素贡献 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7BS(c)%7D"> ，合起来便是等价类计数。这便是等价类计数的本质。</p>
</section>
</section>
<section id="s-2.5" class="level3">
<h3 class="anchored" data-anchor-id="s-2.5">2.5 Burnside的本质</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20200321-burnside/burnside.jpg" class="img-fluid figure-img"></p>
<figcaption>来自zkx学长的课件《Polya计数.pptx》</figcaption>
</figure>
</div>
<blockquote class="blockquote">
<p>直接除以4不行，因为前四种找不到4个等价的情况</p>
<p>所以强行把它们补成4个就行了。。。</p>
<p>Burnside就是“强行补”的过程</p>
<p>——zkx</p>
</blockquote>
<p>Burnside的精髓就在于此。</p>
<p>Burnside弱化版，实际上是省掉了强行补的部分，使所有有效部分都在 <img src="https://latex.codecogs.com/png.latex?C(I)"> 。</p>
<blockquote class="blockquote">
<p>可以发现“群”是Burnside的唯一约束</p>
<p>这个约束几乎就是没有约束。。。</p>
<p>所以Burnside是非常通用的等价类计数法</p>
<p>——zkx</p>
</blockquote>
</section>
</section>
<section id="s-3" class="level2">
<h2 class="anchored" data-anchor-id="s-3">3. 置换群</h2>
<p>（Burnside的内容已经结束，这里开始是Polya了）</p>
<section id="s-3.1" class="level3">
<h3 class="anchored" data-anchor-id="s-3.1">3.1 置换</h3>
<p>一个置换长这样： <img src="https://latex.codecogs.com/png.latex?%0A(%5Cbegin%7Baligned%7D%0A1&amp;,2,3,...,n%20%5C%5C%0Aa_1&amp;,a_2,a_3,...,a_n%0A%5Cend%7Baligned%7D)%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?a_1,a_2,a_3,...,a_n"> 是一个 <img src="https://latex.codecogs.com/png.latex?n"> 排列。置换是一个接受序列，输出序列的函数，它表示对每一个 <img src="https://latex.codecogs.com/png.latex?i"> ，将原序列第 <img src="https://latex.codecogs.com/png.latex?i"> 个数放到第 <img src="https://latex.codecogs.com/png.latex?a_i"> 个位置上。这种括号是置换的表示方式，表示多个映射关系。</p>
</section>
<section id="s-3.2" class="level3">
<h3 class="anchored" data-anchor-id="s-3.2">3.2 移位置换</h3>
<p>一个普通的移位置换长这样： <img src="https://latex.codecogs.com/png.latex?%0A%5Ctau_n%20=%0A(%5Cbegin%7Baligned%7D%0A1,2,3,...,n&amp;-1,n%20%5C%5C%0A2,3,4,...,&amp;n,1%0A%5Cend%7Baligned%7D)%0A"></p>
<p>即全员右移 <img src="https://latex.codecogs.com/png.latex?1"> 位。很自然的可以拓展到 <img src="https://latex.codecogs.com/png.latex?k"> 位移位置换： <img src="https://latex.codecogs.com/png.latex?%0A%5Ctau_n%5Ek%20=%0A(%5Cbegin%7Baligned%7D%0A1,2,3,...&amp;,n-1,n%20%5C%5C%0Ak,k+1,...,n&amp;,1,...,k-1%0A%5Cend%7Baligned%7D)%0A"></p>
<p>容易发现 <img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5Ek"> 是 <img src="https://latex.codecogs.com/png.latex?k"> 个 <img src="https://latex.codecogs.com/png.latex?%5Ctau_n"> 的复合，所以我们写成乘方的形式。</p>
</section>
<section id="s-3.3" class="level3">
<h3 class="anchored" data-anchor-id="s-3.3">3.3 移位置换图</h3>
<p>移位置换 <img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5Ek"> 所形成的图：考虑将 <img src="https://latex.codecogs.com/png.latex?n"> 个点排成一个圆圈， <img src="https://latex.codecogs.com/png.latex?1"> 连 <img src="https://latex.codecogs.com/png.latex?k"> ， <img src="https://latex.codecogs.com/png.latex?2"> 连 <img src="https://latex.codecogs.com/png.latex?k+1"> ，…，<img src="https://latex.codecogs.com/png.latex?n"> 连 <img src="https://latex.codecogs.com/png.latex?k-1"> 。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.sun123zxy.top/posts/20200321-burnside/tau62.png" class="img-fluid figure-img"></p>
<figcaption><img src="https://latex.codecogs.com/png.latex?tau_6%5E2">移位置换图</figcaption>
</figure>
</div>
<p>如图便是 <img src="https://latex.codecogs.com/png.latex?%5Ctau_6%5E2"> 形成的移位置换图，共有两个环。</p>
</section>
<section id="s-3.4" class="level3">
<h3 class="anchored" data-anchor-id="s-3.4">3.4 移位置换环个数定理</h3>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5Ek"> 移位置换图中环的个数为 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(k,n)"> 。</p>
</blockquote>
<p>证明的思路同样是已经使用多次的：求出对于一个数 <img src="https://latex.codecogs.com/png.latex?a"> ，有多少个数 <img src="https://latex.codecogs.com/png.latex?b"> 与它在同一个环内。</p>
<p>对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20a,b"> ， <img src="https://latex.codecogs.com/png.latex?a,b"> 在同一个环内的条件为 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Aa%20%5Cequiv%20b%20+%20ik%20%5Cpmod%20n%20&amp;%5Ciff%20%5Cexists%20i,j%20%5Cquad%20s.t.%20%5Cquad%20a%20=%20b%20+%20ik%20+%20jn%20%5C%5C%0A&amp;%5Ciff%20%5Cexists%20i,j%20%5Cquad%20s.t.%20%5Cquad%20ik%20+%20jn%20=%20a%20-%20b%20%5C%5C%0A&amp;%5Ciff%20%5Cgcd(k,n)%20%7C%20(a-b)%20%5Cquad%20%5Ctext%7B...%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>最后两个式子之间的转化运用了二元整数解不定方程的有解条件，即裴蜀定理。</p>
<p>那么这样一来，对于 <img src="https://latex.codecogs.com/png.latex?%5Cforall%20a"> ，显然有且仅有 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bn%7D%7B%5Cgcd(k,n)%7D"> 个数与它在同一环内，故共有 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(k,n)"> 个环。（“在同一环内”传递性导出的封闭性，这个方法在上文已经多次使用到）</p>
</section>
</section>
<section id="s-4" class="level2">
<h2 class="anchored" data-anchor-id="s-4">4. Polya</h2>
<section id="s-4.1" class="level3">
<h3 class="anchored" data-anchor-id="s-4.1">4.1 概念</h3>
<p>Polya是Burnside在环同构计数问题上的一个导出结论，比朴素的Burnside更加优秀。环同构的变换群 <img src="https://latex.codecogs.com/png.latex?G"> 是一个移位置换群，即 <img src="https://latex.codecogs.com/png.latex?%0AG%20=%20%5C%7B%20%5Ctau_n%5Ek%20%5C%20%7C%20%5C%20k%20%5Cin%20%5B0,n),%20k%20%5Cin%20Z%20%5C%7D%0A"></p>
<p>即在平面内旋转环能够变得相同的方案算作一种。</p>
<p>显然移位置换群是一个群 <del>废话</del>，证明很简单，同样是证明群的四个性质，这里不再赘述。</p>
<p>最简单的一类问题便是——<a href="https://www.luogu.com.cn/problem/P4980">洛谷P4980 Polya定理</a></p>
<blockquote class="blockquote">
<p>给定一个 <img src="https://latex.codecogs.com/png.latex?n"> 个点， <img src="https://latex.codecogs.com/png.latex?n"> 条边的环，有 <img src="https://latex.codecogs.com/png.latex?m"> 种颜色，给每个顶点染色，问有多少种本质不同的染色方案，答案对 <img src="https://latex.codecogs.com/png.latex?10%5E9+7"> 取模。</p>
<p>本质不同定义为：只需要不能通过旋转与别的染色方案相同。</p>
</blockquote>
</section>
<section id="s-4.2" class="level3">
<h3 class="anchored" data-anchor-id="s-4.2">4.2 推导</h3>
<p>有了前面那么多的铺垫，大名鼎鼎的Polya定理现在已经可以自己动手推出来了！</p>
<p>先写出Burnside引理，并套入移位置换 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%E7%AD%89%E4%BB%B7%E7%B1%BB%E8%AE%A1%E6%95%B0%20&amp;=%20%5Cfrac%7B1%7D%7B%7CG%7C%7D%5Csum_%7Bf%20%5Cin%20G%7D%20%7CC(f)%7C%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20%7CC(%5Ctau_n%5Ei)%7C%0A%5Cend%7Baligned%7D%0A"></p>
<p>注： <img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5En%20=%20%5Ctau_n%5E0"> ，上面从 <img src="https://latex.codecogs.com/png.latex?1"> 到 <img src="https://latex.codecogs.com/png.latex?n"> 的枚举是对的</p>
<p><img src="https://latex.codecogs.com/png.latex?%7CC(%5Ctau_n%5Ei)%7C"> 是什么？</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5Ei"> 的不动点的个数，即要求 <img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5Ei"> 移位置换图里同一环上点颜色相同的方案数。（为了做置换后看上去和原来一样）</p>
<p>根据移位置换环个数定理， <img src="https://latex.codecogs.com/png.latex?%5Ctau_n%5Ei"> 有 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(n,i)"> 个环。有 <img src="https://latex.codecogs.com/png.latex?m"> 种颜色给 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(n,i)"> 个环去染，显然方案数为 <img src="https://latex.codecogs.com/png.latex?m%5E%7B%5Cgcd(n,i)%7D"> 。我们不局限于本题推而广之，方案数是一个关于环个数 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(n,i)"> 的函数 <img src="https://latex.codecogs.com/png.latex?f(%5Cgcd(n,i))"> 。（也可以是关于环大小 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bn%7D%7B%5Cgcd(n,i)%7D"> 的函数，反正最重要的参数是 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(n,i)"> ）</p>
<p>带入原式 <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20f(%5Cgcd(n,i))%0A"></p>
<p>诶！这个式子里面有 <img src="https://latex.codecogs.com/png.latex?%5Cgcd"> ！</p>
<p>不用抑制住冲动，我们按照常见的莫反题目套路来。 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%E7%AD%89%E4%BB%B7%E7%B1%BB%E8%AE%A1%E6%95%B0%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20f(%5Cgcd(n,i))%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bd%7Cn%7D%20f(d)%20%5Csum_%7Bi=1%7D%5En%20%5B%5Cgcd(n,i)=d%5D%20%5Cquad%20&amp;%5Ctext%7B...%E6%8A%8Agcd%E6%8F%90%E5%87%BA%E6%9D%A5%E6%9E%9A%E4%B8%BE%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bd%7Cn%7D%20f(d)%20%5Csum_%7Bi=1%7D%5E%7B%5Cfrac%7Bn%7D%7Bd%7D%7D%20%5B%5Cgcd(%5Cfrac%7Bn%7D%7Bd%7D,i)=1%5D%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bd%7Cn%7D%20f(d)%20%5Cvarphi(%5Cfrac%7Bn%7D%7Bd%7D)%20%5Cquad%20&amp;%5Ctext%7B...%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>好恭喜你可以在 <img src="https://latex.codecogs.com/png.latex?O(%5Csqrt%20n)"> 的优秀时间复杂度里求得答案了！</p>
<p>2022/06/25 update: 需要指出的是，Polya 定理并不只适用于移位置换群。请读者自行思考，Polya 定理是否适用于任意置换群。（提示：任意置换都可以表示为若干个轮换的复合）</p>
</section>
<section id="s-4.3" class="level3">
<h3 class="anchored" data-anchor-id="s-4.3">4.3 实现</h3>
<p>提示一下实现上的一些细节。</p>
<p>快速幂作为基本技巧就不提了；</p>
<p>欧拉函数直接质因数分解求即可。这里会遇到一个小问题：外面一层枚举因数，里面一层分解质因数，这不 <img src="https://latex.codecogs.com/png.latex?O(%5Csum_%7Bd%7Cn%7D%20%5Csqrt%20d)"> 了吗？</p>
<p>用一些<a href="../../posts/20230418-complexity/#exm-sigmazub">黑科技</a>可以证明一个比 <img src="https://latex.codecogs.com/png.latex?O(n)"> 更紧的上界是 <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B%5Cfrac%203%204%7D)"> ，实际上则有香港记者的速度（洛谷 <img src="https://latex.codecogs.com/png.latex?n=10%5E9"> ， <img src="https://latex.codecogs.com/png.latex?10%5E3"> 组数据可以随便跑过）</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">洛谷P4980 Polya定理</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">sun123zxy</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">朴素写法</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">洛谷共2.08s</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">2019/12/24</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdio&gt;</span></span>
<span id="cb1-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstring&gt;</span></span>
<span id="cb1-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb1-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ctime&gt;</span></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdlib&gt;</span></span>
<span id="cb1-14"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;algorithm&gt;</span></span>
<span id="cb1-15"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;queue&gt;</span></span>
<span id="cb1-16"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb1-17"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;map&gt;</span></span>
<span id="cb1-18"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;set&gt;</span></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">ll Rd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-22">    ll ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> ll MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1E9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-28">ll QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-29">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">    ll ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--;</span></span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-36">ll Inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);}</span></span>
<span id="cb1-37"></span>
<span id="cb1-38">ll Phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-39">    ll t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">    ll ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++){</span></span>
<span id="cb1-42">        ll c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span>QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)-</span>QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)+</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-49"></span>
<span id="cb1-50">ll N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-51">ll Polya<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*</span>Phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-54"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> Solve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-55">    ll Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++){</span></span>
<span id="cb1-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-58">            Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>Polya<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-59">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>Polya<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-60">            Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-61">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-63">    Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-64">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%lld\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-65"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-66"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-67">    ll T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Rd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--){</span></span>
<span id="cb1-68">        scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%lld</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,&amp;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-69">        Solve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-70">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-72"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>不过当然有真正 <img src="https://latex.codecogs.com/png.latex?O(%5Csqrt%20n)"> 的写法。只需在最外层分解质因数，然后DFS的去枚举因数，这样就不用每次去分解 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bn%7D%7Bd%7D"> 啦！于是这种写法就快更多了。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">洛谷P4980 Polya定理</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">sun123zxy</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">更优写法</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">洛谷共125ms</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">2019/12/24</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdio&gt;</span></span>
<span id="cb2-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstring&gt;</span></span>
<span id="cb2-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb2-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ctime&gt;</span></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdlib&gt;</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;algorithm&gt;</span></span>
<span id="cb2-15"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;queue&gt;</span></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb2-17"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;map&gt;</span></span>
<span id="cb2-18"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;set&gt;</span></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> ll<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> Rd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-22">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> ll MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1E9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-28">ll QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> isM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-29">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-30">    ll ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--;</span></span>
<span id="cb2-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-38">ll Inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ll x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);}</span></span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> Div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-41">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-42">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-43">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> Div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-44">        pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-45">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">LL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++){</span></span>
<span id="cb2-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-48">                p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[++</span>pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-49">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]++;</span></span>
<span id="cb2-50">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-51">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[++</span>pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-52">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-53"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-54"></span>
<span id="cb2-55"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-56">ll Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-57"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> DFS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>ll phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> Div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>pN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-60">        Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*</span>phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-63">    ll tpow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>tphi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)-</span>QPow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++){</span></span>
<span id="cb2-65">        DFS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tpow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tphi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-66">        tpow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> tphi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> tphi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-70"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-71"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> Solve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-72">    Div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-73">    Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>DFS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-74">    Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)%</span>MOD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-75">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%lld\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-76"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-77"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-78">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Rd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--){</span></span>
<span id="cb2-79">        scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,&amp;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-80">        Solve<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-81">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-82">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-83"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="s-5" class="level2">
<h2 class="anchored" data-anchor-id="s-5">5. 总结</h2>
<p>对于大多数题目，Burnside &amp; Polya通常是套在最表面的那一层皮，难点一般在求 <img src="https://latex.codecogs.com/png.latex?%7CC(f)%7C"> 或者 <img src="https://latex.codecogs.com/png.latex?f(%5Cgcd(n,i))"> 的部分。</p>
</section>
<section id="s-6" class="level2">
<h2 class="anchored" data-anchor-id="s-6">6. 参考及后记</h2>
<section id="zkx-keke_046-彳亍-学长-polya计数.pptx" class="level3">
<h3 class="anchored" data-anchor-id="zkx-keke_046-彳亍-学长-polya计数.pptx">zkx / keke_046 / 彳亍 学长 《Polya计数.pptx》</h3>
<p>思路清晰，可以看出keke学长对Polya有极其深入的理解。内容不便公布，可参考《组合数学》一书。</p>
</section>
<section id="算法导论第三版-31章-数论算法" class="level3">
<h3 class="anchored" data-anchor-id="算法导论第三版-31章-数论算法">《算法导论》第三版 31章 数论算法</h3>
<p>初稿写成后，在学习数论时偶然翻到这一节有对群的一些讨论，发现自己之前的理解不够优秀，做了一些订正。</p>
<p><del>之前把交换群认成群了</del></p>
</section>
<section id="后记" class="level3">
<h3 class="anchored" data-anchor-id="后记">后记</h3>
<p>Burnside &amp; Polya 最开始是去年暑假keke学长为我们讲授。当时云里雾里，半懂不懂。12月的时候因为PKUWC/THUWC成为机房留守儿童（雾），就花了一两天把keke的PPT慢慢看懂了，做了最初的笔记，在接下来的几个月里修订完善。</p>
<p>概念多，证明绕，很容易掉进思维的陷阱。要是能一步一步把证明过程捋清楚的话，对思维能力的提升还是很大的。</p>
<p>任何推导的目的都是由已知得到未知。把性质与推论构成的“有向无环图”搞清楚了，才算真正弄清楚了来龙去脉。</p>
<p>Burnside弱化版是整理笔记时灵光一闪生造出来的一个中间步骤，希望对大家的理解有所帮助。</p>
<p>多次用到了“将等价类计数问题转换为有多少个元素与某个确定的元素等价，并利用等价传递性导出封闭性说明形成连通块”这一思想，很具有推广性；另外遇到一些不太好证的命题可以试试反证法。</p>


</section>
</section>

 ]]></description>
  <category>algorithm</category>
  <category>math</category>
  <category>combinatorics</category>
  <category>algebra</category>
  <guid>https://blog.sun123zxy.top/posts/20200321-burnside/</guid>
  <pubDate>Sat, 21 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>约数个数函数的一个性质证明，以及其推广</title>
  <link>https://blog.sun123zxy.top/posts/20200220-factor/</link>
  <description><![CDATA[ 




<p><a href="https://www.luogu.com.cn/problem/P3327">洛谷P3327 [SDOI2015]约数个数和</a></p>
<p><a href="https://www.luogu.com.cn/problem/P4619">洛谷P4619 [SDOI2018]旧试题</a></p>
<p>要用到这个性质，而且网上几乎没有能看的证明，所以特别提出来整理一下。</p>
<section id="original" class="level2">
<h2 class="anchored" data-anchor-id="original">Original</h2>
<section id="二维" class="level3">
<h3 class="anchored" data-anchor-id="二维">二维</h3>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0Ad(AB)%20=%20%5Csum_%7Bx%7CA%7D%20%5Csum_%7By%7CB%7D%20%5B%5Cgcd%20(x,y)%20=%201%5D%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?d"> 是约数个数函数，即 <img src="https://latex.codecogs.com/png.latex?d%20(n)%20=%20%5Csum_%7Bd%7Cn%7D%201"></p>
</blockquote>
<p>（看上去比较不可思议对吧）</p>
<p>右侧的枚举，一部分因子算多了（比如当 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(x,y)=1"> 且额外有 <img src="https://latex.codecogs.com/png.latex?x%7CB,y%7CA"> 时，可以枚举出 <img src="https://latex.codecogs.com/png.latex?x*y%20=%20y*x"> ），一部分因子又没有算（比如当 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(A,B)%20%5Cnot=%201"> 时的 <img src="https://latex.codecogs.com/png.latex?A*B"> ）。但是算多和算少之间达成了诡异的平衡。</p>
<p>首先考虑 <img src="https://latex.codecogs.com/png.latex?A,B"> 互质的情况。显然此时右式中的 <img src="https://latex.codecogs.com/png.latex?%5B%5Cgcd%20(x,y)%20=%201%5D"> 恒成立。而左式可以通过积性函数的性质拆开。两侧都为 <img src="https://latex.codecogs.com/png.latex?d(A)*d(B)"> ，成立。（其实并没有按是否互质讨论的必要，但是这样想能让我们的思路更加清晰）</p>
<p>那么考虑 <img src="https://latex.codecogs.com/png.latex?%5Cgcd(A,B)%20%5Cnot=%201"> 时的情况。不妨先证明 <img src="https://latex.codecogs.com/png.latex?A%20=%20p%5Ea,%20B%20=%20p%5Eb"> （ <img src="https://latex.codecogs.com/png.latex?p"> 是素数，这两个 <img src="https://latex.codecogs.com/png.latex?p"> 是同一个数）时等式成立。</p>
<p>这部分的证明是容易的。根据约数个数的定义，左式显然为 <img src="https://latex.codecogs.com/png.latex?a+b+1">。对于右式，设 <img src="https://latex.codecogs.com/png.latex?x%20=%20p%5Ec,%20y=%20p%5Ed"> ，若要使 <img src="https://latex.codecogs.com/png.latex?%5B%5Cgcd%20(x,y)%20=%201%5D"> 成立， <img src="https://latex.codecogs.com/png.latex?c,d"> 中至少有一个为 <img src="https://latex.codecogs.com/png.latex?0"> 。那么当 <img src="https://latex.codecogs.com/png.latex?b=0">时，<img src="https://latex.codecogs.com/png.latex?c%20%5Cin%20%5B0,%20a%5D">；当 <img src="https://latex.codecogs.com/png.latex?a=0"> 时， <img src="https://latex.codecogs.com/png.latex?c%20%5Cin%20%5B0,b%5D"> ；其他情况都不满足条件。排除重复的 <img src="https://latex.codecogs.com/png.latex?c=0,%20d=0"> ，共有 <img src="https://latex.codecogs.com/png.latex?a+b+1"> 个情况成立，与左式相同，故等式成立。</p>
<p>讨论更加一般的情况。有了前面的证明，我们考虑将 <img src="https://latex.codecogs.com/png.latex?AB"> 分解质因数后食用，分解后的每一项的形式为 <img src="https://latex.codecogs.com/png.latex?p%5E%7Ba+b%7D"> 。左边根据约数个数基本性质“指数加一连乘积”，即每一个 <img src="https://latex.codecogs.com/png.latex?p"> 对应的 <img src="https://latex.codecogs.com/png.latex?(a+b+1)"> 之积。对于右侧，前证说明对于每个 <img src="https://latex.codecogs.com/png.latex?p"> ，合法的 <img src="https://latex.codecogs.com/png.latex?c,d"> 的选择有对应的 <img src="https://latex.codecogs.com/png.latex?a+b+1"> 种，要让 <img src="https://latex.codecogs.com/png.latex?%5B%5Cgcd(x,y)=1%5D"> 需要每一个 <img src="https://latex.codecogs.com/png.latex?p"> 都是合法情况。而每个 <img src="https://latex.codecogs.com/png.latex?p"> 相对独立，其本质就是许多个“选择”，直接用乘法原理合并起来即可，于是也与左式相同。</p>
<p>用通俗一点的说法，我不管其他的 <img src="https://latex.codecogs.com/png.latex?p"> 到底需要让 <img src="https://latex.codecogs.com/png.latex?x,y"> 满足什么样的条件才能使 <img src="https://latex.codecogs.com/png.latex?%5B%5Cgcd(x,y)=1%5D"> ，反正在我这个 <img src="https://latex.codecogs.com/png.latex?p"> 这里只有 <img src="https://latex.codecogs.com/png.latex?a+b+1"> 个方案有合法的可能性。</p>
<p>总之这样就证毕了。</p>
<p>证明思路很像积性函数的合并，也许对其他一些积性函数命题的证明这种方法也管用。</p>
<p>参考：</p>
<p><a href="https://www.luogu.com.cn/blog/_post/89727">https://www.luogu.com.cn/blog/_post/89727</a></p>
<p><a href="https://www.luogu.com.cn/blog/_post/39908">https://www.luogu.com.cn/blog/_post/39908</a></p>
</section>
<section id="高维" class="level3">
<h3 class="anchored" data-anchor-id="高维">高维</h3>
<p>对于形如 <img src="https://latex.codecogs.com/png.latex?%0Ad(ABC)%20=%20%5Csum_%7Bx%7CA%7D%20%5Csum_%7By%7CB%7D%20%5Csum_%7Bz%7CC%7D%20%5B%5Cgcd%20(x,y)%20=%201%5D%20%5B%5Cgcd%20(y,z)%20=%201%5D%20%5B%5Cgcd%20(x,z)%20=1%5D%0A"></p>
<p>的高维拓展，证明思路基本相同，不再赘述。（如果觉得有点迷可以先跳过，Extended里的证明更加接近本质）</p>
</section>
</section>
<section id="extended-update-20200308" class="level2">
<h2 class="anchored" data-anchor-id="extended-update-20200308">Extended (update 2020/03/08)</h2>
<p>下面研究 Original 推广到广义约数个数函数的形式。</p>
<section id="二维-1" class="level3">
<h3 class="anchored" data-anchor-id="二维-1">二维</h3>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_k%20(AB)%20=%20%5Csum_%7Bx%7CA%7D%20%5Csum_%7By%7CB%7D%20%5B%5Cgcd(x,y)=1%5D%20(x%20%5Cfrac%7BB%7D%7By%7D)%5Ek%20=%20%5Csum_%7Bx%7CA%7D%20%5Csum_%7By%7CB%7D%20%5B%5Cgcd(x,%5Cfrac%7BB%7D%7By%7D)=1%5D%20(x%20y)%5Ek%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?%5Csigma_k"> 是广义的约数个数函数，即 <img src="https://latex.codecogs.com/png.latex?%5Csigma_k%20(n)%20=%20%5Csum_%7Bd%7Cn%7D%20d%5Ek"></p>
</blockquote>
<p>显然中式和右式是等价的。现证明左式和右式等价。</p>
<p>证明思路与上面基本一致。同样的，我们先解决 <img src="https://latex.codecogs.com/png.latex?A=p%5Ea,%20B=p%5Eb"> 的情况。</p>
<p>首先，直接由定义得出左式： <img src="https://latex.codecogs.com/png.latex?%0A%E5%B7%A6%E5%BC%8F%20=%20%5Csum_%7Bi=0%7D%5E%7Ba+b%7D%20p%5E%7Bik%7D%0A"></p>
<p>同样设 <img src="https://latex.codecogs.com/png.latex?x=p%5Ec,%20y=p%5Ed"> 。分析 <img src="https://latex.codecogs.com/png.latex?%5B%5Cgcd(x,%5Cfrac%7BB%7D%7By%7D)=1%5D"> 的意义，它的意思是若 <img src="https://latex.codecogs.com/png.latex?x"> 中不含 <img src="https://latex.codecogs.com/png.latex?p"> （ <img src="https://latex.codecogs.com/png.latex?c=0"> ），则 <img src="https://latex.codecogs.com/png.latex?y"> 可以随便选（ <img src="https://latex.codecogs.com/png.latex?d%20%5Cin%20%5B0,b%5D"> ）；若 <img src="https://latex.codecogs.com/png.latex?x"> 中含 <img src="https://latex.codecogs.com/png.latex?p"> （ <img src="https://latex.codecogs.com/png.latex?c%20%5Cin%20%5B1,a%5D"> ），则 <img src="https://latex.codecogs.com/png.latex?y"> 就必须包含所有的 <img src="https://latex.codecogs.com/png.latex?p"> （ <img src="https://latex.codecogs.com/png.latex?d=b"> ），否则 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BB%7D%7By%7D"> 里就含有 <img src="https://latex.codecogs.com/png.latex?p"> 了；其他情况不满足条件 。</p>
<p>即合法的情况为 <img src="https://latex.codecogs.com/png.latex?(0,%5B0,b%5D)"> 和 <img src="https://latex.codecogs.com/png.latex?(%5B1,a%5D,b)"> 。</p>
<p>那么，根据右式的形式，可以得出 <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%E5%8F%B3%E5%BC%8F%20&amp;=%20%5Csum_%7Bi=0%7D%5Eb%20p%5E0%20p%5Ei%20+%20%5Csum_%7Bi=1%7D%5Ea%20p%5Ei%20p%5Eb%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=0%7D%5Eb%20p%5Ei%20+%20%5Csum_%7Bi=1%7D%5Ea%20p%5E%7Bb+i%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>该式实际上只是将左式的枚举从 <img src="https://latex.codecogs.com/png.latex?b"> 那里切开了。两式是等价的。</p>
<p>那么和上面一样的，对于一般的情况分解质因数，对每一个 <img src="https://latex.codecogs.com/png.latex?p"> 分别考虑，积性合并即可。全部乘起来的依据也是乘法原理（ <img src="https://latex.codecogs.com/png.latex?%5Csum%20*%20%5Csum"> 就是在枚举所有的方案对应贡献乘积之和）。可能有人问：这里的 <img src="https://latex.codecogs.com/png.latex?B"> 不是发生变化了吗？其实 <img src="https://latex.codecogs.com/png.latex?B"> 充当的是一个 <img src="https://latex.codecogs.com/png.latex?y"> 的全集，不是 <img src="https://latex.codecogs.com/png.latex?p%5Eb"> 了也不影响 <img src="https://latex.codecogs.com/png.latex?x,y"> 的取值，所以是没有关系的。可以参考一下 Original 里“通俗一点的说法”。</p>
</section>
<section id="高维-1" class="level3">
<h3 class="anchored" data-anchor-id="高维-1">高维</h3>
<p>形如 <img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_k%20(ABC)%20=%20%5Csum_%7Bx%7CA%7D%20%5Csum_%7By%7CB%7D%20%5Csum_%7Bz%7CC%7D%20%5B%5Cgcd(x,%5Cfrac%7BB%7D%7By%7D)=1%5D%20%5B%5Cgcd(y,%5Cfrac%7BC%7D%7Bz%7D)=1%5D%20%5B%5Cgcd(x,%20%5Cfrac%7BC%7D%7Bz%7D=1)%5D%20(x%20y%20z)%5Ek%0A"></p>
<p>的高维拓展， <img src="https://latex.codecogs.com/png.latex?%5Cgcd"> 部分就是如 <img src="https://latex.codecogs.com/png.latex?x-y"> ， <img src="https://latex.codecogs.com/png.latex?x-z"> ， <img src="https://latex.codecogs.com/png.latex?y-z"> 两两配对的形式，这样来限制取值范围。</p>
<p>证明思路基本相同，同样写出合法情况 <img src="https://latex.codecogs.com/png.latex?(0,0,%5B0,c%5D)"> ， <img src="https://latex.codecogs.com/png.latex?(0,%5B1,b%5D,c)"> ， <img src="https://latex.codecogs.com/png.latex?(%5B1,a%5D,b,c)"> ，对应 <img src="https://latex.codecogs.com/png.latex?p%5E%7Ba+b+c+1%7D"> ，就容易证明了。</p>
<p>没看到过要用这个的题，已对拍检验正确性。</p>


</section>
</section>

 ]]></description>
  <category>algorithm</category>
  <category>math</category>
  <category>number theory</category>
  <guid>https://blog.sun123zxy.top/posts/20200220-factor/</guid>
  <pubDate>Thu, 20 Feb 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
