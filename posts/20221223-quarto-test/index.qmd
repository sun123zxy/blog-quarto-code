---
title: "SunQuarTeX 中文学术写作示例文档"
subtitle: "这是副标题"
author: "sun123zxy"
date: "2022/12/23"
date-modified: "2022/12/24"
abstract: "使用 Quarto Markdown 语法，支持输出至 HTML、PDF/LaTeX 等多种格式的中文学术写作工具，覆盖交叉引用、插图绘制、定理系统等多种功能。"
bibliography: index.bib

number-sections: true

categories:
  - "web"
  - "LaTeX"
  - "站点相关"
---

## 前言

具体使用方法等参见 [sun123zxy/sunquartex](https://github.com/sun123zxy/sunquartex)。

## 文章结构测试

这一节测试文章结构。

### 文章分节

非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。

#### 文章分分节 {#sec-test}

Quarto 支持交叉引用。比如这一节的标题就已经被打上了标签。

##### 分分分节

本节中我们测试交叉引用 @sec-test。

###### 分分分分节

这是最小的一级了。

## 图片、表格、列表测试

这是 Quarto 的图标。

![这是一张插图](quarto.png){#fig-quarto}

交叉引用 @fig-quarto 当然也是可以的。

这是一个紧凑列表。

- 自反性。
- 反对称性一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。
- 传递性。

这是一个宽松列表。

- 自反性。

- 反对称性一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。

  还多加了一段。

- 传递性。

当然也可以使用 markdown 表格。例如 @tbl-cartesian-unsolved.

顺便测试以下多表格并列。加上 @tbl-power-unsolved，它们共同组成了 @tbl-panel-unsolved。

::: {#tbl-panel-unsolved layout-ncol=2}
|||||
|:-:|:-:|:-:|:-:|
| $L_i \times C_j$   | $2$           | $\mathbb N$   | $\mathbb R$   |
| $2$                | $4$           | $\mathbb N$   | $\mathbb R$   |
| $\mathbb N$        | $\mathbb N$   | $\mathbb N$   | ?             |
| $\mathbb R$        | $\mathbb R$   | ?             | $\mathbb R$   |

:笛卡尔积 {#tbl-cartesian-unsolved}

|||||
|:-:|:-:|:-:|:-:|
|$L_i^{C_j}$  | $2$           | $\mathbb N$   | $\mathbb R$     |      
|$2$          | $4$           | $\mathbb N$   | $2^{\mathbb R}$ | 
|$\mathbb N$  | $\mathbb N$   | ?             | ?               |
|$\mathbb R$  | $\mathbb R$   | ?             | ?               |

:集合幂 {#tbl-power-unsolved}

相关集合的势（不完整版）
:::

## 数学公式、定理系统测试

Quarto 的一大卖点。

这一节我们测试数学相关内容. HTML 中的定理标号方式目前没有方法更改，但 LaTeX 中的定理标号可通过自行修改模板中 `amsthm` 宏包的定义实现.

此外，根据 [Quarto - Markdown Basics # Equations](https://quarto.org/docs/authoring/markdown-basics.html#equations) 和 [Defining LaTeX commands for HTML and PDF rendering - Discussion #1793](https://github.com/quarto-dev/quarto-cli/discussions/1793)，可按如下面方式自定义 macro 并确保其在 HTML 和 LaTeX/PDF 中都得到正确渲染。值得注意的是，由于 `\DeclareMathOperator` 只能在 LaTeX 的导言区使用，这里我们用 `\newcommand` + `\operatorname` 的方式替代。

::::: {.hidden}
::: {.content-hidden unless-format="html"}
$$
\newcommand{\ran}{\operatorname{ran}}
$$
:::
::: {.content-hidden unless-format="pdf"}
```{=latex}
\newcommand{\ran}{\operatorname{ran}}
```
:::
:::::

下面的公式使用了上面定义的 macro。
$$
\ran A := \{ y \mid (x,y) \in A \}
$$

两个集合 $A, B$ 的笛卡尔积定义为
$$
A \times B = \{\langle x,y \rangle \mid x \in A \land y \in B \}
$$

显然，笛卡尔积不满足交换律和结合律. 在势的视角下，它的表现如何呢？

::: {#thm-cartesian-preserve}

## 笛卡尔积的保势性

这是一个有 caption 的定理.

$$
A \preccurlyeq C \land B \preccurlyeq D \implies A \times B \preccurlyeq C \times D
$$
:::
    
::: {.proof}

建立单射
$$
\begin{aligned}
\varphi: A \times B &\to C \times D \\
\langle x,y \rangle &\mapsto \langle f(x), g(y) \rangle
\end{aligned}
$$
即可，其中 $f$ 和 $g$ 是由 $A \preccurlyeq C$ 和 $B \preccurlyeq D$ 确定的单射.
:::

::: {#cor-random}
等势意义下可用等势的集合替换参与笛卡尔积运算的集合，即
$$
A \approx C \land B \approx D \implies A \times B \approx C \times D
$$

这是一个没有 caption 的定理.
:::

::: {#exm-rtimesn}

证明
$$
\mathbb R \times \mathbb N \approx \mathbb N \times \mathbb R \approx \mathbb R
$$
:::

::: {.proof}
利用 @thm-cartesian-preserve 对 $\mathbb R \times 2$ 和 $\mathbb R \times \mathbb R$ 夹逼，立刻得到
$$
\mathbb R \approx \mathbb R \times 2 \preccurlyeq \mathbb R \times \mathbb N \preccurlyeq \mathbb R \times \mathbb R \approx \mathbb R
\implies \mathbb R \times \mathbb N \approx \mathbb N \times \mathbb R \approx \mathbb R
$$
:::

## 数据可视化

Quarto 的另一大卖点。

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

交叉引用 @fig-polar 当然也是可以的.

另外，支持使用 GraphViz 或 Mermaid 绘制有向图或流程图。

```{dot}
//| label: fig-real
//| fig-cap: GraphViz 有向图
//| fig-width: 6.25
//| fig-height: 2.5
digraph G{
    //bgcolor="transparent"
    //node [style="filled", fillcolor="white"]
    //edge [color="gray" penwidth=2]

    //layout=neato
    //ratio=0.5

    rankdir=BT
    sup[label="A"];
    mono[label="B"];
    nested[label="C"];
    bw[label="D"];
    cauchy[label="E"];
    
    accu[label="F"]
    finite[label="G"];
    lebesgue[label="H"];


    { rank=max; finite }
    { rank=same;  lebesgue }
    { rank=same; sup, mono, nested, accu, bw }
    { rank=min; cauchy}

    sup -> mono -> nested; nested -> bw [style=invis]; bw -> cauchy;
    cauchy -> mono[label="1"];
    nested -> sup[label="2"];
    nested -> finite[label="3"];
    nested -> accu[label="4"];
    finite -> accu[label="5"];
    accu -> bw[dir=both, label="6"];
    bw -> lebesgue[label="7"]; lebesgue -> finite[label="8"];
    finite -> sup[label="9"];
}
```

## HTML 专用测试

目前暂未处理 LaTeX/PDF 格式的代码高亮和 callout，本节测试内容只会在 HTML 输出中被渲染。（参见：[Quarto - Conditional Content](https://quarto.org/docs/authoring/conditional.html)）

::::: {.content-visible when-format="html"}

### 代码块、引用

本节测试代码块和引用。

> 这是一个引用块和一个非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。

Quarto 具有 5 种 callout 类型：`note`，`warning`，`important`，`tip`，和 `caution`。

下面是代码块。

```python
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### Callouts

::: {.callout-note}
普通的 note callout。
:::

::: {.callout-warning}
这是 warning callout 和一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。
:::

这是两个 callout 中间的一个段落。

::: {.callout-important}
这是 important callout。
:::

::: {.callout-tip}
## 有 caption 的 callout

这是有 caption 的 callout。
:::

::: {.callout-caution collapse="true"}

## 可折叠的 callout

开启 collapse 的可折叠 caution callout。
:::

::: {.callout-caution appearance="simple"}

simple 风格的 callout 和一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。
:::

::: {.callout-caution appearance="minimal"}

minimal 风格的 callout 和一个和非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子。
:::

:::::

## 文献引用测试

人脸识别是以人面部特征作为识别个体身份的一种个体生物特征识别方法 [@define]。……人脸识别的研究最早可追溯到上世纪 60 年代，Bledsoe and Chan 研究了编程计算机识别人脸的方法[@history]。随后，萌芽期的人脸识别技术经历多轮蜕变，在发展中逐渐完善。然而，人脸识别的主要难点在于不同个体的人脸结构并无大异，而同一个体的人脸在不同表情、年龄、妆饰、光照等干扰因素下又往往差异显著[@technical]，这要求人脸识别技术既要克服类内因素的干扰，同时又要加强类间差距的显著性，而早期人脸识别方法关注人脸几何特征，识别效果不尽人意。为此，以 Eigenfaces[@eigenfaces] 为代表的子空间学习识别方法和 Gabor[@gabor]、LBP[@lbp] 等局部特征分析的滤波器提取方法在各自领域都有所突破。2014 年，应用新兴的深度卷积神经网络技术，DeepFace[@deepface] 横空出世，以 97.35% 的 LFW 基准数据集识别准确率重塑了人脸识别领域的研究格局。随后，人脸识别技术迎来爆发式增长，并逐渐走进人们的日常生活之中。……个体层面，要加强公众的权利意识，塑造个人的“数字理性”[@guochunzhen]。